
BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011200  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  08011438  08011438  00012438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011eb8  08011eb8  00013290  2**0
                  CONTENTS
  4 .ARM          00000008  08011eb8  08011eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ec0  08011ec0  00013290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011ec0  08011ec0  00012ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08011ec8  08011ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08011ed0  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ee0  20000290  08012160  00013290  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  20001170  08012160  00014170  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00013290  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030aaf  00000000  00000000  000132c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000445a  00000000  00000000  00043d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025c0  00000000  00000000  000481d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d36  00000000  00000000  0004a790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00046412  00000000  00000000  0004c4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003184e  00000000  00000000  000928d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001c4d43  00000000  00000000  000c4126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00288e69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000baa8  00000000  00000000  00288eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00294954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000290 	.word	0x20000290
 8000254:	00000000 	.word	0x00000000
 8000258:	0801141c 	.word	0x0801141c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000294 	.word	0x20000294
 8000274:	0801141c 	.word	0x0801141c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c64:	f000 b97e 	b.w	8000f64 <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f806 	bl	8000c80 <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__udivmoddi4>:
 8000c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c84:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c86:	460c      	mov	r4, r1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d14d      	bne.n	8000d28 <__udivmoddi4+0xa8>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	460f      	mov	r7, r1
 8000c90:	4684      	mov	ip, r0
 8000c92:	4696      	mov	lr, r2
 8000c94:	fab2 f382 	clz	r3, r2
 8000c98:	d960      	bls.n	8000d5c <__udivmoddi4+0xdc>
 8000c9a:	b14b      	cbz	r3, 8000cb0 <__udivmoddi4+0x30>
 8000c9c:	fa02 fe03 	lsl.w	lr, r2, r3
 8000ca0:	f1c3 0220 	rsb	r2, r3, #32
 8000ca4:	409f      	lsls	r7, r3
 8000ca6:	fa00 fc03 	lsl.w	ip, r0, r3
 8000caa:	fa20 f202 	lsr.w	r2, r0, r2
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000cb4:	fa1f f48e 	uxth.w	r4, lr
 8000cb8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cbc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000cc0:	fb06 7711 	mls	r7, r6, r1, r7
 8000cc4:	fb01 f004 	mul.w	r0, r1, r4
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x62>
 8000cd0:	eb1e 0202 	adds.w	r2, lr, r2
 8000cd4:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x60>
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	f200 812d 	bhi.w	8000f3a <__udivmoddi4+0x2ba>
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	1a12      	subs	r2, r2, r0
 8000ce4:	fa1f fc8c 	uxth.w	ip, ip
 8000ce8:	fbb2 f0f6 	udiv	r0, r2, r6
 8000cec:	fb06 2210 	mls	r2, r6, r0, r2
 8000cf0:	fb00 f404 	mul.w	r4, r0, r4
 8000cf4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000cf8:	4564      	cmp	r4, ip
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x8e>
 8000cfc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d00:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d04:	d202      	bcs.n	8000d0c <__udivmoddi4+0x8c>
 8000d06:	4564      	cmp	r4, ip
 8000d08:	f200 811a 	bhi.w	8000f40 <__udivmoddi4+0x2c0>
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d12:	ebac 0c04 	sub.w	ip, ip, r4
 8000d16:	2100      	movs	r1, #0
 8000d18:	b125      	cbz	r5, 8000d24 <__udivmoddi4+0xa4>
 8000d1a:	fa2c f303 	lsr.w	r3, ip, r3
 8000d1e:	2200      	movs	r2, #0
 8000d20:	e9c5 3200 	strd	r3, r2, [r5]
 8000d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d905      	bls.n	8000d38 <__udivmoddi4+0xb8>
 8000d2c:	b10d      	cbz	r5, 8000d32 <__udivmoddi4+0xb2>
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	2100      	movs	r1, #0
 8000d34:	4608      	mov	r0, r1
 8000d36:	e7f5      	b.n	8000d24 <__udivmoddi4+0xa4>
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	d14d      	bne.n	8000ddc <__udivmoddi4+0x15c>
 8000d40:	42a3      	cmp	r3, r4
 8000d42:	f0c0 80f2 	bcc.w	8000f2a <__udivmoddi4+0x2aa>
 8000d46:	4290      	cmp	r0, r2
 8000d48:	f080 80ef 	bcs.w	8000f2a <__udivmoddi4+0x2aa>
 8000d4c:	4606      	mov	r6, r0
 8000d4e:	4623      	mov	r3, r4
 8000d50:	4608      	mov	r0, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0e6      	beq.n	8000d24 <__udivmoddi4+0xa4>
 8000d56:	e9c5 6300 	strd	r6, r3, [r5]
 8000d5a:	e7e3      	b.n	8000d24 <__udivmoddi4+0xa4>
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	f040 80a2 	bne.w	8000ea6 <__udivmoddi4+0x226>
 8000d62:	1a8a      	subs	r2, r1, r2
 8000d64:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d68:	fa1f f68e 	uxth.w	r6, lr
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	fbb2 f4f7 	udiv	r4, r2, r7
 8000d72:	fb07 2014 	mls	r0, r7, r4, r2
 8000d76:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d7e:	fb06 f004 	mul.w	r0, r6, r4
 8000d82:	4290      	cmp	r0, r2
 8000d84:	d90f      	bls.n	8000da6 <__udivmoddi4+0x126>
 8000d86:	eb1e 0202 	adds.w	r2, lr, r2
 8000d8a:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8000d8e:	bf2c      	ite	cs
 8000d90:	f04f 0901 	movcs.w	r9, #1
 8000d94:	f04f 0900 	movcc.w	r9, #0
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d903      	bls.n	8000da4 <__udivmoddi4+0x124>
 8000d9c:	f1b9 0f00 	cmp.w	r9, #0
 8000da0:	f000 80c8 	beq.w	8000f34 <__udivmoddi4+0x2b4>
 8000da4:	4644      	mov	r4, r8
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	fa1f fc8c 	uxth.w	ip, ip
 8000dac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db0:	fb07 2210 	mls	r2, r7, r0, r2
 8000db4:	fb00 f606 	mul.w	r6, r0, r6
 8000db8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dbc:	4566      	cmp	r6, ip
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x152>
 8000dc0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dc4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x150>
 8000dca:	4566      	cmp	r6, ip
 8000dcc:	f200 80bb 	bhi.w	8000f46 <__udivmoddi4+0x2c6>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	ebac 0c06 	sub.w	ip, ip, r6
 8000dd6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dda:	e79d      	b.n	8000d18 <__udivmoddi4+0x98>
 8000ddc:	f1c1 0620 	rsb	r6, r1, #32
 8000de0:	408b      	lsls	r3, r1
 8000de2:	fa04 fe01 	lsl.w	lr, r4, r1
 8000de6:	fa22 f706 	lsr.w	r7, r2, r6
 8000dea:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dee:	40f4      	lsrs	r4, r6
 8000df0:	408a      	lsls	r2, r1
 8000df2:	431f      	orrs	r7, r3
 8000df4:	ea4e 030c 	orr.w	r3, lr, ip
 8000df8:	fa00 fe01 	lsl.w	lr, r0, r1
 8000dfc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e00:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0c:	fb08 4410 	mls	r4, r8, r0, r4
 8000e10:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e14:	fb00 f90c 	mul.w	r9, r0, ip
 8000e18:	45a1      	cmp	r9, r4
 8000e1a:	d90e      	bls.n	8000e3a <__udivmoddi4+0x1ba>
 8000e1c:	193c      	adds	r4, r7, r4
 8000e1e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e22:	bf2c      	ite	cs
 8000e24:	f04f 0b01 	movcs.w	fp, #1
 8000e28:	f04f 0b00 	movcc.w	fp, #0
 8000e2c:	45a1      	cmp	r9, r4
 8000e2e:	d903      	bls.n	8000e38 <__udivmoddi4+0x1b8>
 8000e30:	f1bb 0f00 	cmp.w	fp, #0
 8000e34:	f000 8093 	beq.w	8000f5e <__udivmoddi4+0x2de>
 8000e38:	4650      	mov	r0, sl
 8000e3a:	eba4 0409 	sub.w	r4, r4, r9
 8000e3e:	fa1f f983 	uxth.w	r9, r3
 8000e42:	fbb4 f3f8 	udiv	r3, r4, r8
 8000e46:	fb08 4413 	mls	r4, r8, r3, r4
 8000e4a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d906      	bls.n	8000e64 <__udivmoddi4+0x1e4>
 8000e56:	193c      	adds	r4, r7, r4
 8000e58:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 8000e5c:	d201      	bcs.n	8000e62 <__udivmoddi4+0x1e2>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d87a      	bhi.n	8000f58 <__udivmoddi4+0x2d8>
 8000e62:	4643      	mov	r3, r8
 8000e64:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e68:	eba4 040c 	sub.w	r4, r4, ip
 8000e6c:	fba0 9802 	umull	r9, r8, r0, r2
 8000e70:	4544      	cmp	r4, r8
 8000e72:	46cc      	mov	ip, r9
 8000e74:	4643      	mov	r3, r8
 8000e76:	d302      	bcc.n	8000e7e <__udivmoddi4+0x1fe>
 8000e78:	d106      	bne.n	8000e88 <__udivmoddi4+0x208>
 8000e7a:	45ce      	cmp	lr, r9
 8000e7c:	d204      	bcs.n	8000e88 <__udivmoddi4+0x208>
 8000e7e:	3801      	subs	r0, #1
 8000e80:	ebb9 0c02 	subs.w	ip, r9, r2
 8000e84:	eb68 0307 	sbc.w	r3, r8, r7
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x222>
 8000e8a:	ebbe 020c 	subs.w	r2, lr, ip
 8000e8e:	eb64 0403 	sbc.w	r4, r4, r3
 8000e92:	fa04 f606 	lsl.w	r6, r4, r6
 8000e96:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9a:	40cc      	lsrs	r4, r1
 8000e9c:	431e      	orrs	r6, r3
 8000e9e:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e73e      	b.n	8000d24 <__udivmoddi4+0xa4>
 8000ea6:	fa02 fe03 	lsl.w	lr, r2, r3
 8000eaa:	f1c3 0120 	rsb	r1, r3, #32
 8000eae:	fa04 f203 	lsl.w	r2, r4, r3
 8000eb2:	fa00 fc03 	lsl.w	ip, r0, r3
 8000eb6:	40cc      	lsrs	r4, r1
 8000eb8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ebc:	fa20 f101 	lsr.w	r1, r0, r1
 8000ec0:	fa1f f68e 	uxth.w	r6, lr
 8000ec4:	fbb4 f0f7 	udiv	r0, r4, r7
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	fb07 4410 	mls	r4, r7, r0, r4
 8000ece:	0c11      	lsrs	r1, r2, #16
 8000ed0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000ed4:	fb00 f406 	mul.w	r4, r0, r6
 8000ed8:	428c      	cmp	r4, r1
 8000eda:	d90e      	bls.n	8000efa <__udivmoddi4+0x27a>
 8000edc:	eb1e 0101 	adds.w	r1, lr, r1
 8000ee0:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8000ee4:	bf2c      	ite	cs
 8000ee6:	f04f 0901 	movcs.w	r9, #1
 8000eea:	f04f 0900 	movcc.w	r9, #0
 8000eee:	428c      	cmp	r4, r1
 8000ef0:	d902      	bls.n	8000ef8 <__udivmoddi4+0x278>
 8000ef2:	f1b9 0f00 	cmp.w	r9, #0
 8000ef6:	d02c      	beq.n	8000f52 <__udivmoddi4+0x2d2>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	1b09      	subs	r1, r1, r4
 8000efc:	b292      	uxth	r2, r2
 8000efe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f02:	fb07 1114 	mls	r1, r7, r4, r1
 8000f06:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f0a:	fb04 f106 	mul.w	r1, r4, r6
 8000f0e:	4291      	cmp	r1, r2
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x2a2>
 8000f12:	eb1e 0202 	adds.w	r2, lr, r2
 8000f16:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8000f1a:	d201      	bcs.n	8000f20 <__udivmoddi4+0x2a0>
 8000f1c:	4291      	cmp	r1, r2
 8000f1e:	d815      	bhi.n	8000f4c <__udivmoddi4+0x2cc>
 8000f20:	4644      	mov	r4, r8
 8000f22:	1a52      	subs	r2, r2, r1
 8000f24:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000f28:	e721      	b.n	8000d6e <__udivmoddi4+0xee>
 8000f2a:	1a86      	subs	r6, r0, r2
 8000f2c:	eb64 0303 	sbc.w	r3, r4, r3
 8000f30:	2001      	movs	r0, #1
 8000f32:	e70e      	b.n	8000d52 <__udivmoddi4+0xd2>
 8000f34:	3c02      	subs	r4, #2
 8000f36:	4472      	add	r2, lr
 8000f38:	e735      	b.n	8000da6 <__udivmoddi4+0x126>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4472      	add	r2, lr
 8000f3e:	e6d0      	b.n	8000ce2 <__udivmoddi4+0x62>
 8000f40:	44f4      	add	ip, lr
 8000f42:	3802      	subs	r0, #2
 8000f44:	e6e3      	b.n	8000d0e <__udivmoddi4+0x8e>
 8000f46:	44f4      	add	ip, lr
 8000f48:	3802      	subs	r0, #2
 8000f4a:	e742      	b.n	8000dd2 <__udivmoddi4+0x152>
 8000f4c:	3c02      	subs	r4, #2
 8000f4e:	4472      	add	r2, lr
 8000f50:	e7e7      	b.n	8000f22 <__udivmoddi4+0x2a2>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4471      	add	r1, lr
 8000f56:	e7d0      	b.n	8000efa <__udivmoddi4+0x27a>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e782      	b.n	8000e64 <__udivmoddi4+0x1e4>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	443c      	add	r4, r7
 8000f62:	e76a      	b.n	8000e3a <__udivmoddi4+0x1ba>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	@ 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  LED6_GPIO_CLK_ENABLE();
 8000f76:	4b22      	ldr	r3, [pc, #136]	@ (8001000 <BSP_LED_Init+0x98>)
 8000f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f7c:	4a20      	ldr	r2, [pc, #128]	@ (8001000 <BSP_LED_Init+0x98>)
 8000f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f86:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <BSP_LED_Init+0x98>)
 8000f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
  LED7_GPIO_CLK_ENABLE();
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <BSP_LED_Init+0x98>)
 8000f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f9a:	4a19      	ldr	r2, [pc, #100]	@ (8001000 <BSP_LED_Init+0x98>)
 8000f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fa0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fa4:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <BSP_LED_Init+0x98>)
 8000fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4a10      	ldr	r2, [pc, #64]	@ (8001004 <BSP_LED_Init+0x9c>)
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	4a0f      	ldr	r2, [pc, #60]	@ (8001008 <BSP_LED_Init+0xa0>)
 8000fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd0:	f107 0210 	add.w	r2, r7, #16
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 fa34 	bl	8005444 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <BSP_LED_Init+0xa0>)
 8000fe0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <BSP_LED_Init+0x9c>)
 8000fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f004 fcdd 	bl	80059b0 <HAL_GPIO_WritePin>

  return ret;
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3728      	adds	r7, #40	@ 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	46020c00 	.word	0x46020c00
 8001004:	08011920 	.word	0x08011920
 8001008:	20000000 	.word	0x20000000

0800100c <BSP_LED_On>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4a09      	ldr	r2, [pc, #36]	@ (8001040 <BSP_LED_On+0x34>)
 800101a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	4a08      	ldr	r2, [pc, #32]	@ (8001044 <BSP_LED_On+0x38>)
 8001022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001026:	b29b      	uxth	r3, r3
 8001028:	2200      	movs	r2, #0
 800102a:	4619      	mov	r1, r3
 800102c:	f004 fcc0 	bl	80059b0 <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]

  return ret;
 8001034:	68fb      	ldr	r3, [r7, #12]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000000 	.word	0x20000000
 8001044:	08011920 	.word	0x08011920

08001048 <BSP_LED_Off>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4a09      	ldr	r2, [pc, #36]	@ (800107c <BSP_LED_Off+0x34>)
 8001056:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4a08      	ldr	r2, [pc, #32]	@ (8001080 <BSP_LED_Off+0x38>)
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	b29b      	uxth	r3, r3
 8001064:	2201      	movs	r2, #1
 8001066:	4619      	mov	r1, r3
 8001068:	f004 fca2 	bl	80059b0 <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]

  return ret;
 8001070:	68fb      	ldr	r3, [r7, #12]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000000 	.word	0x20000000
 8001080:	08011920 	.word	0x08011920

08001084 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	460a      	mov	r2, r1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback,};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY,};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE,};

  if (Button != BUTTON_USER)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <BSP_PB_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800109e:	f06f 0301 	mvn.w	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80010a4:	e05c      	b.n	8001160 <BSP_PB_Init+0xdc>
  }
  else
  {
    /* Enable the BUTTON clock*/
    BUTTON_USER_GPIO_CLK_ENABLE();
 80010a6:	4b31      	ldr	r3, [pc, #196]	@ (800116c <BSP_PB_Init+0xe8>)
 80010a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ac:	4a2f      	ldr	r2, [pc, #188]	@ (800116c <BSP_PB_Init+0xe8>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010b6:	4b2d      	ldr	r3, [pc, #180]	@ (800116c <BSP_PB_Init+0xe8>)
 80010b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]

    gpio_init_structure.Pin = BUTTON_PIN [Button];
 80010c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010c8:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61fb      	str	r3, [r7, #28]

    if (ButtonMode == BUTTON_MODE_GPIO)
 80010d2:	79bb      	ldrb	r3, [r7, #6]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10c      	bne.n	80010f2 <BSP_PB_Init+0x6e>
    {
      /* Configure Button pin as input */
      gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
      HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	4a24      	ldr	r2, [pc, #144]	@ (8001170 <BSP_PB_Init+0xec>)
 80010e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e4:	f107 0210 	add.w	r2, r7, #16
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f004 f9aa 	bl	8005444 <HAL_GPIO_Init>
 80010f0:	e036      	b.n	8001160 <BSP_PB_Init+0xdc>
    }
    else /* (ButtonMode == BUTTON_MODE_EXTI) */
    {
      /* Configure Button pin as input with External interrupt */
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80010f2:	4b20      	ldr	r3, [pc, #128]	@ (8001174 <BSP_PB_Init+0xf0>)
 80010f4:	617b      	str	r3, [r7, #20]

      HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001170 <BSP_PB_Init+0xec>)
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	f107 0210 	add.w	r2, r7, #16
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f004 f99d 	bl	8005444 <HAL_GPIO_Init>

      (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800110a:	79fa      	ldrb	r2, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4a18      	ldr	r2, [pc, #96]	@ (8001178 <BSP_PB_Init+0xf4>)
 8001116:	441a      	add	r2, r3
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	4918      	ldr	r1, [pc, #96]	@ (800117c <BSP_PB_Init+0xf8>)
 800111c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001120:	4619      	mov	r1, r3
 8001122:	4610      	mov	r0, r2
 8001124:	f004 f932 	bl	800538c <HAL_EXTI_GetHandle>
      (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001128:	79fa      	ldrb	r2, [r7, #7]
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4a11      	ldr	r2, [pc, #68]	@ (8001178 <BSP_PB_Init+0xf4>)
 8001134:	1898      	adds	r0, r3, r2
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	4a11      	ldr	r2, [pc, #68]	@ (8001180 <BSP_PB_Init+0xfc>)
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	461a      	mov	r2, r3
 8001140:	2100      	movs	r1, #0
 8001142:	f004 f8f7 	bl	8005334 <HAL_EXTI_RegisterCallback>

      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001146:	2018      	movs	r0, #24
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	4a0e      	ldr	r2, [pc, #56]	@ (8001184 <BSP_PB_Init+0x100>)
 800114c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001150:	2200      	movs	r2, #0
 8001152:	4619      	mov	r1, r3
 8001154:	f003 fe6d 	bl	8004e32 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001158:	2318      	movs	r3, #24
 800115a:	4618      	mov	r0, r3
 800115c:	f003 fe83 	bl	8004e66 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001162:	4618      	mov	r0, r3
 8001164:	3728      	adds	r7, #40	@ 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	46020c00 	.word	0x46020c00
 8001170:	20000008 	.word	0x20000008
 8001174:	10110000 	.word	0x10110000
 8001178:	200002ac 	.word	0x200002ac
 800117c:	08011928 	.word	0x08011928
 8001180:	2000000c 	.word	0x2000000c
 8001184:	20000010 	.word	0x20000010

08001188 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800118c:	2000      	movs	r0, #0
 800118e:	f00b fe1f 	bl	800cdd0 <BSP_PB_Callback>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <BSP_AUDIO_IN_IRQHandler>:
  * @param  Instance Audio in instance.
  * @param  Device Device of the audio in stream.
  * @retval None.
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t Device)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  if (Instance == 0U)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d109      	bne.n	80011bc <BSP_AUDIO_IN_IRQHandler+0x24>
  {
    if (Device == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d103      	bne.n	80011b6 <BSP_AUDIO_IN_IRQHandler+0x1e>
    {
      HAL_DMA_IRQHandler(&haudio_mdf[0]);
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 80011b0:	f003 ff4c 	bl	800504c <HAL_DMA_IRQHandler>
    else /* Device == AUDIO_IN_DEVICE_DIGITAL_MIC2 */
    {
      HAL_DMA_IRQHandler(&haudio_mdf[1]);
    }
  }
}
 80011b4:	e002      	b.n	80011bc <BSP_AUDIO_IN_IRQHandler+0x24>
      HAL_DMA_IRQHandler(&haudio_mdf[1]);
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <BSP_AUDIO_IN_IRQHandler+0x30>)
 80011b8:	f003 ff48 	bl	800504c <HAL_DMA_IRQHandler>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200002b8 	.word	0x200002b8
 80011c8:	20000330 	.word	0x20000330

080011cc <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C2 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 80011d6:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <BSP_I2C2_Init+0x64>)
 80011d8:	4a16      	ldr	r2, [pc, #88]	@ (8001234 <BSP_I2C2_Init+0x68>)
 80011da:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 80011dc:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <BSP_I2C2_Init+0x6c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d11f      	bne.n	8001224 <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 80011e4:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <BSP_I2C2_Init+0x6c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a13      	ldr	r2, [pc, #76]	@ (8001238 <BSP_I2C2_Init+0x6c>)
 80011ec:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 80011ee:	4810      	ldr	r0, [pc, #64]	@ (8001230 <BSP_I2C2_Init+0x64>)
 80011f0:	f004 fef6 	bl	8005fe0 <HAL_I2C_GetState>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d114      	bne.n	8001224 <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 80011fa:	480d      	ldr	r0, [pc, #52]	@ (8001230 <BSP_I2C2_Init+0x64>)
 80011fc:	f000 fb60 	bl	80018c0 <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8001200:	f006 fd32 	bl	8007c68 <HAL_RCC_GetPCLK1Freq>
 8001204:	4603      	mov	r3, r0
 8001206:	490d      	ldr	r1, [pc, #52]	@ (800123c <BSP_I2C2_Init+0x70>)
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f8e3 	bl	80013d4 <I2C_GetTiming>
 800120e:	4603      	mov	r3, r0
 8001210:	4619      	mov	r1, r3
 8001212:	4807      	ldr	r0, [pc, #28]	@ (8001230 <BSP_I2C2_Init+0x64>)
 8001214:	f000 f838 	bl	8001288 <MX_I2C2_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d002      	beq.n	8001224 <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800121e:	f06f 0307 	mvn.w	r3, #7
 8001222:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 8001224:	687b      	ldr	r3, [r7, #4]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000db0 	.word	0x20000db0
 8001234:	40005800 	.word	0x40005800
 8001238:	200003a8 	.word	0x200003a8
 800123c:	000186a0 	.word	0x000186a0

08001240 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 800124a:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <BSP_I2C2_DeInit+0x40>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	3b01      	subs	r3, #1
 8001250:	4a0b      	ldr	r2, [pc, #44]	@ (8001280 <BSP_I2C2_DeInit+0x40>)
 8001252:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <BSP_I2C2_DeInit+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10b      	bne.n	8001274 <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 800125c:	4809      	ldr	r0, [pc, #36]	@ (8001284 <BSP_I2C2_DeInit+0x44>)
 800125e:	f000 fb95 	bl	800198c <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 8001262:	4808      	ldr	r0, [pc, #32]	@ (8001284 <BSP_I2C2_DeInit+0x44>)
 8001264:	f004 fc4b 	bl	8005afe <HAL_I2C_DeInit>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800126e:	f06f 0307 	mvn.w	r3, #7
 8001272:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200003a8 	.word	0x200003a8
 8001284:	20000db0 	.word	0x20000db0

08001288 <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f004 fb8a 	bl	80059e0 <HAL_I2C_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	73fb      	strb	r3, [r7, #15]
 80012d6:	e014      	b.n	8001302 <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f005 f93e 	bl	8006560 <HAL_I2CEx_ConfigAnalogFilter>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e008      	b.n	8001302 <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80012f0:	2100      	movs	r1, #0
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f005 f97f 	bl	80065f6 <HAL_I2CEx_ConfigDigitalFilter>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af02      	add	r7, sp, #8
 8001312:	60ba      	str	r2, [r7, #8]
 8001314:	461a      	mov	r2, r3
 8001316:	4603      	mov	r3, r0
 8001318:	81fb      	strh	r3, [r7, #14]
 800131a:	460b      	mov	r3, r1
 800131c:	81bb      	strh	r3, [r7, #12]
 800131e:	4613      	mov	r3, r2
 8001320:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8001322:	89b9      	ldrh	r1, [r7, #12]
 8001324:	89f8      	ldrh	r0, [r7, #14]
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	2201      	movs	r2, #1
 800132e:	f000 fb4f 	bl	80019d0 <I2C2_WriteReg>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	e00c      	b.n	8001358 <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 800133e:	4809      	ldr	r0, [pc, #36]	@ (8001364 <BSP_I2C2_WriteReg+0x58>)
 8001340:	f004 fe5c 	bl	8005ffc <HAL_I2C_GetError>
 8001344:	4603      	mov	r3, r0
 8001346:	2b04      	cmp	r3, #4
 8001348:	d103      	bne.n	8001352 <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800134a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	e002      	b.n	8001358 <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001352:	f06f 0303 	mvn.w	r3, #3
 8001356:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8001358:	697b      	ldr	r3, [r7, #20]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000db0 	.word	0x20000db0

08001368 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af02      	add	r7, sp, #8
 800136e:	60ba      	str	r2, [r7, #8]
 8001370:	461a      	mov	r2, r3
 8001372:	4603      	mov	r3, r0
 8001374:	81fb      	strh	r3, [r7, #14]
 8001376:	460b      	mov	r3, r1
 8001378:	81bb      	strh	r3, [r7, #12]
 800137a:	4613      	mov	r3, r2
 800137c:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800137e:	89b9      	ldrh	r1, [r7, #12]
 8001380:	89f8      	ldrh	r0, [r7, #14]
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	2201      	movs	r2, #1
 800138a:	f000 fb47 	bl	8001a1c <I2C2_ReadReg>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	e00c      	b.n	80013b4 <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 800139a:	4809      	ldr	r0, [pc, #36]	@ (80013c0 <BSP_I2C2_ReadReg+0x58>)
 800139c:	f004 fe2e 	bl	8005ffc <HAL_I2C_GetError>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d103      	bne.n	80013ae <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80013a6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	e002      	b.n	80013b4 <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80013ae:	f06f 0303 	mvn.w	r3, #3
 80013b2:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 80013b4:	697b      	ldr	r3, [r7, #20]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000db0 	.word	0x20000db0

080013c4 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80013c8:	f003 fc28 	bl	8004c1c <HAL_GetTick>
 80013cc:	4603      	mov	r3, r0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d06b      	beq.n	80014c0 <I2C_GetTiming+0xec>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d068      	beq.n	80014c0 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	e060      	b.n	80014b6 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80013f4:	4a35      	ldr	r2, [pc, #212]	@ (80014cc <I2C_GetTiming+0xf8>)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	212c      	movs	r1, #44	@ 0x2c
 80013fa:	fb01 f303 	mul.w	r3, r1, r3
 80013fe:	4413      	add	r3, r2
 8001400:	3304      	adds	r3, #4
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d352      	bcc.n	80014b0 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800140a:	4a30      	ldr	r2, [pc, #192]	@ (80014cc <I2C_GetTiming+0xf8>)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	212c      	movs	r1, #44	@ 0x2c
 8001410:	fb01 f303 	mul.w	r3, r1, r3
 8001414:	4413      	add	r3, r2
 8001416:	3308      	adds	r3, #8
 8001418:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d847      	bhi.n	80014b0 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8001420:	6939      	ldr	r1, [r7, #16]
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f856 	bl	80014d4 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8001428:	6939      	ldr	r1, [r7, #16]
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f940 	bl	80016b0 <I2C_Compute_SCLL_SCLH>
 8001430:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b7f      	cmp	r3, #127	@ 0x7f
 8001436:	d842      	bhi.n	80014be <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8001438:	4925      	ldr	r1, [pc, #148]	@ (80014d0 <I2C_GetTiming+0xfc>)
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 800144a:	4821      	ldr	r0, [pc, #132]	@ (80014d0 <I2C_GetTiming+0xfc>)
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4403      	add	r3, r0
 8001458:	3304      	adds	r3, #4
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	051b      	lsls	r3, r3, #20
 800145e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8001462:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8001464:	481a      	ldr	r0, [pc, #104]	@ (80014d0 <I2C_GetTiming+0xfc>)
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4403      	add	r3, r0
 8001472:	3308      	adds	r3, #8
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	041b      	lsls	r3, r3, #16
 8001478:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 800147c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 800147e:	4814      	ldr	r0, [pc, #80]	@ (80014d0 <I2C_GetTiming+0xfc>)
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4403      	add	r3, r0
 800148c:	330c      	adds	r3, #12
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8001494:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8001496:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <I2C_GetTiming+0xfc>)
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4403      	add	r3, r0
 80014a4:	3310      	adds	r3, #16
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 80014aa:	430b      	orrs	r3, r1
 80014ac:	617b      	str	r3, [r7, #20]
        }
        break;
 80014ae:	e006      	b.n	80014be <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	3301      	adds	r3, #1
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d99b      	bls.n	80013f4 <I2C_GetTiming+0x20>
 80014bc:	e000      	b.n	80014c0 <I2C_GetTiming+0xec>
        break;
 80014be:	bf00      	nop
      }
    }
  }

  return ret;
 80014c0:	697b      	ldr	r3, [r7, #20]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	0801192c 	.word	0x0801192c
 80014d0:	200003ac 	.word	0x200003ac

080014d4 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b08f      	sub	sp, #60	@ 0x3c
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80014de:	2310      	movs	r3, #16
 80014e0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	085a      	lsrs	r2, r3, #1
 80014e6:	4b6e      	ldr	r3, [pc, #440]	@ (80016a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80014e8:	4413      	add	r3, r2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80014f0:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80014f2:	2332      	movs	r3, #50	@ 0x32
 80014f4:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80014f6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80014fa:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80014fc:	4a69      	ldr	r2, [pc, #420]	@ (80016a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	212c      	movs	r1, #44	@ 0x2c
 8001502:	fb01 f303 	mul.w	r3, r1, r3
 8001506:	4413      	add	r3, r2
 8001508:	3324      	adds	r3, #36	@ 0x24
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	4a65      	ldr	r2, [pc, #404]	@ (80016a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	212c      	movs	r1, #44	@ 0x2c
 8001514:	fb01 f303 	mul.w	r3, r1, r3
 8001518:	4413      	add	r3, r2
 800151a:	330c      	adds	r3, #12
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8001520:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001522:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8001524:	495f      	ldr	r1, [pc, #380]	@ (80016a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	202c      	movs	r0, #44	@ 0x2c
 800152a:	fb00 f303 	mul.w	r3, r0, r3
 800152e:	440b      	add	r3, r1
 8001530:	3328      	adds	r3, #40	@ 0x28
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	3303      	adds	r3, #3
 8001536:	69f9      	ldr	r1, [r7, #28]
 8001538:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001540:	4a58      	ldr	r2, [pc, #352]	@ (80016a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	212c      	movs	r1, #44	@ 0x2c
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	4413      	add	r3, r2
 800154c:	3310      	adds	r3, #16
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	4a54      	ldr	r2, [pc, #336]	@ (80016a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	212c      	movs	r1, #44	@ 0x2c
 8001558:	fb01 f303 	mul.w	r3, r1, r3
 800155c:	4413      	add	r3, r2
 800155e:	3320      	adds	r3, #32
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001564:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001566:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001568:	494e      	ldr	r1, [pc, #312]	@ (80016a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	202c      	movs	r0, #44	@ 0x2c
 800156e:	fb00 f303 	mul.w	r3, r0, r3
 8001572:	440b      	add	r3, r1
 8001574:	3328      	adds	r3, #40	@ 0x28
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3304      	adds	r3, #4
 800157a:	69f9      	ldr	r1, [r7, #28]
 800157c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8001584:	4a47      	ldr	r2, [pc, #284]	@ (80016a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	212c      	movs	r1, #44	@ 0x2c
 800158a:	fb01 f303 	mul.w	r3, r1, r3
 800158e:	4413      	add	r3, r2
 8001590:	3320      	adds	r3, #32
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	4a43      	ldr	r2, [pc, #268]	@ (80016a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	212c      	movs	r1, #44	@ 0x2c
 800159c:	fb01 f303 	mul.w	r3, r1, r3
 80015a0:	4413      	add	r3, r2
 80015a2:	3314      	adds	r3, #20
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4403      	add	r3, r0
 80015a8:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80015aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	dc01      	bgt.n	80015b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 80015b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	dc01      	bgt.n	80015be <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015c2:	e062      	b.n	800168a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80015c8:	e059      	b.n	800167e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	3301      	adds	r3, #1
 80015ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015d0:	3201      	adds	r2, #1
 80015d2:	fb03 f202 	mul.w	r2, r3, r2
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d348      	bcc.n	8001678 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
 80015ea:	e042      	b.n	8001672 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80015ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ee:	3301      	adds	r3, #1
 80015f0:	6a3a      	ldr	r2, [r7, #32]
 80015f2:	fb03 f202 	mul.w	r2, r3, r2
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80015fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	429a      	cmp	r2, r3
 8001604:	d332      	bcc.n	800166c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8001606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	429a      	cmp	r2, r3
 800160c:	d82e      	bhi.n	800166c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 800160e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001612:	429a      	cmp	r2, r3
 8001614:	d02a      	beq.n	800166c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8001616:	4b24      	ldr	r3, [pc, #144]	@ (80016a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4924      	ldr	r1, [pc, #144]	@ (80016ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001628:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800162a:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	491f      	ldr	r1, [pc, #124]	@ (80016ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	3304      	adds	r3, #4
 800163c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800163e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4919      	ldr	r1, [pc, #100]	@ (80016ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	3308      	adds	r3, #8
 8001652:	6a3a      	ldr	r2, [r7, #32]
 8001654:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8001656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001658:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 800165a:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	4a11      	ldr	r2, [pc, #68]	@ (80016a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001662:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8001664:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b7f      	cmp	r3, #127	@ 0x7f
 800166a:	d812      	bhi.n	8001692 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	3301      	adds	r3, #1
 8001670:	623b      	str	r3, [r7, #32]
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	2b0f      	cmp	r3, #15
 8001676:	d9b9      	bls.n	80015ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167a:	3301      	adds	r3, #1
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d9a2      	bls.n	80015ca <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8001684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001686:	3301      	adds	r3, #1
 8001688:	62bb      	str	r3, [r7, #40]	@ 0x28
 800168a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d999      	bls.n	80015c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8001690:	e000      	b.n	8001694 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8001692:	bf00      	nop
          }
        }
      }
    }
  }
}
 8001694:	373c      	adds	r7, #60	@ 0x3c
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	3b9aca00 	.word	0x3b9aca00
 80016a4:	0801192c 	.word	0x0801192c
 80016a8:	20000dac 	.word	0x20000dac
 80016ac:	200003ac 	.word	0x200003ac

080016b0 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b093      	sub	sp, #76	@ 0x4c
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	085a      	lsrs	r2, r3, #1
 80016c4:	4b7a      	ldr	r3, [pc, #488]	@ (80018b0 <I2C_Compute_SCLL_SCLH+0x200>)
 80016c6:	4413      	add	r3, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80016ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 80016d0:	4a78      	ldr	r2, [pc, #480]	@ (80018b4 <I2C_Compute_SCLL_SCLH+0x204>)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	212c      	movs	r1, #44	@ 0x2c
 80016d6:	fb01 f303 	mul.w	r3, r1, r3
 80016da:	4413      	add	r3, r2
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	085a      	lsrs	r2, r3, #1
 80016e0:	4b73      	ldr	r3, [pc, #460]	@ (80018b0 <I2C_Compute_SCLL_SCLH+0x200>)
 80016e2:	4413      	add	r3, r2
 80016e4:	4973      	ldr	r1, [pc, #460]	@ (80018b4 <I2C_Compute_SCLL_SCLH+0x204>)
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	202c      	movs	r0, #44	@ 0x2c
 80016ea:	fb00 f202 	mul.w	r2, r0, r2
 80016ee:	440a      	add	r2, r1
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80016f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80016f8:	2332      	movs	r3, #50	@ 0x32
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80016fc:	4a6d      	ldr	r2, [pc, #436]	@ (80018b4 <I2C_Compute_SCLL_SCLH+0x204>)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	212c      	movs	r1, #44	@ 0x2c
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4413      	add	r3, r2
 8001708:	3328      	adds	r3, #40	@ 0x28
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8001714:	4a67      	ldr	r2, [pc, #412]	@ (80018b4 <I2C_Compute_SCLL_SCLH+0x204>)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	212c      	movs	r1, #44	@ 0x2c
 800171a:	fb01 f303 	mul.w	r3, r1, r3
 800171e:	4413      	add	r3, r2
 8001720:	3304      	adds	r3, #4
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a62      	ldr	r2, [pc, #392]	@ (80018b0 <I2C_Compute_SCLL_SCLH+0x200>)
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800172c:	4a61      	ldr	r2, [pc, #388]	@ (80018b4 <I2C_Compute_SCLL_SCLH+0x204>)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	212c      	movs	r1, #44	@ 0x2c
 8001732:	fb01 f303 	mul.w	r3, r1, r3
 8001736:	4413      	add	r3, r2
 8001738:	3308      	adds	r3, #8
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a5c      	ldr	r2, [pc, #368]	@ (80018b0 <I2C_Compute_SCLL_SCLH+0x200>)
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8001744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001746:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001748:	2300      	movs	r3, #0
 800174a:	637b      	str	r3, [r7, #52]	@ 0x34
 800174c:	e0a3      	b.n	8001896 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800174e:	495a      	ldr	r1, [pc, #360]	@ (80018b8 <I2C_Compute_SCLL_SCLH+0x208>)
 8001750:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001768:	2300      	movs	r3, #0
 800176a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800176c:	e08c      	b.n	8001888 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800176e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	441a      	add	r2, r3
 8001774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001776:	3301      	adds	r3, #1
 8001778:	6979      	ldr	r1, [r7, #20]
 800177a:	fb03 f101 	mul.w	r1, r3, r1
 800177e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	440b      	add	r3, r1
 8001784:	4413      	add	r3, r2
 8001786:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8001788:	4a4a      	ldr	r2, [pc, #296]	@ (80018b4 <I2C_Compute_SCLL_SCLH+0x204>)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	212c      	movs	r1, #44	@ 0x2c
 800178e:	fb01 f303 	mul.w	r3, r1, r3
 8001792:	4413      	add	r3, r2
 8001794:	3318      	adds	r3, #24
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	429a      	cmp	r2, r3
 800179c:	d971      	bls.n	8001882 <I2C_Compute_SCLL_SCLH+0x1d2>
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	1ad2      	subs	r2, r2, r3
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d268      	bcs.n	8001882 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017b4:	e062      	b.n	800187c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80017b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	441a      	add	r2, r3
 80017bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017be:	3301      	adds	r3, #1
 80017c0:	6979      	ldr	r1, [r7, #20]
 80017c2:	fb03 f101 	mul.w	r1, r3, r1
 80017c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	440b      	add	r3, r1
 80017cc:	4413      	add	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	441a      	add	r2, r3
 80017d6:	4937      	ldr	r1, [pc, #220]	@ (80018b4 <I2C_Compute_SCLL_SCLH+0x204>)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	202c      	movs	r0, #44	@ 0x2c
 80017dc:	fb00 f303 	mul.w	r3, r0, r3
 80017e0:	440b      	add	r3, r1
 80017e2:	3320      	adds	r3, #32
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	441a      	add	r2, r3
 80017e8:	4932      	ldr	r1, [pc, #200]	@ (80018b4 <I2C_Compute_SCLL_SCLH+0x204>)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	202c      	movs	r0, #44	@ 0x2c
 80017ee:	fb00 f303 	mul.w	r3, r0, r3
 80017f2:	440b      	add	r3, r1
 80017f4:	3324      	adds	r3, #36	@ 0x24
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4413      	add	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min)
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	429a      	cmp	r2, r3
 8001802:	d338      	bcc.n	8001876 <I2C_Compute_SCLL_SCLH+0x1c6>
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	429a      	cmp	r2, r3
 800180a:	d834      	bhi.n	8001876 <I2C_Compute_SCLL_SCLH+0x1c6>
 800180c:	4a29      	ldr	r2, [pc, #164]	@ (80018b4 <I2C_Compute_SCLL_SCLH+0x204>)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	212c      	movs	r1, #44	@ 0x2c
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	4413      	add	r3, r2
 8001818:	331c      	adds	r3, #28
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	429a      	cmp	r2, r3
 8001820:	d329      	bcc.n	8001876 <I2C_Compute_SCLL_SCLH+0x1c6>
              && (ti2cclk < tscl_h))
 8001822:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	429a      	cmp	r2, r3
 8001828:	d225      	bcs.n	8001876 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 8001832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001834:	2b00      	cmp	r3, #0
 8001836:	da02      	bge.n	800183e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8001838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800183a:	425b      	negs	r3, r3
 800183c:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800183e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001840:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001842:	429a      	cmp	r2, r3
 8001844:	d917      	bls.n	8001876 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8001846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001848:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 800184a:	491b      	ldr	r1, [pc, #108]	@ (80018b8 <I2C_Compute_SCLL_SCLH+0x208>)
 800184c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	3310      	adds	r3, #16
 800185a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800185c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800185e:	4916      	ldr	r1, [pc, #88]	@ (80018b8 <I2C_Compute_SCLL_SCLH+0x208>)
 8001860:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	330c      	adds	r3, #12
 800186e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001870:	601a      	str	r2, [r3, #0]
              ret = count;
 8001872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001874:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001878:	3301      	adds	r3, #1
 800187a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800187c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800187e:	2bff      	cmp	r3, #255	@ 0xff
 8001880:	d999      	bls.n	80017b6 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001884:	3301      	adds	r3, #1
 8001886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800188a:	2bff      	cmp	r3, #255	@ 0xff
 800188c:	f67f af6f 	bls.w	800176e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001892:	3301      	adds	r3, #1
 8001894:	637b      	str	r3, [r7, #52]	@ 0x34
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <I2C_Compute_SCLL_SCLH+0x20c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800189c:	429a      	cmp	r2, r3
 800189e:	f4ff af56 	bcc.w	800174e <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80018a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	374c      	adds	r7, #76	@ 0x4c
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	3b9aca00 	.word	0x3b9aca00
 80018b4:	0801192c 	.word	0x0801192c
 80018b8:	200003ac 	.word	0x200003ac
 80018bc:	20000dac 	.word	0x20000dac

080018c0 <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hI2c)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 80018c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001984 <I2C2_MspInit+0xc4>)
 80018ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001984 <I2C2_MspInit+0xc4>)
 80018d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001984 <I2C2_MspInit+0xc4>)
 80018da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 80018e6:	4b27      	ldr	r3, [pc, #156]	@ (8001984 <I2C2_MspInit+0xc4>)
 80018e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ec:	4a25      	ldr	r2, [pc, #148]	@ (8001984 <I2C2_MspInit+0xc4>)
 80018ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018f6:	4b23      	ldr	r3, [pc, #140]	@ (8001984 <I2C2_MspInit+0xc4>)
 80018f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 8001904:	2310      	movs	r3, #16
 8001906:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8001908:	2312      	movs	r3, #18
 800190a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 800190c:	2301      	movs	r3, #1
 800190e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8001910:	2302      	movs	r3, #2
 8001912:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SCL_AF;
 8001914:	2304      	movs	r3, #4
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	481a      	ldr	r0, [pc, #104]	@ (8001988 <I2C2_MspInit+0xc8>)
 8001920:	f003 fd90 	bl	8005444 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 8001924:	2320      	movs	r3, #32
 8001926:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8001928:	2312      	movs	r3, #18
 800192a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 800192c:	2301      	movs	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8001930:	2302      	movs	r3, #2
 8001932:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SDA_AF;
 8001934:	2304      	movs	r3, #4
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	4812      	ldr	r0, [pc, #72]	@ (8001988 <I2C2_MspInit+0xc8>)
 8001940:	f003 fd80 	bl	8005444 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 8001944:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <I2C2_MspInit+0xc4>)
 8001946:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800194a:	4a0e      	ldr	r2, [pc, #56]	@ (8001984 <I2C2_MspInit+0xc4>)
 800194c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001950:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <I2C2_MspInit+0xc4>)
 8001956:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800195a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 8001962:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <I2C2_MspInit+0xc4>)
 8001964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001966:	4a07      	ldr	r2, [pc, #28]	@ (8001984 <I2C2_MspInit+0xc4>)
 8001968:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800196c:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 800196e:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <I2C2_MspInit+0xc4>)
 8001970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001972:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <I2C2_MspInit+0xc4>)
 8001974:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001978:	6753      	str	r3, [r2, #116]	@ 0x74
}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	@ 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	46020c00 	.word	0x46020c00
 8001988:	42021c00 	.word	0x42021c00

0800198c <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 8001994:	2310      	movs	r3, #16
 8001996:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4619      	mov	r1, r3
 800199c:	480a      	ldr	r0, [pc, #40]	@ (80019c8 <I2C2_MspDeInit+0x3c>)
 800199e:	f003 ff29 	bl	80057f4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 80019a2:	2320      	movs	r3, #32
 80019a4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4619      	mov	r1, r3
 80019aa:	4807      	ldr	r0, [pc, #28]	@ (80019c8 <I2C2_MspDeInit+0x3c>)
 80019ac:	f003 ff22 	bl	80057f4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <I2C2_MspDeInit+0x40>)
 80019b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019b6:	4a05      	ldr	r2, [pc, #20]	@ (80019cc <I2C2_MspDeInit+0x40>)
 80019b8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80019bc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 80019c0:	bf00      	nop
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	42021c00 	.word	0x42021c00
 80019cc:	46020c00 	.word	0x46020c00

080019d0 <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af04      	add	r7, sp, #16
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	4603      	mov	r3, r0
 80019da:	81fb      	strh	r3, [r7, #14]
 80019dc:	460b      	mov	r3, r1
 80019de:	81bb      	strh	r3, [r7, #12]
 80019e0:	4613      	mov	r3, r2
 80019e2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80019e4:	8978      	ldrh	r0, [r7, #10]
 80019e6:	89ba      	ldrh	r2, [r7, #12]
 80019e8:	89f9      	ldrh	r1, [r7, #14]
 80019ea:	f242 7310 	movw	r3, #10000	@ 0x2710
 80019ee:	9302      	str	r3, [sp, #8]
 80019f0:	8b3b      	ldrh	r3, [r7, #24]
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	4603      	mov	r3, r0
 80019fa:	4807      	ldr	r0, [pc, #28]	@ (8001a18 <I2C2_WriteReg+0x48>)
 80019fc:	f004 f8c2 	bl	8005b84 <HAL_I2C_Mem_Write>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e001      	b.n	8001a0e <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8001a0a:	f06f 0307 	mvn.w	r3, #7
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000db0 	.word	0x20000db0

08001a1c <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af04      	add	r7, sp, #16
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	4603      	mov	r3, r0
 8001a26:	81fb      	strh	r3, [r7, #14]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	81bb      	strh	r3, [r7, #12]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8001a30:	8978      	ldrh	r0, [r7, #10]
 8001a32:	89ba      	ldrh	r2, [r7, #12]
 8001a34:	89f9      	ldrh	r1, [r7, #14]
 8001a36:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	8b3b      	ldrh	r3, [r7, #24]
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	4603      	mov	r3, r0
 8001a46:	4807      	ldr	r0, [pc, #28]	@ (8001a64 <I2C2_ReadReg+0x48>)
 8001a48:	f004 f9b0 	bl	8005dac <HAL_I2C_Mem_Read>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e001      	b.n	8001a5a <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8001a56:	f06f 0307 	mvn.w	r3, #7
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000db0 	.word	0x20000db0

08001a68 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <BSP_CAMERA_FrameEventCallback>:
  * @brief  Frame Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_FrameEventCallback(uint32_t Instance)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff ffd1 	bl	8001a68 <BSP_CAMERA_LineEventCallback>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff ffd0 	bl	8001a7c <BSP_CAMERA_FrameEventCallback>
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff ffcf 	bl	8001a90 <BSP_CAMERA_VsyncEventCallback>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 8001b02:	2000      	movs	r0, #0
 8001b04:	f7ff ffce 	bl	8001aa4 <BSP_CAMERA_ErrorCallback>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d903      	bls.n	8001b2c <BSP_MOTION_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001b24:	f06f 0301 	mvn.w	r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	e03a      	b.n	8001ba2 <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 0U) && ((Functions & MOTION_MAGNETO) != 0U))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d108      	bne.n	8001b44 <BSP_MOTION_SENSOR_Init+0x34>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <BSP_MOTION_SENSOR_Init+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001b3c:	f06f 030a 	mvn.w	r3, #10
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e02e      	b.n	8001ba2 <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 1U) && ((Functions & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d108      	bne.n	8001b5c <BSP_MOTION_SENSOR_Init+0x4c>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <BSP_MOTION_SENSOR_Init+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001b54:	f06f 030a 	mvn.w	r3, #10
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e022      	b.n	8001ba2 <BSP_MOTION_SENSOR_Init+0x92>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <BSP_MOTION_SENSOR_Init+0x66>
    {
      /* Probe the ISM330DHCX sensor */
      if (ISM330DHCX_Probe(Functions) != BSP_ERROR_NONE)
 8001b62:	6838      	ldr	r0, [r7, #0]
 8001b64:	f000 fb50 	bl	8002208 <ISM330DHCX_Probe>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00c      	beq.n	8001b88 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8001b6e:	f06f 0304 	mvn.w	r3, #4
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	e008      	b.n	8001b88 <BSP_MOTION_SENSOR_Init+0x78>
      }
    }
    else /* Instance = 1 */
    {
      /* Probe the IIS2MDC sensor */
      if (IIS2MDC_Probe(Functions) != BSP_ERROR_NONE)
 8001b76:	6838      	ldr	r0, [r7, #0]
 8001b78:	f000 fbbc 	bl	80022f4 <IIS2MDC_Probe>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8001b82:	f06f 0304 	mvn.w	r3, #4
 8001b86:	60fb      	str	r3, [r7, #12]
      }
    }

    if (status == BSP_ERROR_NONE)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <BSP_MOTION_SENSOR_Init+0x92>
    {
      /* Store current initialized functions */
      Motion_Sensor_Ctx[Instance].Functions |= Functions;
 8001b8e:	4a07      	ldr	r2, [pc, #28]	@ (8001bac <BSP_MOTION_SENSOR_Init+0x9c>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	4904      	ldr	r1, [pc, #16]	@ (8001bac <BSP_MOTION_SENSOR_Init+0x9c>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000e4c 	.word	0x20000e4c

08001bb0 <BSP_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance.
  * @param  Capabilities Pointer to motion sensor capabilities.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetCapabilities(uint32_t Instance, MOTION_SENSOR_Capabilities_t *Capabilities)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Capabilities == NULL))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d802      	bhi.n	8001bca <BSP_MOTION_SENSOR_GetCapabilities+0x1a>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d103      	bne.n	8001bd2 <BSP_MOTION_SENSOR_GetCapabilities+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001bca:	f06f 0301 	mvn.w	r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e01b      	b.n	8001c0a <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 8001bd2:	4a10      	ldr	r2, [pc, #64]	@ (8001c14 <BSP_MOTION_SENSOR_GetCapabilities+0x64>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d103      	bne.n	8001be6 <BSP_MOTION_SENSOR_GetCapabilities+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	e011      	b.n	8001c0a <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else
  {
    /* Get the capabilities of the motion sensor */
    if (Motion_Sensor_Drv[Instance]->GetCapabilities(Motion_Sensor_CompObj[Instance], Capabilities) < 0)
 8001be6:	4a0c      	ldr	r2, [pc, #48]	@ (8001c18 <BSP_MOTION_SENSOR_GetCapabilities+0x68>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	490a      	ldr	r1, [pc, #40]	@ (8001c1c <BSP_MOTION_SENSOR_GetCapabilities+0x6c>)
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001bf8:	6839      	ldr	r1, [r7, #0]
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4798      	blx	r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da02      	bge.n	8001c0a <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001c04:	f06f 0304 	mvn.w	r3, #4
 8001c08:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000e4c 	.word	0x20000e4c
 8001c18:	20000e5c 	.word	0x20000e5c
 8001c1c:	20000e54 	.word	0x20000e54

08001c20 <BSP_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance.
  * @param  Id Pointer to motion sensor ID.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Id == NULL))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d802      	bhi.n	8001c3a <BSP_MOTION_SENSOR_ReadID+0x1a>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d103      	bne.n	8001c42 <BSP_MOTION_SENSOR_ReadID+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001c3a:	f06f 0301 	mvn.w	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	e01b      	b.n	8001c7a <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 8001c42:	4a10      	ldr	r2, [pc, #64]	@ (8001c84 <BSP_MOTION_SENSOR_ReadID+0x64>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d103      	bne.n	8001c56 <BSP_MOTION_SENSOR_ReadID+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	e011      	b.n	8001c7a <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else
  {
    /* Read the motion sensor ID */
    if (Motion_Sensor_Drv[Instance]->ReadID(Motion_Sensor_CompObj[Instance], Id) < 0)
 8001c56:	4a0c      	ldr	r2, [pc, #48]	@ (8001c88 <BSP_MOTION_SENSOR_ReadID+0x68>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	490a      	ldr	r1, [pc, #40]	@ (8001c8c <BSP_MOTION_SENSOR_ReadID+0x6c>)
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c68:	6839      	ldr	r1, [r7, #0]
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4798      	blx	r3
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	da02      	bge.n	8001c7a <BSP_MOTION_SENSOR_ReadID+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001c74:	f06f 0304 	mvn.w	r3, #4
 8001c78:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000e4c 	.word	0x20000e4c
 8001c88:	20000e5c 	.word	0x20000e5c
 8001c8c:	20000e54 	.word	0x20000e54

08001c90 <BSP_MOTION_SENSOR_Enable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d903      	bls.n	8001cac <BSP_MOTION_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001ca4:	f06f 0301 	mvn.w	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	e045      	b.n	8001d38 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d108      	bne.n	8001cc4 <BSP_MOTION_SENSOR_Enable+0x34>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <BSP_MOTION_SENSOR_Enable+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001cbc:	f06f 030a 	mvn.w	r3, #10
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	e039      	b.n	8001d38 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d108      	bne.n	8001cdc <BSP_MOTION_SENSOR_Enable+0x4c>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <BSP_MOTION_SENSOR_Enable+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001cd4:	f06f 030a 	mvn.w	r3, #10
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	e02d      	b.n	8001d38 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001cdc:	4a19      	ldr	r2, [pc, #100]	@ (8001d44 <BSP_MOTION_SENSOR_Enable+0xb4>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d103      	bne.n	8001cf4 <BSP_MOTION_SENSOR_Enable+0x64>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	e021      	b.n	8001d38 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else
  {
    /* Enable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d006      	beq.n	8001d08 <BSP_MOTION_SENSOR_Enable+0x78>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d101      	bne.n	8001d04 <BSP_MOTION_SENSOR_Enable+0x74>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e002      	b.n	8001d0a <BSP_MOTION_SENSOR_Enable+0x7a>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e000      	b.n	8001d0a <BSP_MOTION_SENSOR_Enable+0x7a>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	72fb      	strb	r3, [r7, #11]
    if (Motion_Sensor_FuncDrv[Instance][index]->Enable(Motion_Sensor_CompObj[Instance]) < 0)
 8001d0c:	7af9      	ldrb	r1, [r7, #11]
 8001d0e:	480e      	ldr	r0, [pc, #56]	@ (8001d48 <BSP_MOTION_SENSOR_Enable+0xb8>)
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	490a      	ldr	r1, [pc, #40]	@ (8001d4c <BSP_MOTION_SENSOR_Enable+0xbc>)
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4798      	blx	r3
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	da02      	bge.n	8001d38 <BSP_MOTION_SENSOR_Enable+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001d32:	f06f 0304 	mvn.w	r3, #4
 8001d36:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8001d38:	68fb      	ldr	r3, [r7, #12]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000e4c 	.word	0x20000e4c
 8001d48:	20000e64 	.word	0x20000e64
 8001d4c:	20000e54 	.word	0x20000e54

08001d50 <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Axes Pointer to motion sensor axes.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Axes == NULL))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d802      	bhi.n	8001d6c <BSP_MOTION_SENSOR_GetAxes+0x1c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d103      	bne.n	8001d74 <BSP_MOTION_SENSOR_GetAxes+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001d6c:	f06f 0301 	mvn.w	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e046      	b.n	8001e02 <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d108      	bne.n	8001d8c <BSP_MOTION_SENSOR_GetAxes+0x3c>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <BSP_MOTION_SENSOR_GetAxes+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001d84:	f06f 030a 	mvn.w	r3, #10
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e03a      	b.n	8001e02 <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d108      	bne.n	8001da4 <BSP_MOTION_SENSOR_GetAxes+0x54>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <BSP_MOTION_SENSOR_GetAxes+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001d9c:	f06f 030a 	mvn.w	r3, #10
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	e02e      	b.n	8001e02 <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001da4:	4a19      	ldr	r2, [pc, #100]	@ (8001e0c <BSP_MOTION_SENSOR_GetAxes+0xbc>)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d103      	bne.n	8001dbc <BSP_MOTION_SENSOR_GetAxes+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	e022      	b.n	8001e02 <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else
  {
    /* Get the motion sensor axes */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d006      	beq.n	8001dd0 <BSP_MOTION_SENSOR_GetAxes+0x80>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d101      	bne.n	8001dcc <BSP_MOTION_SENSOR_GetAxes+0x7c>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e002      	b.n	8001dd2 <BSP_MOTION_SENSOR_GetAxes+0x82>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e000      	b.n	8001dd2 <BSP_MOTION_SENSOR_GetAxes+0x82>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetAxes(Motion_Sensor_CompObj[Instance], Axes) < 0)
 8001dd4:	7cf9      	ldrb	r1, [r7, #19]
 8001dd6:	480e      	ldr	r0, [pc, #56]	@ (8001e10 <BSP_MOTION_SENSOR_GetAxes+0xc0>)
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	490a      	ldr	r1, [pc, #40]	@ (8001e14 <BSP_MOTION_SENSOR_GetAxes+0xc4>)
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4610      	mov	r0, r2
 8001df4:	4798      	blx	r3
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	da02      	bge.n	8001e02 <BSP_MOTION_SENSOR_GetAxes+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001dfc:	f06f 0304 	mvn.w	r3, #4
 8001e00:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001e02:	697b      	ldr	r3, [r7, #20]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000e4c 	.word	0x20000e4c
 8001e10:	20000e64 	.word	0x20000e64
 8001e14:	20000e54 	.word	0x20000e54

08001e18 <BSP_MOTION_SENSOR_GetSensitivity>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Sensitivity Pointer to sensitivity.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetSensitivity(uint32_t Instance, uint32_t Function, float_t *Sensitivity)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Sensitivity == NULL))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d802      	bhi.n	8001e34 <BSP_MOTION_SENSOR_GetSensitivity+0x1c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d103      	bne.n	8001e3c <BSP_MOTION_SENSOR_GetSensitivity+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001e34:	f06f 0301 	mvn.w	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	e046      	b.n	8001eca <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d108      	bne.n	8001e54 <BSP_MOTION_SENSOR_GetSensitivity+0x3c>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <BSP_MOTION_SENSOR_GetSensitivity+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001e4c:	f06f 030a 	mvn.w	r3, #10
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	e03a      	b.n	8001eca <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d108      	bne.n	8001e6c <BSP_MOTION_SENSOR_GetSensitivity+0x54>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <BSP_MOTION_SENSOR_GetSensitivity+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001e64:	f06f 030a 	mvn.w	r3, #10
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e02e      	b.n	8001eca <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001e6c:	4a19      	ldr	r2, [pc, #100]	@ (8001ed4 <BSP_MOTION_SENSOR_GetSensitivity+0xbc>)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d103      	bne.n	8001e84 <BSP_MOTION_SENSOR_GetSensitivity+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	e022      	b.n	8001eca <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else
  {
    /* Get the motion sensor sensitivity */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d006      	beq.n	8001e98 <BSP_MOTION_SENSOR_GetSensitivity+0x80>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d101      	bne.n	8001e94 <BSP_MOTION_SENSOR_GetSensitivity+0x7c>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e002      	b.n	8001e9a <BSP_MOTION_SENSOR_GetSensitivity+0x82>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e000      	b.n	8001e9a <BSP_MOTION_SENSOR_GetSensitivity+0x82>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetSensitivity(Motion_Sensor_CompObj[Instance], Sensitivity) < 0)
 8001e9c:	7cf9      	ldrb	r1, [r7, #19]
 8001e9e:	480e      	ldr	r0, [pc, #56]	@ (8001ed8 <BSP_MOTION_SENSOR_GetSensitivity+0xc0>)
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	490a      	ldr	r1, [pc, #40]	@ (8001edc <BSP_MOTION_SENSOR_GetSensitivity+0xc4>)
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4798      	blx	r3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	da02      	bge.n	8001eca <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001ec4:	f06f 0304 	mvn.w	r3, #4
 8001ec8:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001eca:	697b      	ldr	r3, [r7, #20]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000e4c 	.word	0x20000e4c
 8001ed8:	20000e64 	.word	0x20000e64
 8001edc:	20000e54 	.word	0x20000e54

08001ee0 <BSP_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Pointer to output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Odr == NULL))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d802      	bhi.n	8001efc <BSP_MOTION_SENSOR_GetOutputDataRate+0x1c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d103      	bne.n	8001f04 <BSP_MOTION_SENSOR_GetOutputDataRate+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001efc:	f06f 0301 	mvn.w	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	e046      	b.n	8001f92 <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d108      	bne.n	8001f1c <BSP_MOTION_SENSOR_GetOutputDataRate+0x3c>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <BSP_MOTION_SENSOR_GetOutputDataRate+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001f14:	f06f 030a 	mvn.w	r3, #10
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e03a      	b.n	8001f92 <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d108      	bne.n	8001f34 <BSP_MOTION_SENSOR_GetOutputDataRate+0x54>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <BSP_MOTION_SENSOR_GetOutputDataRate+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001f2c:	f06f 030a 	mvn.w	r3, #10
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	e02e      	b.n	8001f92 <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001f34:	4a19      	ldr	r2, [pc, #100]	@ (8001f9c <BSP_MOTION_SENSOR_GetOutputDataRate+0xbc>)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d103      	bne.n	8001f4c <BSP_MOTION_SENSOR_GetOutputDataRate+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	e022      	b.n	8001f92 <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else
  {
    /* Get the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d006      	beq.n	8001f60 <BSP_MOTION_SENSOR_GetOutputDataRate+0x80>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d101      	bne.n	8001f5c <BSP_MOTION_SENSOR_GetOutputDataRate+0x7c>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e002      	b.n	8001f62 <BSP_MOTION_SENSOR_GetOutputDataRate+0x82>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e000      	b.n	8001f62 <BSP_MOTION_SENSOR_GetOutputDataRate+0x82>
 8001f60:	2300      	movs	r3, #0
 8001f62:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 8001f64:	7cf9      	ldrb	r1, [r7, #19]
 8001f66:	480e      	ldr	r0, [pc, #56]	@ (8001fa0 <BSP_MOTION_SENSOR_GetOutputDataRate+0xc0>)
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	490a      	ldr	r1, [pc, #40]	@ (8001fa4 <BSP_MOTION_SENSOR_GetOutputDataRate+0xc4>)
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4610      	mov	r0, r2
 8001f84:	4798      	blx	r3
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	da02      	bge.n	8001f92 <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001f8c:	f06f 0304 	mvn.w	r3, #4
 8001f90:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001f92:	697b      	ldr	r3, [r7, #20]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000e4c 	.word	0x20000e4c
 8001fa0:	20000e64 	.word	0x20000e64
 8001fa4:	20000e54 	.word	0x20000e54

08001fa8 <BSP_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d903      	bls.n	8001fc8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001fc0:	f06f 0301 	mvn.w	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	e047      	b.n	8002058 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d108      	bne.n	8001fe0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001fd8:	f06f 030a 	mvn.w	r3, #10
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e03b      	b.n	8002058 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d108      	bne.n	8001ff8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001ff0:	f06f 030a 	mvn.w	r3, #10
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e02f      	b.n	8002058 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8002064 <BSP_MOTION_SENSOR_SetOutputDataRate+0xbc>)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d103      	bne.n	8002010 <BSP_MOTION_SENSOR_SetOutputDataRate+0x68>
  {
    status = BSP_ERROR_NO_INIT;
 8002008:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e023      	b.n	8002058 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else
  {
    /* Set the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d006      	beq.n	8002024 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7c>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d101      	bne.n	8002020 <BSP_MOTION_SENSOR_SetOutputDataRate+0x78>
 800201c:	2301      	movs	r3, #1
 800201e:	e002      	b.n	8002026 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7e>
 8002020:	2302      	movs	r3, #2
 8002022:	e000      	b.n	8002026 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7e>
 8002024:	2300      	movs	r3, #0
 8002026:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->SetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 8002028:	7cf9      	ldrb	r1, [r7, #19]
 800202a:	480f      	ldr	r0, [pc, #60]	@ (8002068 <BSP_MOTION_SENSOR_SetOutputDataRate+0xc0>)
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	440b      	add	r3, r1
 8002036:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	490b      	ldr	r1, [pc, #44]	@ (800206c <BSP_MOTION_SENSOR_SetOutputDataRate+0xc4>)
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002044:	ed97 0a01 	vldr	s0, [r7, #4]
 8002048:	4610      	mov	r0, r2
 800204a:	4798      	blx	r3
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	da02      	bge.n	8002058 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8002052:	f06f 0304 	mvn.w	r3, #4
 8002056:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8002058:	697b      	ldr	r3, [r7, #20]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000e4c 	.word	0x20000e4c
 8002068:	20000e64 	.word	0x20000e64
 800206c:	20000e54 	.word	0x20000e54

08002070 <BSP_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Pointer to full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Fullscale == NULL))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d802      	bhi.n	800208c <BSP_MOTION_SENSOR_GetFullScale+0x1c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d103      	bne.n	8002094 <BSP_MOTION_SENSOR_GetFullScale+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800208c:	f06f 0301 	mvn.w	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	e046      	b.n	8002122 <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d108      	bne.n	80020ac <BSP_MOTION_SENSOR_GetFullScale+0x3c>
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <BSP_MOTION_SENSOR_GetFullScale+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80020a4:	f06f 030a 	mvn.w	r3, #10
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	e03a      	b.n	8002122 <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d108      	bne.n	80020c4 <BSP_MOTION_SENSOR_GetFullScale+0x54>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <BSP_MOTION_SENSOR_GetFullScale+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80020bc:	f06f 030a 	mvn.w	r3, #10
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	e02e      	b.n	8002122 <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 80020c4:	4a19      	ldr	r2, [pc, #100]	@ (800212c <BSP_MOTION_SENSOR_GetFullScale+0xbc>)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d103      	bne.n	80020dc <BSP_MOTION_SENSOR_GetFullScale+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	e022      	b.n	8002122 <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else
  {
    /* Get the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d006      	beq.n	80020f0 <BSP_MOTION_SENSOR_GetFullScale+0x80>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d101      	bne.n	80020ec <BSP_MOTION_SENSOR_GetFullScale+0x7c>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e002      	b.n	80020f2 <BSP_MOTION_SENSOR_GetFullScale+0x82>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e000      	b.n	80020f2 <BSP_MOTION_SENSOR_GetFullScale+0x82>
 80020f0:	2300      	movs	r3, #0
 80020f2:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 80020f4:	7cf9      	ldrb	r1, [r7, #19]
 80020f6:	480e      	ldr	r0, [pc, #56]	@ (8002130 <BSP_MOTION_SENSOR_GetFullScale+0xc0>)
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	440b      	add	r3, r1
 8002102:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	490a      	ldr	r1, [pc, #40]	@ (8002134 <BSP_MOTION_SENSOR_GetFullScale+0xc4>)
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4610      	mov	r0, r2
 8002114:	4798      	blx	r3
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	da02      	bge.n	8002122 <BSP_MOTION_SENSOR_GetFullScale+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800211c:	f06f 0304 	mvn.w	r3, #4
 8002120:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8002122:	697b      	ldr	r3, [r7, #20]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000e4c 	.word	0x20000e4c
 8002130:	20000e64 	.word	0x20000e64
 8002134:	20000e54 	.word	0x20000e54

08002138 <BSP_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d903      	bls.n	8002156 <BSP_MOTION_SENSOR_SetFullScale+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800214e:	f06f 0301 	mvn.w	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	e04d      	b.n	80021f2 <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d108      	bne.n	800216e <BSP_MOTION_SENSOR_SetFullScale+0x36>
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <BSP_MOTION_SENSOR_SetFullScale+0x36>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8002166:	f06f 030a 	mvn.w	r3, #10
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	e041      	b.n	80021f2 <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d108      	bne.n	8002186 <BSP_MOTION_SENSOR_SetFullScale+0x4e>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <BSP_MOTION_SENSOR_SetFullScale+0x4e>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800217e:	f06f 030a 	mvn.w	r3, #10
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e035      	b.n	80021f2 <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8002186:	4a1d      	ldr	r2, [pc, #116]	@ (80021fc <BSP_MOTION_SENSOR_SetFullScale+0xc4>)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d103      	bne.n	800219e <BSP_MOTION_SENSOR_SetFullScale+0x66>
  {
    status = BSP_ERROR_NO_INIT;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e029      	b.n	80021f2 <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else
  {
    /* Set the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d006      	beq.n	80021b2 <BSP_MOTION_SENSOR_SetFullScale+0x7a>
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d101      	bne.n	80021ae <BSP_MOTION_SENSOR_SetFullScale+0x76>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e002      	b.n	80021b4 <BSP_MOTION_SENSOR_SetFullScale+0x7c>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e000      	b.n	80021b4 <BSP_MOTION_SENSOR_SetFullScale+0x7c>
 80021b2:	2300      	movs	r3, #0
 80021b4:	74fb      	strb	r3, [r7, #19]
    if (index == MAGNETO_ID)
 80021b6:	7cfb      	ldrb	r3, [r7, #19]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d103      	bne.n	80021c4 <BSP_MOTION_SENSOR_SetFullScale+0x8c>
    {
      /* Feature not supported for Magneto */
      status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80021bc:	f06f 030a 	mvn.w	r3, #10
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e016      	b.n	80021f2 <BSP_MOTION_SENSOR_SetFullScale+0xba>
    }
    else
    {
      if (Motion_Sensor_FuncDrv[Instance][index]->SetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 80021c4:	7cf9      	ldrb	r1, [r7, #19]
 80021c6:	480e      	ldr	r0, [pc, #56]	@ (8002200 <BSP_MOTION_SENSOR_SetFullScale+0xc8>)
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	490a      	ldr	r1, [pc, #40]	@ (8002204 <BSP_MOTION_SENSOR_SetFullScale+0xcc>)
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4610      	mov	r0, r2
 80021e4:	4798      	blx	r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	da02      	bge.n	80021f2 <BSP_MOTION_SENSOR_SetFullScale+0xba>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 80021ec:	f06f 0304 	mvn.w	r3, #4
 80021f0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return status;
 80021f2:	697b      	ldr	r3, [r7, #20]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000e4c 	.word	0x20000e4c
 8002200:	20000e64 	.word	0x20000e64
 8002204:	20000e54 	.word	0x20000e54

08002208 <ISM330DHCX_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status.
  */
static int32_t ISM330DHCX_Probe(uint32_t Functions)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08c      	sub	sp, #48	@ 0x30
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8002210:	2300      	movs	r3, #0
 8002212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ISM330DHCX_IO_t            IOCtx;
  uint8_t                 ism330dlc_id;
  static ISM330DHCX_Object_t ISM330DHCX_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = ISM330DHCX_I2C_BUS;
 8002214:	2300      	movs	r3, #0
 8002216:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = ISM330DHCX_I2C_ADD_H;
 8002218:	23d7      	movs	r3, #215	@ 0xd7
 800221a:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 800221c:	4b29      	ldr	r3, [pc, #164]	@ (80022c4 <ISM330DHCX_Probe+0xbc>)
 800221e:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8002220:	4b29      	ldr	r3, [pc, #164]	@ (80022c8 <ISM330DHCX_Probe+0xc0>)
 8002222:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8002224:	4b29      	ldr	r3, [pc, #164]	@ (80022cc <ISM330DHCX_Probe+0xc4>)
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8002228:	4b29      	ldr	r3, [pc, #164]	@ (80022d0 <ISM330DHCX_Probe+0xc8>)
 800222a:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 800222c:	4b29      	ldr	r3, [pc, #164]	@ (80022d4 <ISM330DHCX_Probe+0xcc>)
 800222e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Register Component Bus IO operations */
  if (ISM330DHCX_RegisterBusIO(&ISM330DHCX_Obj, &IOCtx) != ISM330DHCX_OK)
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	4619      	mov	r1, r3
 8002236:	4828      	ldr	r0, [pc, #160]	@ (80022d8 <ISM330DHCX_Probe+0xd0>)
 8002238:	f000 fd08 	bl	8002c4c <ISM330DHCX_RegisterBusIO>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <ISM330DHCX_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8002242:	f06f 0307 	mvn.w	r3, #7
 8002246:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002248:	e037      	b.n	80022ba <ISM330DHCX_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (ISM330DHCX_ReadID(&ISM330DHCX_Obj, &ism330dlc_id) != ISM330DHCX_OK)
 800224a:	f107 030f 	add.w	r3, r7, #15
 800224e:	4619      	mov	r1, r3
 8002250:	4821      	ldr	r0, [pc, #132]	@ (80022d8 <ISM330DHCX_Probe+0xd0>)
 8002252:	f000 fe15 	bl	8002e80 <ISM330DHCX_ReadID>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <ISM330DHCX_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 800225c:	f06f 0304 	mvn.w	r3, #4
 8002260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002262:	e02a      	b.n	80022ba <ISM330DHCX_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (ism330dlc_id != ISM330DHCX_ID)
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	2b6b      	cmp	r3, #107	@ 0x6b
 8002268:	d003      	beq.n	8002272 <ISM330DHCX_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 800226a:	f06f 0306 	mvn.w	r3, #6
 800226e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002270:	e023      	b.n	80022ba <ISM330DHCX_Probe+0xb2>
  }
  else
  {
    Motion_Sensor_CompObj[0] = &ISM330DHCX_Obj;
 8002272:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <ISM330DHCX_Probe+0xd4>)
 8002274:	4a18      	ldr	r2, [pc, #96]	@ (80022d8 <ISM330DHCX_Probe+0xd0>)
 8002276:	601a      	str	r2, [r3, #0]
    Motion_Sensor_Drv[0]     = (MOTION_SENSOR_CommonDrv_t *) &ISM330DHCX_COMMON_Driver;
 8002278:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <ISM330DHCX_Probe+0xd8>)
 800227a:	4a1a      	ldr	r2, [pc, #104]	@ (80022e4 <ISM330DHCX_Probe+0xdc>)
 800227c:	601a      	str	r2, [r3, #0]
    /* Initialize the component */
    if (Motion_Sensor_Drv[0]->Init(Motion_Sensor_CompObj[0]) < 0)
 800227e:	4b18      	ldr	r3, [pc, #96]	@ (80022e0 <ISM330DHCX_Probe+0xd8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a15      	ldr	r2, [pc, #84]	@ (80022dc <ISM330DHCX_Probe+0xd4>)
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	4610      	mov	r0, r2
 800228a:	4798      	blx	r3
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	da03      	bge.n	800229a <ISM330DHCX_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8002292:	f06f 0304 	mvn.w	r3, #4
 8002296:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002298:	e00f      	b.n	80022ba <ISM330DHCX_Probe+0xb2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_GYRO) != 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <ISM330DHCX_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[0][GYRO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_GYRO_Driver;
 80022a4:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <ISM330DHCX_Probe+0xe0>)
 80022a6:	4a11      	ldr	r2, [pc, #68]	@ (80022ec <ISM330DHCX_Probe+0xe4>)
 80022a8:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & MOTION_ACCELERO) != 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <ISM330DHCX_Probe+0xb2>
      {
        Motion_Sensor_FuncDrv[0][ACCELERO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_ACC_Driver;
 80022b4:	4b0c      	ldr	r3, [pc, #48]	@ (80022e8 <ISM330DHCX_Probe+0xe0>)
 80022b6:	4a0e      	ldr	r2, [pc, #56]	@ (80022f0 <ISM330DHCX_Probe+0xe8>)
 80022b8:	605a      	str	r2, [r3, #4]
      }
    }
  }

  return status;
 80022ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3730      	adds	r7, #48	@ 0x30
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	080011cd 	.word	0x080011cd
 80022c8:	08001241 	.word	0x08001241
 80022cc:	08001369 	.word	0x08001369
 80022d0:	0800130d 	.word	0x0800130d
 80022d4:	080013c5 	.word	0x080013c5
 80022d8:	20000e7c 	.word	0x20000e7c
 80022dc:	20000e54 	.word	0x20000e54
 80022e0:	20000e5c 	.word	0x20000e5c
 80022e4:	20000048 	.word	0x20000048
 80022e8:	20000e64 	.word	0x20000e64
 80022ec:	2000007c 	.word	0x2000007c
 80022f0:	20000058 	.word	0x20000058

080022f4 <IIS2MDC_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status.
  */
static int32_t IIS2MDC_Probe(uint32_t Functions)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08c      	sub	sp, #48	@ 0x30
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  IIS2MDC_IO_t            IOCtx;
  uint8_t                 iis2mdc_id;
  static IIS2MDC_Object_t IIS2MDC_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = IIS2MDC_I2C_BUS;
 8002300:	2300      	movs	r3, #0
 8002302:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = IIS2MDC_I2C_ADD;
 8002304:	233d      	movs	r3, #61	@ 0x3d
 8002306:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8002308:	4b25      	ldr	r3, [pc, #148]	@ (80023a0 <IIS2MDC_Probe+0xac>)
 800230a:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 800230c:	4b25      	ldr	r3, [pc, #148]	@ (80023a4 <IIS2MDC_Probe+0xb0>)
 800230e:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8002310:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <IIS2MDC_Probe+0xb4>)
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8002314:	4b25      	ldr	r3, [pc, #148]	@ (80023ac <IIS2MDC_Probe+0xb8>)
 8002316:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8002318:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <IIS2MDC_Probe+0xbc>)
 800231a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Register Component Bus IO operations */
  if (IIS2MDC_RegisterBusIO(&IIS2MDC_Obj, &IOCtx) != IIS2MDC_OK)
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	4619      	mov	r1, r3
 8002322:	4824      	ldr	r0, [pc, #144]	@ (80023b4 <IIS2MDC_Probe+0xc0>)
 8002324:	f000 f852 	bl	80023cc <IIS2MDC_RegisterBusIO>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <IIS2MDC_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 800232e:	f06f 0307 	mvn.w	r3, #7
 8002332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002334:	e02f      	b.n	8002396 <IIS2MDC_Probe+0xa2>
  }
  /* Read the sensor ID */
  else if (IIS2MDC_ReadID(&IIS2MDC_Obj, &iis2mdc_id) != IIS2MDC_OK)
 8002336:	f107 030f 	add.w	r3, r7, #15
 800233a:	4619      	mov	r1, r3
 800233c:	481d      	ldr	r0, [pc, #116]	@ (80023b4 <IIS2MDC_Probe+0xc0>)
 800233e:	f000 f8fc 	bl	800253a <IIS2MDC_ReadID>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <IIS2MDC_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8002348:	f06f 0304 	mvn.w	r3, #4
 800234c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800234e:	e022      	b.n	8002396 <IIS2MDC_Probe+0xa2>
  }
  /* Check if the returned sensor ID is correct */
  else if (iis2mdc_id != IIS2MDC_ID)
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	2b40      	cmp	r3, #64	@ 0x40
 8002354:	d003      	beq.n	800235e <IIS2MDC_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8002356:	f06f 0306 	mvn.w	r3, #6
 800235a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800235c:	e01b      	b.n	8002396 <IIS2MDC_Probe+0xa2>
  }
  else
  {
    Motion_Sensor_CompObj[1] = &IIS2MDC_Obj;
 800235e:	4b16      	ldr	r3, [pc, #88]	@ (80023b8 <IIS2MDC_Probe+0xc4>)
 8002360:	4a14      	ldr	r2, [pc, #80]	@ (80023b4 <IIS2MDC_Probe+0xc0>)
 8002362:	605a      	str	r2, [r3, #4]
    Motion_Sensor_Drv[1]     = (MOTION_SENSOR_CommonDrv_t *) &IIS2MDC_COMMON_Driver;
 8002364:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <IIS2MDC_Probe+0xc8>)
 8002366:	4a16      	ldr	r2, [pc, #88]	@ (80023c0 <IIS2MDC_Probe+0xcc>)
 8002368:	605a      	str	r2, [r3, #4]
    /* Initialize the component */
    if (Motion_Sensor_Drv[1]->Init(Motion_Sensor_CompObj[1]) < 0)
 800236a:	4b14      	ldr	r3, [pc, #80]	@ (80023bc <IIS2MDC_Probe+0xc8>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a11      	ldr	r2, [pc, #68]	@ (80023b8 <IIS2MDC_Probe+0xc4>)
 8002372:	6852      	ldr	r2, [r2, #4]
 8002374:	4610      	mov	r0, r2
 8002376:	4798      	blx	r3
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	da03      	bge.n	8002386 <IIS2MDC_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800237e:	f06f 0304 	mvn.w	r3, #4
 8002382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002384:	e007      	b.n	8002396 <IIS2MDC_Probe+0xa2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_MAGNETO) != 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <IIS2MDC_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[1][MAGNETO_ID] = (MOTION_SENSOR_FuncDrv_t *) &IIS2MDC_MAG_Driver;
 8002390:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <IIS2MDC_Probe+0xd0>)
 8002392:	4a0d      	ldr	r2, [pc, #52]	@ (80023c8 <IIS2MDC_Probe+0xd4>)
 8002394:	615a      	str	r2, [r3, #20]
      }
    }
  }

  return status;
 8002396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002398:	4618      	mov	r0, r3
 800239a:	3730      	adds	r7, #48	@ 0x30
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	080011cd 	.word	0x080011cd
 80023a4:	08001241 	.word	0x08001241
 80023a8:	08001369 	.word	0x08001369
 80023ac:	0800130d 	.word	0x0800130d
 80023b0:	080013c5 	.word	0x080013c5
 80023b4:	20000eac 	.word	0x20000eac
 80023b8:	20000e54 	.word	0x20000e54
 80023bc:	20000e5c 	.word	0x20000e5c
 80023c0:	20000014 	.word	0x20000014
 80023c4:	20000e64 	.word	0x20000e64
 80023c8:	20000024 	.word	0x20000024

080023cc <IIS2MDC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d103      	bne.n	80023e8 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 80023e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	e04b      	b.n	8002480 <IIS2MDC_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	7b1a      	ldrb	r2, [r3, #12]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a1a      	ldr	r2, [pc, #104]	@ (800248c <IIS2MDC_RegisterBusIO+0xc0>)
 8002424:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a19      	ldr	r2, [pc, #100]	@ (8002490 <IIS2MDC_RegisterBusIO+0xc4>)
 800242a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <IIS2MDC_RegisterBusIO+0x76>
    {
      ret = IIS2MDC_ERROR;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e01e      	b.n	8002480 <IIS2MDC_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4798      	blx	r3
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <IIS2MDC_RegisterBusIO+0x8a>
    {
      ret = IIS2MDC_ERROR;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e014      	b.n	8002480 <IIS2MDC_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d010      	beq.n	8002480 <IIS2MDC_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <IIS2MDC_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	331c      	adds	r3, #28
 800246c:	2101      	movs	r1, #1
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fbc5 	bl	8002bfe <iis2mdc_i2c_interface_set>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <IIS2MDC_RegisterBusIO+0xb4>
          {
            ret = IIS2MDC_ERROR;
 800247a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800247e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002480:	68fb      	ldr	r3, [r7, #12]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	08002887 	.word	0x08002887
 8002490:	080028e9 	.word	0x080028e9

08002494 <IIS2MDC_Init>:
 * @brief  Initialize the IIS2MDC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	331c      	adds	r3, #28
 80024a0:	2101      	movs	r1, #1
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fb06 	bl	8002ab4 <iis2mdc_block_data_update_set>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024b2:	e028      	b.n	8002506 <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	331c      	adds	r3, #28
 80024b8:	2102      	movs	r1, #2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fa75 	bl	80029aa <iis2mdc_operating_mode_set>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024ca:	e01c      	b.n	8002506 <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	331c      	adds	r3, #28
 80024d0:	2103      	movs	r1, #3
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fa8f 	bl	80029f6 <iis2mdc_data_rate_set>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024e2:	e010      	b.n	8002506 <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	331c      	adds	r3, #28
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fb61 	bl	8002bb2 <iis2mdc_self_test_set>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024fa:	e004      	b.n	8002506 <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return IIS2MDC_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <IIS2MDC_DeInit>:
 * @brief  Deinitialize the IIS2MDC magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f874 	bl	8002604 <IIS2MDC_MAG_Disable>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 8002522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002526:	e004      	b.n	8002532 <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return IIS2MDC_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <IIS2MDC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	331c      	adds	r3, #28
 8002548:	6839      	ldr	r1, [r7, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fb20 	bl	8002b90 <iis2mdc_device_id_get>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800255a:	e000      	b.n	800255e <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <IIS2MDC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
 * @retval Component status
 */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2200      	movs	r2, #0
 800257c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2201      	movs	r2, #1
 8002582:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2200      	movs	r2, #0
 800258e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2232      	movs	r2, #50	@ 0x32
 800259a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	4a04      	ldr	r2, [pc, #16]	@ (80025c0 <IIS2MDC_GetCapabilities+0x58>)
 80025b0:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	42c80000 	.word	0x42c80000

080025c4 <IIS2MDC_MAG_Enable>:
 * @brief Enable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e010      	b.n	80025fc <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	331c      	adds	r3, #28
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f9e2 	bl	80029aa <iis2mdc_operating_mode_set>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025f0:	e004      	b.n	80025fc <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return IIS2MDC_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <IIS2MDC_MAG_Disable>:
 * @brief Disable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e010      	b.n	800263c <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	331c      	adds	r3, #28
 800261e:	2102      	movs	r1, #2
 8002620:	4618      	mov	r0, r3
 8002622:	f000 f9c2 	bl	80029aa <iis2mdc_operating_mode_set>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002630:	e004      	b.n	800263c <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return IIS2MDC_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <IIS2MDC_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8002654:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <IIS2MDC_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	331c      	adds	r3, #28
 8002676:	f107 020b 	add.w	r2, r7, #11
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f000 f9e1 	bl	8002a44 <iis2mdc_data_rate_get>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 8002688:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800268c:	e023      	b.n	80026d6 <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800268e:	7afb      	ldrb	r3, [r7, #11]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d81b      	bhi.n	80026cc <IIS2MDC_MAG_GetOutputDataRate+0x68>
 8002694:	a201      	add	r2, pc, #4	@ (adr r2, 800269c <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	080026b5 	.word	0x080026b5
 80026a4:	080026bd 	.word	0x080026bd
 80026a8:	080026c5 	.word	0x080026c5
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4a0c      	ldr	r2, [pc, #48]	@ (80026e0 <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 80026b0:	601a      	str	r2, [r3, #0]
      break;
 80026b2:	e00f      	b.n	80026d4 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4a0b      	ldr	r2, [pc, #44]	@ (80026e4 <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 80026b8:	601a      	str	r2, [r3, #0]
      break;
 80026ba:	e00b      	b.n	80026d4 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 80026c0:	601a      	str	r2, [r3, #0]
      break;
 80026c2:	e007      	b.n	80026d4 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	4a09      	ldr	r2, [pc, #36]	@ (80026ec <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 80026c8:	601a      	str	r2, [r3, #0]
      break;
 80026ca:	e003      	b.n	80026d4 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026d0:	60fb      	str	r3, [r7, #12]
      break;
 80026d2:	bf00      	nop
  }

  return ret;
 80026d4:	68fb      	ldr	r3, [r7, #12]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	41200000 	.word	0x41200000
 80026e4:	41a00000 	.word	0x41a00000
 80026e8:	42480000 	.word	0x42480000
 80026ec:	42c80000 	.word	0x42c80000

080026f0 <IIS2MDC_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 80026fc:	edd7 7a00 	vldr	s15, [r7]
 8002700:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270c:	d801      	bhi.n	8002712 <IIS2MDC_MAG_SetOutputDataRate+0x22>
 800270e:	2300      	movs	r3, #0
 8002710:	e016      	b.n	8002740 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8002712:	edd7 7a00 	vldr	s15, [r7]
 8002716:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800271a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002722:	d801      	bhi.n	8002728 <IIS2MDC_MAG_SetOutputDataRate+0x38>
 8002724:	2301      	movs	r3, #1
 8002726:	e00b      	b.n	8002740 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8002728:	edd7 7a00 	vldr	s15, [r7]
 800272c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002768 <IIS2MDC_MAG_SetOutputDataRate+0x78>
 8002730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002738:	d801      	bhi.n	800273e <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 800273a:	2302      	movs	r3, #2
 800273c:	e000      	b.n	8002740 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 800273e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 8002740:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	331c      	adds	r3, #28
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	4611      	mov	r1, r2
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f953 	bl	80029f6 <iis2mdc_data_rate_set>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 8002756:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800275a:	e000      	b.n	800275e <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	42480000 	.word	0x42480000

0800276c <IIS2MDC_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2232      	movs	r2, #50	@ 0x32
 800277a:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <IIS2MDC_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <IIS2MDC_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	331c      	adds	r3, #28
 80027b0:	f107 0208 	add.w	r2, r7, #8
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 f9a2 	bl	8002b00 <iis2mdc_magnetic_raw_get>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027c6:	e00c      	b.n	80027e2 <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80027c8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80027d0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80027d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	331c      	adds	r3, #28
 80027f8:	f107 0210 	add.w	r2, r7, #16
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f97e 	bl	8002b00 <iis2mdc_magnetic_raw_get>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 800280a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800280e:	e036      	b.n	800287e <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 8002810:	f107 030c 	add.w	r3, r7, #12
 8002814:	4619      	mov	r1, r3
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff ff14 	bl	8002644 <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800281c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002828:	edd7 7a03 	vldr	s15, [r7, #12]
 800282c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002834:	ee17 2a90 	vmov	r2, s15
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800283c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002848:	edd7 7a03 	vldr	s15, [r7, #12]
 800284c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002854:	ee17 2a90 	vmov	r2, s15
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800285c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002860:	ee07 3a90 	vmov	s15, r3
 8002864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002868:	edd7 7a03 	vldr	s15, [r7, #12]
 800286c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002874:	ee17 2a90 	vmov	r2, s15
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002886:	b590      	push	{r4, r7, lr}
 8002888:	b087      	sub	sp, #28
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	461a      	mov	r2, r3
 8002892:	460b      	mov	r3, r1
 8002894:	72fb      	strb	r3, [r7, #11]
 8002896:	4613      	mov	r3, r2
 8002898:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10e      	bne.n	80028c4 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	695c      	ldr	r4, [r3, #20]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	7b1b      	ldrb	r3, [r3, #12]
 80028ae:	4618      	mov	r0, r3
 80028b0:	7afb      	ldrb	r3, [r7, #11]
 80028b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4619      	mov	r1, r3
 80028ba:	893b      	ldrh	r3, [r7, #8]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	47a0      	blx	r4
 80028c0:	4603      	mov	r3, r0
 80028c2:	e00d      	b.n	80028e0 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	695c      	ldr	r4, [r3, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	7b1b      	ldrb	r3, [r3, #12]
 80028cc:	4618      	mov	r0, r3
 80028ce:	7afb      	ldrb	r3, [r7, #11]
 80028d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	4619      	mov	r1, r3
 80028d8:	893b      	ldrh	r3, [r7, #8]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	47a0      	blx	r4
 80028de:	4603      	mov	r3, r0
  }
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	371c      	adds	r7, #28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd90      	pop	{r4, r7, pc}

080028e8 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	461a      	mov	r2, r3
 80028f4:	460b      	mov	r3, r1
 80028f6:	72fb      	strb	r3, [r7, #11]
 80028f8:	4613      	mov	r3, r2
 80028fa:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10e      	bne.n	8002926 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	691c      	ldr	r4, [r3, #16]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	7b1b      	ldrb	r3, [r3, #12]
 8002910:	4618      	mov	r0, r3
 8002912:	7afb      	ldrb	r3, [r7, #11]
 8002914:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002918:	b2db      	uxtb	r3, r3
 800291a:	4619      	mov	r1, r3
 800291c:	893b      	ldrh	r3, [r7, #8]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	47a0      	blx	r4
 8002922:	4603      	mov	r3, r0
 8002924:	e00d      	b.n	8002942 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	691c      	ldr	r4, [r3, #16]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	7b1b      	ldrb	r3, [r3, #12]
 800292e:	4618      	mov	r0, r3
 8002930:	7afb      	ldrb	r3, [r7, #11]
 8002932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002936:	b2db      	uxtb	r3, r3
 8002938:	4619      	mov	r1, r3
 800293a:	893b      	ldrh	r3, [r7, #8]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	47a0      	blx	r4
 8002940:	4603      	mov	r3, r0
  }
}
 8002942:	4618      	mov	r0, r3
 8002944:	371c      	adds	r7, #28
 8002946:	46bd      	mov	sp, r7
 8002948:	bd90      	pop	{r4, r7, pc}

0800294a <iis2mdc_read_reg>:
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800294a:	b590      	push	{r4, r7, lr}
 800294c:	b087      	sub	sp, #28
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	461a      	mov	r2, r3
 8002956:	460b      	mov	r3, r1
 8002958:	72fb      	strb	r3, [r7, #11]
 800295a:	4613      	mov	r3, r2
 800295c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	685c      	ldr	r4, [r3, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6898      	ldr	r0, [r3, #8]
 8002966:	893b      	ldrh	r3, [r7, #8]
 8002968:	7af9      	ldrb	r1, [r7, #11]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	47a0      	blx	r4
 800296e:	6178      	str	r0, [r7, #20]
  return ret;
 8002970:	697b      	ldr	r3, [r7, #20]
}
 8002972:	4618      	mov	r0, r3
 8002974:	371c      	adds	r7, #28
 8002976:	46bd      	mov	sp, r7
 8002978:	bd90      	pop	{r4, r7, pc}

0800297a <iis2mdc_write_reg>:
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800297a:	b590      	push	{r4, r7, lr}
 800297c:	b087      	sub	sp, #28
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	461a      	mov	r2, r3
 8002986:	460b      	mov	r3, r1
 8002988:	72fb      	strb	r3, [r7, #11]
 800298a:	4613      	mov	r3, r2
 800298c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681c      	ldr	r4, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6898      	ldr	r0, [r3, #8]
 8002996:	893b      	ldrh	r3, [r7, #8]
 8002998:	7af9      	ldrb	r1, [r7, #11]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	47a0      	blx	r4
 800299e:	6178      	str	r0, [r7, #20]
  return ret;
 80029a0:	697b      	ldr	r3, [r7, #20]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd90      	pop	{r4, r7, pc}

080029aa <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80029b6:	f107 0208 	add.w	r2, r7, #8
 80029ba:	2301      	movs	r3, #1
 80029bc:	2160      	movs	r1, #96	@ 0x60
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ffc3 	bl	800294a <iis2mdc_read_reg>
 80029c4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10f      	bne.n	80029ec <iis2mdc_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	7a3b      	ldrb	r3, [r7, #8]
 80029d6:	f362 0301 	bfi	r3, r2, #0, #2
 80029da:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80029dc:	f107 0208 	add.w	r2, r7, #8
 80029e0:	2301      	movs	r3, #1
 80029e2:	2160      	movs	r1, #96	@ 0x60
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ffc8 	bl	800297a <iis2mdc_write_reg>
 80029ea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80029ec:	68fb      	ldr	r3, [r7, #12]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	460b      	mov	r3, r1
 8002a00:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002a02:	f107 0208 	add.w	r2, r7, #8
 8002a06:	2301      	movs	r3, #1
 8002a08:	2160      	movs	r1, #96	@ 0x60
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ff9d 	bl	800294a <iis2mdc_read_reg>
 8002a10:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10f      	bne.n	8002a38 <iis2mdc_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	7a3b      	ldrb	r3, [r7, #8]
 8002a22:	f362 0383 	bfi	r3, r2, #2, #2
 8002a26:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002a28:	f107 0208 	add.w	r2, r7, #8
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	2160      	movs	r1, #96	@ 0x60
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff ffa2 	bl	800297a <iis2mdc_write_reg>
 8002a36:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a38:	68fb      	ldr	r3, [r7, #12]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002a4e:	f107 0208 	add.w	r2, r7, #8
 8002a52:	2301      	movs	r3, #1
 8002a54:	2160      	movs	r1, #96	@ 0x60
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ff77 	bl	800294a <iis2mdc_read_reg>
 8002a5c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8002a5e:	7a3b      	ldrb	r3, [r7, #8]
 8002a60:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d81a      	bhi.n	8002aa0 <iis2mdc_data_rate_get+0x5c>
 8002a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <iis2mdc_data_rate_get+0x2c>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002a89 	.word	0x08002a89
 8002a78:	08002a91 	.word	0x08002a91
 8002a7c:	08002a99 	.word	0x08002a99
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
      break;
 8002a86:	e00f      	b.n	8002aa8 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
      break;
 8002a8e:	e00b      	b.n	8002aa8 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2202      	movs	r2, #2
 8002a94:	701a      	strb	r2, [r3, #0]
      break;
 8002a96:	e007      	b.n	8002aa8 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	701a      	strb	r2, [r3, #0]
      break;
 8002a9e:	e003      	b.n	8002aa8 <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
      break;
 8002aa6:	bf00      	nop
  }

  return ret;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop

08002ab4 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002ac0:	f107 0208 	add.w	r2, r7, #8
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	2162      	movs	r1, #98	@ 0x62
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ff3e 	bl	800294a <iis2mdc_read_reg>
 8002ace:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10f      	bne.n	8002af6 <iis2mdc_block_data_update_set+0x42>
    reg.bdu = val;
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	7a3b      	ldrb	r3, [r7, #8]
 8002ae0:	f362 1304 	bfi	r3, r2, #4, #1
 8002ae4:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002ae6:	f107 0208 	add.w	r2, r7, #8
 8002aea:	2301      	movs	r3, #1
 8002aec:	2162      	movs	r1, #98	@ 0x62
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ff43 	bl	800297a <iis2mdc_write_reg>
 8002af4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 8002b0a:	f107 020c 	add.w	r2, r7, #12
 8002b0e:	2306      	movs	r3, #6
 8002b10:	2168      	movs	r1, #104	@ 0x68
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ff19 	bl	800294a <iis2mdc_read_reg>
 8002b18:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002b1a:	7b7b      	ldrb	r3, [r7, #13]
 8002b1c:	b21a      	sxth	r2, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	7b3a      	ldrb	r2, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	b21a      	sxth	r2, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	3302      	adds	r3, #2
 8002b40:	b212      	sxth	r2, r2
 8002b42:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	3302      	adds	r3, #2
 8002b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	7bba      	ldrb	r2, [r7, #14]
 8002b54:	4413      	add	r3, r2
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	b212      	sxth	r2, r2
 8002b5e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002b60:	7c7a      	ldrb	r2, [r7, #17]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	3304      	adds	r3, #4
 8002b66:	b212      	sxth	r2, r2
 8002b68:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	7c3a      	ldrb	r2, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	3304      	adds	r3, #4
 8002b82:	b212      	sxth	r2, r2
 8002b84:	801a      	strh	r2, [r3, #0]
  return ret;
 8002b86:	697b      	ldr	r3, [r7, #20]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	214f      	movs	r1, #79	@ 0x4f
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff fed2 	bl	800294a <iis2mdc_read_reg>
 8002ba6:	60f8      	str	r0, [r7, #12]
  return ret;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002bbe:	f107 0208 	add.w	r2, r7, #8
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	2162      	movs	r1, #98	@ 0x62
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff febf 	bl	800294a <iis2mdc_read_reg>
 8002bcc:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10f      	bne.n	8002bf4 <iis2mdc_self_test_set+0x42>
    reg.self_test = val;
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	7a3b      	ldrb	r3, [r7, #8]
 8002bde:	f362 0341 	bfi	r3, r2, #1, #1
 8002be2:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002be4:	f107 0208 	add.w	r2, r7, #8
 8002be8:	2301      	movs	r3, #1
 8002bea:	2162      	movs	r1, #98	@ 0x62
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff fec4 	bl	800297a <iis2mdc_write_reg>
 8002bf2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002c0a:	f107 0208 	add.w	r2, r7, #8
 8002c0e:	2301      	movs	r3, #1
 8002c10:	2162      	movs	r1, #98	@ 0x62
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff fe99 	bl	800294a <iis2mdc_read_reg>
 8002c18:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10f      	bne.n	8002c40 <iis2mdc_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	7a3b      	ldrb	r3, [r7, #8]
 8002c2a:	f362 1345 	bfi	r3, r2, #5, #1
 8002c2e:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002c30:	f107 0208 	add.w	r2, r7, #8
 8002c34:	2301      	movs	r3, #1
 8002c36:	2162      	movs	r1, #98	@ 0x62
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff fe9e 	bl	800297a <iis2mdc_write_reg>
 8002c3e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002c40:	68fb      	ldr	r3, [r7, #12]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <ISM330DHCX_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d103      	bne.n	8002c68 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 8002c60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	e04d      	b.n	8002d04 <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	7b1a      	ldrb	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	695a      	ldr	r2, [r3, #20]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	699a      	ldr	r2, [r3, #24]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8002d10 <ISM330DHCX_RegisterBusIO+0xc4>)
 8002ca4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8002d14 <ISM330DHCX_RegisterBusIO+0xc8>)
 8002caa:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d103      	bne.n	8002cc2 <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 8002cba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	e020      	b.n	8002d04 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4798      	blx	r3
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	e016      	b.n	8002d04 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d112      	bne.n	8002d04 <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10d      	bne.n	8002d04 <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002ce8:	230c      	movs	r3, #12
 8002cea:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8002cec:	7afb      	ldrb	r3, [r7, #11]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2112      	movs	r1, #18
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fd61 	bl	80037ba <ISM330DHCX_Write_Reg>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d02:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002d04:	68fb      	ldr	r3, [r7, #12]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	08003c29 	.word	0x08003c29
 8002d14:	08003c5f 	.word	0x08003c5f

08002d18 <ISM330DHCX_Init>:
 * @brief  Initialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	331c      	adds	r3, #28
 8002d24:	2101      	movs	r1, #1
 8002d26:	4618      	mov	r0, r3
 8002d28:	f001 fd12 	bl	8004750 <ism330dhcx_device_conf_set>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d36:	e078      	b.n	8002e2a <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	331c      	adds	r3, #28
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f001 fd89 	bl	8004856 <ism330dhcx_auto_increment_set>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d4e:	e06c      	b.n	8002e2a <ISM330DHCX_Init+0x112>
  }

    /* SW reset */
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	331c      	adds	r3, #28
 8002d54:	2101      	movs	r1, #1
 8002d56:	4618      	mov	r0, r3
 8002d58:	f001 fd57 	bl	800480a <ism330dhcx_reset_set>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d66:	e060      	b.n	8002e2a <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	331c      	adds	r3, #28
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 fd71 	bl	8004856 <ism330dhcx_auto_increment_set>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d7e:	e054      	b.n	8002e2a <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	331c      	adds	r3, #28
 8002d84:	2101      	movs	r1, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 fc2c 	bl	80045e4 <ism330dhcx_block_data_update_set>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 8002d92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d96:	e048      	b.n	8002e2a <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	331c      	adds	r3, #28
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f001 fd7f 	bl	80048a2 <ism330dhcx_fifo_mode_set>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dae:	e03c      	b.n	8002e2a <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2204      	movs	r2, #4
 8002db4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	331c      	adds	r3, #28
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fff6 	bl	8003db0 <ism330dhcx_xl_data_rate_set>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dce:	e02c      	b.n	8002e2a <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	331c      	adds	r3, #28
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 ff8c 	bl	8003cf4 <ism330dhcx_xl_full_scale_set>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002de6:	e020      	b.n	8002e2a <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2204      	movs	r2, #4
 8002dec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	331c      	adds	r3, #28
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f001 fa26 	bl	8004248 <ism330dhcx_gy_data_rate_set>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e06:	e010      	b.n	8002e2a <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	331c      	adds	r3, #28
 8002e0c:	210c      	movs	r1, #12
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 f9a2 	bl	8004158 <ism330dhcx_gy_full_scale_set>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e1e:	e004      	b.n	8002e2a <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return ISM330DHCX_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <ISM330DHCX_DeInit>:
 * @brief  Deinitialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f888 	bl	8002f50 <ISM330DHCX_ACC_Disable>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e4a:	e015      	b.n	8002e78 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fa92 	bl	8003376 <ISM330DHCX_GYRO_Disable>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8002e58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e5c:	e00c      	b.n	8002e78 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  pObj->is_initialized = 0;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return ISM330DHCX_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <ISM330DHCX_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	331c      	adds	r3, #28
 8002e8e:	6839      	ldr	r1, [r7, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f001 fca9 	bl	80047e8 <ism330dhcx_device_id_get>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8002e9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ea0:	e000      	b.n	8002ea4 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <ISM330DHCX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to ISM330DHCX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002ed4:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2210      	movs	r2, #16
 8002eda:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	4a07      	ldr	r2, [pc, #28]	@ (8002f04 <ISM330DHCX_GetCapabilities+0x58>)
 8002ee6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	4a06      	ldr	r2, [pc, #24]	@ (8002f04 <ISM330DHCX_GetCapabilities+0x58>)
 8002eec:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	45d05800 	.word	0x45d05800

08002f08 <ISM330DHCX_ACC_Enable>:
 * @brief  Enable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e014      	b.n	8002f48 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f103 021c 	add.w	r2, r3, #28
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	f000 ff3f 	bl	8003db0 <ism330dhcx_xl_data_rate_set>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f3c:	e004      	b.n	8002f48 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return ISM330DHCX_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <ISM330DHCX_ACC_Disable>:
 * @brief  Disable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e01f      	b.n	8002fa6 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f103 021c 	add.w	r2, r3, #28
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	332b      	adds	r3, #43	@ 0x2b
 8002f70:	4619      	mov	r1, r3
 8002f72:	4610      	mov	r0, r2
 8002f74:	f001 f888 	bl	8004088 <ism330dhcx_xl_data_rate_get>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f82:	e010      	b.n	8002fa6 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	331c      	adds	r3, #28
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 ff10 	bl	8003db0 <ism330dhcx_xl_data_rate_set>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8002f96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f9a:	e004      	b.n	8002fa6 <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return ISM330DHCX_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <ISM330DHCX_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	331c      	adds	r3, #28
 8002fc2:	f107 020b 	add.w	r2, r7, #11
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 feb9 	bl	8003d40 <ism330dhcx_xl_full_scale_get>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002fd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fd8:	e023      	b.n	8003022 <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8002fda:	7afb      	ldrb	r3, [r7, #11]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d81b      	bhi.n	8003018 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8002fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe8 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 8002fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe6:	bf00      	nop
 8002fe8:	08002ff9 	.word	0x08002ff9
 8002fec:	08003011 	.word	0x08003011
 8002ff0:	08003001 	.word	0x08003001
 8002ff4:	08003009 	.word	0x08003009
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800302c <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8002ffc:	601a      	str	r2, [r3, #0]
      break;
 8002ffe:	e00f      	b.n	8003020 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	4a0b      	ldr	r2, [pc, #44]	@ (8003030 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8003004:	601a      	str	r2, [r3, #0]
      break;
 8003006:	e00b      	b.n	8003020 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4a0a      	ldr	r2, [pc, #40]	@ (8003034 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 800300c:	601a      	str	r2, [r3, #0]
      break;
 800300e:	e007      	b.n	8003020 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4a09      	ldr	r2, [pc, #36]	@ (8003038 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 8003014:	601a      	str	r2, [r3, #0]
      break;
 8003016:	e003      	b.n	8003020 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8003018:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800301c:	60fb      	str	r3, [r7, #12]
      break;
 800301e:	bf00      	nop
  }

  return ret;
 8003020:	68fb      	ldr	r3, [r7, #12]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	3d79db23 	.word	0x3d79db23
 8003030:	3df9db23 	.word	0x3df9db23
 8003034:	3e79db23 	.word	0x3e79db23
 8003038:	3ef9db23 	.word	0x3ef9db23

0800303c <ISM330DHCX_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	331c      	adds	r3, #28
 800304e:	f107 020b 	add.w	r2, r7, #11
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f001 f817 	bl	8004088 <ism330dhcx_xl_data_rate_get>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003064:	e04e      	b.n	8003104 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003066:	7afb      	ldrb	r3, [r7, #11]
 8003068:	2b0a      	cmp	r3, #10
 800306a:	d846      	bhi.n	80030fa <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 800306c:	a201      	add	r2, pc, #4	@ (adr r2, 8003074 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 800306e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003072:	bf00      	nop
 8003074:	080030a1 	.word	0x080030a1
 8003078:	080030ab 	.word	0x080030ab
 800307c:	080030b3 	.word	0x080030b3
 8003080:	080030bb 	.word	0x080030bb
 8003084:	080030c3 	.word	0x080030c3
 8003088:	080030cb 	.word	0x080030cb
 800308c:	080030d3 	.word	0x080030d3
 8003090:	080030db 	.word	0x080030db
 8003094:	080030e3 	.word	0x080030e3
 8003098:	080030eb 	.word	0x080030eb
 800309c:	080030f3 	.word	0x080030f3
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
      break;
 80030a8:	e02b      	b.n	8003102 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	4a17      	ldr	r2, [pc, #92]	@ (800310c <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 80030ae:	601a      	str	r2, [r3, #0]
      break;
 80030b0:	e027      	b.n	8003102 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	4a16      	ldr	r2, [pc, #88]	@ (8003110 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 80030b6:	601a      	str	r2, [r3, #0]
      break;
 80030b8:	e023      	b.n	8003102 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	4a15      	ldr	r2, [pc, #84]	@ (8003114 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 80030be:	601a      	str	r2, [r3, #0]
      break;
 80030c0:	e01f      	b.n	8003102 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	4a14      	ldr	r2, [pc, #80]	@ (8003118 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 80030c6:	601a      	str	r2, [r3, #0]
      break;
 80030c8:	e01b      	b.n	8003102 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	4a13      	ldr	r2, [pc, #76]	@ (800311c <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 80030ce:	601a      	str	r2, [r3, #0]
      break;
 80030d0:	e017      	b.n	8003102 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_417Hz:
      *Odr = 417.0f;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	4a12      	ldr	r2, [pc, #72]	@ (8003120 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 80030d6:	601a      	str	r2, [r3, #0]
      break;
 80030d8:	e013      	b.n	8003102 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	4a11      	ldr	r2, [pc, #68]	@ (8003124 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 80030de:	601a      	str	r2, [r3, #0]
      break;
 80030e0:	e00f      	b.n	8003102 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	4a10      	ldr	r2, [pc, #64]	@ (8003128 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 80030e6:	601a      	str	r2, [r3, #0]
      break;
 80030e8:	e00b      	b.n	8003102 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	4a0f      	ldr	r2, [pc, #60]	@ (800312c <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 80030ee:	601a      	str	r2, [r3, #0]
      break;
 80030f0:	e007      	b.n	8003102 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003130 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 80030f6:	601a      	str	r2, [r3, #0]
      break;
 80030f8:	e003      	b.n	8003102 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030fe:	60fb      	str	r3, [r7, #12]
      break;
 8003100:	bf00      	nop
  }

  return ret;
 8003102:	68fb      	ldr	r3, [r7, #12]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	41480000 	.word	0x41480000
 8003110:	41d00000 	.word	0x41d00000
 8003114:	42500000 	.word	0x42500000
 8003118:	42d00000 	.word	0x42d00000
 800311c:	43500000 	.word	0x43500000
 8003120:	43d08000 	.word	0x43d08000
 8003124:	44504000 	.word	0x44504000
 8003128:	44d06000 	.word	0x44d06000
 800312c:	45505000 	.word	0x45505000
 8003130:	45d05800 	.word	0x45d05800

08003134 <ISM330DHCX_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003146:	2b01      	cmp	r3, #1
 8003148:	d106      	bne.n	8003158 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800314a:	ed97 0a00 	vldr	s0, [r7]
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fb4e 	bl	80037f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8003154:	4603      	mov	r3, r0
 8003156:	e005      	b.n	8003164 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003158:	ed97 0a00 	vldr	s0, [r7]
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fbd3 	bl	8003908 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 8003162:	4603      	mov	r3, r0
  }
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <ISM330DHCX_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	331c      	adds	r3, #28
 800317e:	f107 020b 	add.w	r2, r7, #11
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fddb 	bl	8003d40 <ism330dhcx_xl_full_scale_get>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003190:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003194:	e023      	b.n	80031de <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003196:	7afb      	ldrb	r3, [r7, #11]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d81b      	bhi.n	80031d4 <ISM330DHCX_ACC_GetFullScale+0x68>
 800319c:	a201      	add	r2, pc, #4	@ (adr r2, 80031a4 <ISM330DHCX_ACC_GetFullScale+0x38>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031b5 	.word	0x080031b5
 80031a8:	080031cd 	.word	0x080031cd
 80031ac:	080031bd 	.word	0x080031bd
 80031b0:	080031c5 	.word	0x080031c5
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2202      	movs	r2, #2
 80031b8:	601a      	str	r2, [r3, #0]
      break;
 80031ba:	e00f      	b.n	80031dc <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2204      	movs	r2, #4
 80031c0:	601a      	str	r2, [r3, #0]
      break;
 80031c2:	e00b      	b.n	80031dc <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2208      	movs	r2, #8
 80031c8:	601a      	str	r2, [r3, #0]
      break;
 80031ca:	e007      	b.n	80031dc <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2210      	movs	r2, #16
 80031d0:	601a      	str	r2, [r3, #0]
      break;
 80031d2:	e003      	b.n	80031dc <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 80031d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031d8:	60fb      	str	r3, [r7, #12]
      break;
 80031da:	bf00      	nop
  }

  return ret;
 80031dc:	68fb      	ldr	r3, [r7, #12]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop

080031e8 <ISM330DHCX_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	dd0b      	ble.n	8003210 <ISM330DHCX_ACC_SetFullScale+0x28>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	dd06      	ble.n	800320c <ISM330DHCX_ACC_SetFullScale+0x24>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b08      	cmp	r3, #8
 8003202:	dc01      	bgt.n	8003208 <ISM330DHCX_ACC_SetFullScale+0x20>
 8003204:	2303      	movs	r3, #3
 8003206:	e004      	b.n	8003212 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8003208:	2301      	movs	r3, #1
 800320a:	e002      	b.n	8003212 <ISM330DHCX_ACC_SetFullScale+0x2a>
 800320c:	2302      	movs	r3, #2
 800320e:	e000      	b.n	8003212 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8003210:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 8003212:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	331c      	adds	r3, #28
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fd69 	bl	8003cf4 <ism330dhcx_xl_full_scale_set>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8003228:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800322c:	e000      	b.n	8003230 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <ISM330DHCX_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	331c      	adds	r3, #28
 8003246:	f107 0208 	add.w	r2, r7, #8
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f001 fa37 	bl	80046c0 <ism330dhcx_acceleration_raw_get>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8003258:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800325c:	e00c      	b.n	8003278 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800325e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003266:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800326e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <ISM330DHCX_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	331c      	adds	r3, #28
 8003294:	f107 0210 	add.w	r2, r7, #16
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f001 fa10 	bl	80046c0 <ism330dhcx_acceleration_raw_get>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032aa:	e03c      	b.n	8003326 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 80032ac:	f107 030c 	add.w	r3, r7, #12
 80032b0:	4619      	mov	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff fe7c 	bl	8002fb0 <ISM330DHCX_ACC_GetSensitivity>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 80032be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032c2:	e030      	b.n	8003326 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80032c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80032c8:	ee07 3a90 	vmov	s15, r3
 80032cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80032d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032dc:	ee17 2a90 	vmov	r2, s15
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80032e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80032e8:	ee07 3a90 	vmov	s15, r3
 80032ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80032f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032fc:	ee17 2a90 	vmov	r2, s15
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003304:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003310:	edd7 7a03 	vldr	s15, [r7, #12]
 8003314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800331c:	ee17 2a90 	vmov	r2, s15
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <ISM330DHCX_GYRO_Enable>:
 * @brief  Enable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	e014      	b.n	800336e <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f103 021c 	add.w	r2, r3, #28
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f000 ff78 	bl	8004248 <ism330dhcx_gy_data_rate_set>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003362:	e004      	b.n	800336e <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return ISM330DHCX_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <ISM330DHCX_GYRO_Disable>:
 * @brief  Disable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e01f      	b.n	80033cc <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f103 021c 	add.w	r2, r3, #28
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	332c      	adds	r3, #44	@ 0x2c
 8003396:	4619      	mov	r1, r3
 8003398:	4610      	mov	r0, r2
 800339a:	f001 f8c1 	bl	8004520 <ism330dhcx_gy_data_rate_get>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 80033a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033a8:	e010      	b.n	80033cc <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	331c      	adds	r3, #28
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 ff49 	bl	8004248 <ism330dhcx_gy_data_rate_set>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 80033bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033c0:	e004      	b.n	80033cc <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return ISM330DHCX_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <ISM330DHCX_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	331c      	adds	r3, #28
 80033e6:	f107 020b 	add.w	r2, r7, #11
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fed9 	bl	80041a4 <ism330dhcx_gy_full_scale_get>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033fc:	e039      	b.n	8003472 <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80033fe:	7afb      	ldrb	r3, [r7, #11]
 8003400:	2b0c      	cmp	r3, #12
 8003402:	d831      	bhi.n	8003468 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 8003404:	a201      	add	r2, pc, #4	@ (adr r2, 800340c <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 8003406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340a:	bf00      	nop
 800340c:	08003449 	.word	0x08003449
 8003410:	08003469 	.word	0x08003469
 8003414:	08003441 	.word	0x08003441
 8003418:	08003469 	.word	0x08003469
 800341c:	08003451 	.word	0x08003451
 8003420:	08003469 	.word	0x08003469
 8003424:	08003469 	.word	0x08003469
 8003428:	08003469 	.word	0x08003469
 800342c:	08003459 	.word	0x08003459
 8003430:	08003469 	.word	0x08003469
 8003434:	08003469 	.word	0x08003469
 8003438:	08003469 	.word	0x08003469
 800343c:	08003461 	.word	0x08003461
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4a0e      	ldr	r2, [pc, #56]	@ (800347c <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 8003444:	601a      	str	r2, [r3, #0]
      break;
 8003446:	e013      	b.n	8003470 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	4a0d      	ldr	r2, [pc, #52]	@ (8003480 <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 800344c:	601a      	str	r2, [r3, #0]
      break;
 800344e:	e00f      	b.n	8003470 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4a0c      	ldr	r2, [pc, #48]	@ (8003484 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8003454:	601a      	str	r2, [r3, #0]
      break;
 8003456:	e00b      	b.n	8003470 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	4a0b      	ldr	r2, [pc, #44]	@ (8003488 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 800345c:	601a      	str	r2, [r3, #0]
      break;
 800345e:	e007      	b.n	8003470 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4a0a      	ldr	r2, [pc, #40]	@ (800348c <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8003464:	601a      	str	r2, [r3, #0]
      break;
 8003466:	e003      	b.n	8003470 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 8003468:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800346c:	60fb      	str	r3, [r7, #12]
      break;
 800346e:	bf00      	nop
  }

  return ret;
 8003470:	68fb      	ldr	r3, [r7, #12]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	408c0000 	.word	0x408c0000
 8003480:	410c0000 	.word	0x410c0000
 8003484:	418c0000 	.word	0x418c0000
 8003488:	420c0000 	.word	0x420c0000
 800348c:	428c0000 	.word	0x428c0000

08003490 <ISM330DHCX_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	331c      	adds	r3, #28
 80034a2:	f107 020b 	add.w	r2, r7, #11
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f001 f839 	bl	8004520 <ism330dhcx_gy_data_rate_get>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 80034b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034b8:	e04e      	b.n	8003558 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80034ba:	7afb      	ldrb	r3, [r7, #11]
 80034bc:	2b0a      	cmp	r3, #10
 80034be:	d846      	bhi.n	800354e <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 80034c0:	a201      	add	r2, pc, #4	@ (adr r2, 80034c8 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	080034f5 	.word	0x080034f5
 80034cc:	080034ff 	.word	0x080034ff
 80034d0:	08003507 	.word	0x08003507
 80034d4:	0800350f 	.word	0x0800350f
 80034d8:	08003517 	.word	0x08003517
 80034dc:	0800351f 	.word	0x0800351f
 80034e0:	08003527 	.word	0x08003527
 80034e4:	0800352f 	.word	0x0800352f
 80034e8:	08003537 	.word	0x08003537
 80034ec:	0800353f 	.word	0x0800353f
 80034f0:	08003547 	.word	0x08003547
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
      break;
 80034fc:	e02b      	b.n	8003556 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	4a17      	ldr	r2, [pc, #92]	@ (8003560 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 8003502:	601a      	str	r2, [r3, #0]
      break;
 8003504:	e027      	b.n	8003556 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	4a16      	ldr	r2, [pc, #88]	@ (8003564 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 800350a:	601a      	str	r2, [r3, #0]
      break;
 800350c:	e023      	b.n	8003556 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	4a15      	ldr	r2, [pc, #84]	@ (8003568 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 8003512:	601a      	str	r2, [r3, #0]
      break;
 8003514:	e01f      	b.n	8003556 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	4a14      	ldr	r2, [pc, #80]	@ (800356c <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 800351a:	601a      	str	r2, [r3, #0]
      break;
 800351c:	e01b      	b.n	8003556 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	4a13      	ldr	r2, [pc, #76]	@ (8003570 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 8003522:	601a      	str	r2, [r3, #0]
      break;
 8003524:	e017      	b.n	8003556 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_417Hz:
      *Odr = 417.0f;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	4a12      	ldr	r2, [pc, #72]	@ (8003574 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 800352a:	601a      	str	r2, [r3, #0]
      break;
 800352c:	e013      	b.n	8003556 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	4a11      	ldr	r2, [pc, #68]	@ (8003578 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 8003532:	601a      	str	r2, [r3, #0]
      break;
 8003534:	e00f      	b.n	8003556 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	4a10      	ldr	r2, [pc, #64]	@ (800357c <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 800353a:	601a      	str	r2, [r3, #0]
      break;
 800353c:	e00b      	b.n	8003556 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	4a0f      	ldr	r2, [pc, #60]	@ (8003580 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 8003542:	601a      	str	r2, [r3, #0]
      break;
 8003544:	e007      	b.n	8003556 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	4a0e      	ldr	r2, [pc, #56]	@ (8003584 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 800354a:	601a      	str	r2, [r3, #0]
      break;
 800354c:	e003      	b.n	8003556 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 800354e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003552:	60fb      	str	r3, [r7, #12]
      break;
 8003554:	bf00      	nop
  }

  return ret;
 8003556:	68fb      	ldr	r3, [r7, #12]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	41480000 	.word	0x41480000
 8003564:	41d00000 	.word	0x41d00000
 8003568:	42500000 	.word	0x42500000
 800356c:	42d00000 	.word	0x42d00000
 8003570:	43500000 	.word	0x43500000
 8003574:	43d08000 	.word	0x43d08000
 8003578:	44504000 	.word	0x44504000
 800357c:	44d06000 	.word	0x44d06000
 8003580:	45505000 	.word	0x45505000
 8003584:	45d05800 	.word	0x45d05800

08003588 <ISM330DHCX_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800359a:	2b01      	cmp	r3, #1
 800359c:	d106      	bne.n	80035ac <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800359e:	ed97 0a00 	vldr	s0, [r7]
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fa32 	bl	8003a0c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 80035a8:	4603      	mov	r3, r0
 80035aa:	e005      	b.n	80035b8 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80035ac:	ed97 0a00 	vldr	s0, [r7]
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fab7 	bl	8003b24 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 80035b6:	4603      	mov	r3, r0
  }
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <ISM330DHCX_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	331c      	adds	r3, #28
 80035d2:	f107 020b 	add.w	r2, r7, #11
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fde3 	bl	80041a4 <ism330dhcx_gy_full_scale_get>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 80035e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035e8:	e03c      	b.n	8003664 <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 80035ea:	7afb      	ldrb	r3, [r7, #11]
 80035ec:	2b0c      	cmp	r3, #12
 80035ee:	d834      	bhi.n	800365a <ISM330DHCX_GYRO_GetFullScale+0x9a>
 80035f0:	a201      	add	r2, pc, #4	@ (adr r2, 80035f8 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 80035f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f6:	bf00      	nop
 80035f8:	08003635 	.word	0x08003635
 80035fc:	0800365b 	.word	0x0800365b
 8003600:	0800362d 	.word	0x0800362d
 8003604:	0800365b 	.word	0x0800365b
 8003608:	0800363d 	.word	0x0800363d
 800360c:	0800365b 	.word	0x0800365b
 8003610:	0800365b 	.word	0x0800365b
 8003614:	0800365b 	.word	0x0800365b
 8003618:	08003647 	.word	0x08003647
 800361c:	0800365b 	.word	0x0800365b
 8003620:	0800365b 	.word	0x0800365b
 8003624:	0800365b 	.word	0x0800365b
 8003628:	08003651 	.word	0x08003651
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	227d      	movs	r2, #125	@ 0x7d
 8003630:	601a      	str	r2, [r3, #0]
      break;
 8003632:	e016      	b.n	8003662 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	22fa      	movs	r2, #250	@ 0xfa
 8003638:	601a      	str	r2, [r3, #0]
      break;
 800363a:	e012      	b.n	8003662 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003642:	601a      	str	r2, [r3, #0]
      break;
 8003644:	e00d      	b.n	8003662 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800364c:	601a      	str	r2, [r3, #0]
      break;
 800364e:	e008      	b.n	8003662 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003656:	601a      	str	r2, [r3, #0]
      break;
 8003658:	e003      	b.n	8003662 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 800365a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800365e:	60fb      	str	r3, [r7, #12]
      break;
 8003660:	bf00      	nop
  }

  return ret;
 8003662:	68fb      	ldr	r3, [r7, #12]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <ISM330DHCX_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b7d      	cmp	r3, #125	@ 0x7d
 800367a:	dd12      	ble.n	80036a2 <ISM330DHCX_GYRO_SetFullScale+0x36>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2bfa      	cmp	r3, #250	@ 0xfa
 8003680:	dd0d      	ble.n	800369e <ISM330DHCX_GYRO_SetFullScale+0x32>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003688:	dd07      	ble.n	800369a <ISM330DHCX_GYRO_SetFullScale+0x2e>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003690:	dc01      	bgt.n	8003696 <ISM330DHCX_GYRO_SetFullScale+0x2a>
 8003692:	2308      	movs	r3, #8
 8003694:	e006      	b.n	80036a4 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8003696:	230c      	movs	r3, #12
 8003698:	e004      	b.n	80036a4 <ISM330DHCX_GYRO_SetFullScale+0x38>
 800369a:	2304      	movs	r3, #4
 800369c:	e002      	b.n	80036a4 <ISM330DHCX_GYRO_SetFullScale+0x38>
 800369e:	2300      	movs	r3, #0
 80036a0:	e000      	b.n	80036a4 <ISM330DHCX_GYRO_SetFullScale+0x38>
 80036a2:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 80036a4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	331c      	adds	r3, #28
 80036aa:	7bfa      	ldrb	r2, [r7, #15]
 80036ac:	4611      	mov	r1, r2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fd52 	bl	8004158 <ism330dhcx_gy_full_scale_set>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 80036ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036be:	e000      	b.n	80036c2 <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <ISM330DHCX_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	331c      	adds	r3, #28
 80036d8:	f107 0208 	add.w	r2, r7, #8
 80036dc:	4611      	mov	r1, r2
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 ffa6 	bl	8004630 <ism330dhcx_angular_rate_raw_get>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 80036ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036ee:	e00c      	b.n	800370a <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80036f0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80036f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003700:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <ISM330DHCX_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	331c      	adds	r3, #28
 8003720:	f107 0210 	add.w	r2, r7, #16
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f000 ff82 	bl	8004630 <ism330dhcx_angular_rate_raw_get>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 8003732:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003736:	e03c      	b.n	80037b2 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8003738:	f107 030c 	add.w	r3, r7, #12
 800373c:	4619      	mov	r1, r3
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff fe48 	bl	80033d4 <ISM330DHCX_GYRO_GetSensitivity>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 800374a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800374e:	e030      	b.n	80037b2 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003750:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003754:	ee07 3a90 	vmov	s15, r3
 8003758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800375c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003768:	ee17 2a90 	vmov	r2, s15
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003770:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800377c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003788:	ee17 2a90 	vmov	r2, s15
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003790:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003794:	ee07 3a90 	vmov	s15, r3
 8003798:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800379c:	edd7 7a03 	vldr	s15, [r7, #12]
 80037a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037a8:	ee17 2a90 	vmov	r2, s15
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <ISM330DHCX_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	460b      	mov	r3, r1
 80037c4:	70fb      	strb	r3, [r7, #3]
 80037c6:	4613      	mov	r3, r2
 80037c8:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f103 001c 	add.w	r0, r3, #28
 80037d0:	1cba      	adds	r2, r7, #2
 80037d2:	78f9      	ldrb	r1, [r7, #3]
 80037d4:	2301      	movs	r3, #1
 80037d6:	f000 fa75 	bl	8003cc4 <ism330dhcx_write_reg>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037e4:	e000      	b.n	80037e8 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80037fc:	edd7 7a00 	vldr	s15, [r7]
 8003800:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380c:	d801      	bhi.n	8003812 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 800380e:	2301      	movs	r3, #1
 8003810:	e058      	b.n	80038c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003812:	edd7 7a00 	vldr	s15, [r7]
 8003816:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800381a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003822:	d801      	bhi.n	8003828 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003824:	2302      	movs	r3, #2
 8003826:	e04d      	b.n	80038c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003828:	edd7 7a00 	vldr	s15, [r7]
 800382c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80038ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8003830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003838:	d801      	bhi.n	800383e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800383a:	2303      	movs	r3, #3
 800383c:	e042      	b.n	80038c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800383e:	edd7 7a00 	vldr	s15, [r7]
 8003842:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80038f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 8003846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800384a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384e:	d801      	bhi.n	8003854 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003850:	2304      	movs	r3, #4
 8003852:	e037      	b.n	80038c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003854:	edd7 7a00 	vldr	s15, [r7]
 8003858:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80038f4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 800385c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003864:	d801      	bhi.n	800386a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003866:	2305      	movs	r3, #5
 8003868:	e02c      	b.n	80038c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800386a:	edd7 7a00 	vldr	s15, [r7]
 800386e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80038f8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 8003872:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387a:	d801      	bhi.n	8003880 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 800387c:	2306      	movs	r3, #6
 800387e:	e021      	b.n	80038c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003880:	edd7 7a00 	vldr	s15, [r7]
 8003884:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80038fc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8003888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800388c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003890:	d801      	bhi.n	8003896 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8003892:	2307      	movs	r3, #7
 8003894:	e016      	b.n	80038c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003896:	edd7 7a00 	vldr	s15, [r7]
 800389a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003900 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 800389e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a6:	d801      	bhi.n	80038ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80038a8:	2308      	movs	r3, #8
 80038aa:	e00b      	b.n	80038c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80038ac:	edd7 7a00 	vldr	s15, [r7]
 80038b0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003904 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 80038b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038bc:	d801      	bhi.n	80038c2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80038be:	2309      	movs	r3, #9
 80038c0:	e000      	b.n	80038c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80038c2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80038c4:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
          :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	331c      	adds	r3, #28
 80038ca:	7bfa      	ldrb	r2, [r7, #15]
 80038cc:	4611      	mov	r1, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fa6e 	bl	8003db0 <ism330dhcx_xl_data_rate_set>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80038da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038de:	e000      	b.n	80038e2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	42500000 	.word	0x42500000
 80038f0:	42d00000 	.word	0x42d00000
 80038f4:	43500000 	.word	0x43500000
 80038f8:	43d08000 	.word	0x43d08000
 80038fc:	44504000 	.word	0x44504000
 8003900:	44d06000 	.word	0x44d06000
 8003904:	45505000 	.word	0x45505000

08003908 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003914:	edd7 7a00 	vldr	s15, [r7]
 8003918:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800391c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003924:	d801      	bhi.n	800392a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003926:	2301      	movs	r3, #1
 8003928:	e058      	b.n	80039dc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800392a:	edd7 7a00 	vldr	s15, [r7]
 800392e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8003932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393a:	d801      	bhi.n	8003940 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 800393c:	2302      	movs	r3, #2
 800393e:	e04d      	b.n	80039dc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003940:	edd7 7a00 	vldr	s15, [r7]
 8003944:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80039f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003948:	eef4 7ac7 	vcmpe.f32	s15, s14
 800394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003950:	d801      	bhi.n	8003956 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003952:	2303      	movs	r3, #3
 8003954:	e042      	b.n	80039dc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003956:	edd7 7a00 	vldr	s15, [r7]
 800395a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80039f4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 800395e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003966:	d801      	bhi.n	800396c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003968:	2304      	movs	r3, #4
 800396a:	e037      	b.n	80039dc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800396c:	edd7 7a00 	vldr	s15, [r7]
 8003970:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80039f8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8003974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397c:	d801      	bhi.n	8003982 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800397e:	2305      	movs	r3, #5
 8003980:	e02c      	b.n	80039dc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003982:	edd7 7a00 	vldr	s15, [r7]
 8003986:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80039fc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800398a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800398e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003992:	d801      	bhi.n	8003998 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003994:	2306      	movs	r3, #6
 8003996:	e021      	b.n	80039dc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003998:	edd7 7a00 	vldr	s15, [r7]
 800399c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003a00 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80039a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a8:	d801      	bhi.n	80039ae <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80039aa:	2307      	movs	r3, #7
 80039ac:	e016      	b.n	80039dc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80039ae:	edd7 7a00 	vldr	s15, [r7]
 80039b2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003a04 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80039b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039be:	d801      	bhi.n	80039c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80039c0:	2308      	movs	r3, #8
 80039c2:	e00b      	b.n	80039dc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80039c4:	edd7 7a00 	vldr	s15, [r7]
 80039c8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003a08 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 80039cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d4:	d801      	bhi.n	80039da <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80039d6:	2309      	movs	r3, #9
 80039d8:	e000      	b.n	80039dc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80039da:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
                : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
                :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	42500000 	.word	0x42500000
 80039f4:	42d00000 	.word	0x42d00000
 80039f8:	43500000 	.word	0x43500000
 80039fc:	43d08000 	.word	0x43d08000
 8003a00:	44504000 	.word	0x44504000
 8003a04:	44d06000 	.word	0x44d06000
 8003a08:	45505000 	.word	0x45505000

08003a0c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003a18:	edd7 7a00 	vldr	s15, [r7]
 8003a1c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a28:	d801      	bhi.n	8003a2e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e058      	b.n	8003ae0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003a2e:	edd7 7a00 	vldr	s15, [r7]
 8003a32:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8003a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3e:	d801      	bhi.n	8003a44 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e04d      	b.n	8003ae0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003a44:	edd7 7a00 	vldr	s15, [r7]
 8003a48:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003b08 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8003a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a54:	d801      	bhi.n	8003a5a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8003a56:	2303      	movs	r3, #3
 8003a58:	e042      	b.n	8003ae0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003a5a:	edd7 7a00 	vldr	s15, [r7]
 8003a5e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8003b0c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8003a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6a:	d801      	bhi.n	8003a70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	e037      	b.n	8003ae0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003a70:	edd7 7a00 	vldr	s15, [r7]
 8003a74:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8003b10 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8003a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a80:	d801      	bhi.n	8003a86 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8003a82:	2305      	movs	r3, #5
 8003a84:	e02c      	b.n	8003ae0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003a86:	edd7 7a00 	vldr	s15, [r7]
 8003a8a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003b14 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8003a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a96:	d801      	bhi.n	8003a9c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8003a98:	2306      	movs	r3, #6
 8003a9a:	e021      	b.n	8003ae0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003a9c:	edd7 7a00 	vldr	s15, [r7]
 8003aa0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003b18 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8003aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aac:	d801      	bhi.n	8003ab2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8003aae:	2307      	movs	r3, #7
 8003ab0:	e016      	b.n	8003ae0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003ab2:	edd7 7a00 	vldr	s15, [r7]
 8003ab6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003b1c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8003aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac2:	d801      	bhi.n	8003ac8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	e00b      	b.n	8003ae0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003ac8:	edd7 7a00 	vldr	s15, [r7]
 8003acc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003b20 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8003ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad8:	d801      	bhi.n	8003ade <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8003ada:	2309      	movs	r3, #9
 8003adc:	e000      	b.n	8003ae0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003ade:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8003ae0:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
          :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	331c      	adds	r3, #28
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fbac 	bl	8004248 <ism330dhcx_gy_data_rate_set>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003afa:	e000      	b.n	8003afe <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	42500000 	.word	0x42500000
 8003b0c:	42d00000 	.word	0x42d00000
 8003b10:	43500000 	.word	0x43500000
 8003b14:	43d08000 	.word	0x43d08000
 8003b18:	44504000 	.word	0x44504000
 8003b1c:	44d06000 	.word	0x44d06000
 8003b20:	45505000 	.word	0x45505000

08003b24 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003b30:	edd7 7a00 	vldr	s15, [r7]
 8003b34:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b40:	d801      	bhi.n	8003b46 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e058      	b.n	8003bf8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003b46:	edd7 7a00 	vldr	s15, [r7]
 8003b4a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8003b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b56:	d801      	bhi.n	8003b5c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e04d      	b.n	8003bf8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003b5c:	edd7 7a00 	vldr	s15, [r7]
 8003b60:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003c0c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8003b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6c:	d801      	bhi.n	8003b72 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e042      	b.n	8003bf8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003b72:	edd7 7a00 	vldr	s15, [r7]
 8003b76:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8003c10 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8003b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b82:	d801      	bhi.n	8003b88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8003b84:	2304      	movs	r3, #4
 8003b86:	e037      	b.n	8003bf8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003b88:	edd7 7a00 	vldr	s15, [r7]
 8003b8c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003c14 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8003b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b98:	d801      	bhi.n	8003b9e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8003b9a:	2305      	movs	r3, #5
 8003b9c:	e02c      	b.n	8003bf8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003b9e:	edd7 7a00 	vldr	s15, [r7]
 8003ba2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003c18 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8003ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bae:	d801      	bhi.n	8003bb4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8003bb0:	2306      	movs	r3, #6
 8003bb2:	e021      	b.n	8003bf8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003bb4:	edd7 7a00 	vldr	s15, [r7]
 8003bb8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003c1c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8003bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc4:	d801      	bhi.n	8003bca <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8003bc6:	2307      	movs	r3, #7
 8003bc8:	e016      	b.n	8003bf8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003bca:	edd7 7a00 	vldr	s15, [r7]
 8003bce:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003c20 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8003bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bda:	d801      	bhi.n	8003be0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8003bdc:	2308      	movs	r3, #8
 8003bde:	e00b      	b.n	8003bf8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003be0:	edd7 7a00 	vldr	s15, [r7]
 8003be4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003c24 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8003be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf0:	d801      	bhi.n	8003bf6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8003bf2:	2309      	movs	r3, #9
 8003bf4:	e000      	b.n	8003bf8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003bf6:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
                 : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
                 :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	42500000 	.word	0x42500000
 8003c10:	42d00000 	.word	0x42d00000
 8003c14:	43500000 	.word	0x43500000
 8003c18:	43d08000 	.word	0x43d08000
 8003c1c:	44504000 	.word	0x44504000
 8003c20:	44d06000 	.word	0x44d06000
 8003c24:	45505000 	.word	0x45505000

08003c28 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	461a      	mov	r2, r3
 8003c34:	460b      	mov	r3, r1
 8003c36:	72fb      	strb	r3, [r7, #11]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	695c      	ldr	r4, [r3, #20]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	7b1b      	ldrb	r3, [r3, #12]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	7afb      	ldrb	r3, [r7, #11]
 8003c4c:	b299      	uxth	r1, r3
 8003c4e:	893b      	ldrh	r3, [r7, #8]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	47a0      	blx	r4
 8003c54:	4603      	mov	r3, r0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd90      	pop	{r4, r7, pc}

08003c5e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003c5e:	b590      	push	{r4, r7, lr}
 8003c60:	b087      	sub	sp, #28
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	72fb      	strb	r3, [r7, #11]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	691c      	ldr	r4, [r3, #16]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	7b1b      	ldrb	r3, [r3, #12]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	7afb      	ldrb	r3, [r7, #11]
 8003c82:	b299      	uxth	r1, r3
 8003c84:	893b      	ldrh	r3, [r7, #8]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	47a0      	blx	r4
 8003c8a:	4603      	mov	r3, r0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd90      	pop	{r4, r7, pc}

08003c94 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003c94:	b590      	push	{r4, r7, lr}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	607a      	str	r2, [r7, #4]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	72fb      	strb	r3, [r7, #11]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	685c      	ldr	r4, [r3, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6898      	ldr	r0, [r3, #8]
 8003cb0:	893b      	ldrh	r3, [r7, #8]
 8003cb2:	7af9      	ldrb	r1, [r7, #11]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	47a0      	blx	r4
 8003cb8:	6178      	str	r0, [r7, #20]
  return ret;
 8003cba:	697b      	ldr	r3, [r7, #20]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd90      	pop	{r4, r7, pc}

08003cc4 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	607a      	str	r2, [r7, #4]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	72fb      	strb	r3, [r7, #11]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681c      	ldr	r4, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6898      	ldr	r0, [r3, #8]
 8003ce0:	893b      	ldrh	r3, [r7, #8]
 8003ce2:	7af9      	ldrb	r1, [r7, #11]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	47a0      	blx	r4
 8003ce8:	6178      	str	r0, [r7, #20]
  return ret;
 8003cea:	697b      	ldr	r3, [r7, #20]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd90      	pop	{r4, r7, pc}

08003cf4 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003d00:	f107 0208 	add.w	r2, r7, #8
 8003d04:	2301      	movs	r3, #1
 8003d06:	2110      	movs	r1, #16
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ffc3 	bl	8003c94 <ism330dhcx_read_reg>
 8003d0e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0) {
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10f      	bne.n	8003d36 <ism330dhcx_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	7a3b      	ldrb	r3, [r7, #8]
 8003d20:	f362 0383 	bfi	r3, r2, #2, #2
 8003d24:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003d26:	f107 0208 	add.w	r2, r7, #8
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	2110      	movs	r1, #16
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff ffc8 	bl	8003cc4 <ism330dhcx_write_reg>
 8003d34:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003d36:	68fb      	ldr	r3, [r7, #12]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003d4a:	f107 0208 	add.w	r2, r7, #8
 8003d4e:	2301      	movs	r3, #1
 8003d50:	2110      	movs	r1, #16
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff ff9e 	bl	8003c94 <ism330dhcx_read_reg>
 8003d58:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl) {
 8003d5a:	7a3b      	ldrb	r3, [r7, #8]
 8003d5c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d81a      	bhi.n	8003d9c <ism330dhcx_xl_full_scale_get+0x5c>
 8003d66:	a201      	add	r2, pc, #4	@ (adr r2, 8003d6c <ism330dhcx_xl_full_scale_get+0x2c>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d85 	.word	0x08003d85
 8003d74:	08003d8d 	.word	0x08003d8d
 8003d78:	08003d95 	.word	0x08003d95
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	701a      	strb	r2, [r3, #0]
      break;
 8003d82:	e00f      	b.n	8003da4 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]
      break;
 8003d8a:	e00b      	b.n	8003da4 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	701a      	strb	r2, [r3, #0]
      break;
 8003d92:	e007      	b.n	8003da4 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2203      	movs	r2, #3
 8003d98:	701a      	strb	r2, [r3, #0]
      break;
 8003d9a:	e003      	b.n	8003da4 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
      break;
 8003da2:	bf00      	nop
  }

  return ret;
 8003da4:	68fb      	ldr	r3, [r7, #12]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop

08003db0 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8003dc0:	f107 030c 	add.w	r3, r7, #12
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fd91 	bl	80048ee <ism330dhcx_fsm_enable_get>
 8003dcc:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f040 80c4 	bne.w	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003dd6:	7b3b      	ldrb	r3, [r7, #12]
 8003dd8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ddc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003dde:	7b3b      	ldrb	r3, [r7, #12]
 8003de0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003de4:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003de6:	4313      	orrs	r3, r2
 8003de8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003dea:	7b3b      	ldrb	r3, [r7, #12]
 8003dec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003df0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003df2:	4313      	orrs	r3, r2
 8003df4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003df6:	7b3b      	ldrb	r3, [r7, #12]
 8003df8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003dfc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003e02:	7b3b      	ldrb	r3, [r7, #12]
 8003e04:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e08:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003e0e:	7b3b      	ldrb	r3, [r7, #12]
 8003e10:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003e14:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003e16:	4313      	orrs	r3, r2
 8003e18:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003e1a:	7b3b      	ldrb	r3, [r7, #12]
 8003e1c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e20:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003e22:	4313      	orrs	r3, r2
 8003e24:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003e26:	7b3b      	ldrb	r3, [r7, #12]
 8003e28:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003e2c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003e32:	7b7b      	ldrb	r3, [r7, #13]
 8003e34:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e38:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003e3e:	7b7b      	ldrb	r3, [r7, #13]
 8003e40:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e44:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003e46:	4313      	orrs	r3, r2
 8003e48:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003e4a:	7b7b      	ldrb	r3, [r7, #13]
 8003e4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003e50:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003e52:	4313      	orrs	r3, r2
 8003e54:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003e56:	7b7b      	ldrb	r3, [r7, #13]
 8003e58:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003e5c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003e62:	7b7b      	ldrb	r3, [r7, #13]
 8003e64:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e68:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003e6e:	7b7b      	ldrb	r3, [r7, #13]
 8003e70:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003e74:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003e76:	4313      	orrs	r3, r2
 8003e78:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8003e7a:	7b7b      	ldrb	r3, [r7, #13]
 8003e7c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e80:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003e82:	4313      	orrs	r3, r2
 8003e84:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8003e86:	7b7b      	ldrb	r3, [r7, #13]
 8003e88:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003e8c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d163      	bne.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8003e96:	f107 030b 	add.w	r3, r7, #11
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fd53 	bl	8004948 <ism330dhcx_fsm_data_rate_get>
 8003ea2:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d159      	bne.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d853      	bhi.n	8003f58 <ism330dhcx_xl_data_rate_set+0x1a8>
 8003eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb8 <ism330dhcx_xl_data_rate_set+0x108>)
 8003eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb6:	bf00      	nop
 8003eb8:	08003ec9 	.word	0x08003ec9
 8003ebc:	08003edb 	.word	0x08003edb
 8003ec0:	08003ef9 	.word	0x08003ef9
 8003ec4:	08003f23 	.word	0x08003f23
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d102      	bne.n	8003ed4 <ism330dhcx_xl_data_rate_set+0x124>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003ed2:	e044      	b.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	75fb      	strb	r3, [r7, #23]
            break;
 8003ed8:	e041      	b.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d102      	bne.n	8003ee6 <ism330dhcx_xl_data_rate_set+0x136>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003ee4:	e03b      	b.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d102      	bne.n	8003ef2 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003eec:	2302      	movs	r3, #2
 8003eee:	75fb      	strb	r3, [r7, #23]
            break;
 8003ef0:	e035      	b.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	75fb      	strb	r3, [r7, #23]
            break;
 8003ef6:	e032      	b.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <ism330dhcx_xl_data_rate_set+0x154>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003efe:	2303      	movs	r3, #3
 8003f00:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003f02:	e02c      	b.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d102      	bne.n	8003f10 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	75fb      	strb	r3, [r7, #23]
            break;
 8003f0e:	e026      	b.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d102      	bne.n	8003f1c <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003f16:	2303      	movs	r3, #3
 8003f18:	75fb      	strb	r3, [r7, #23]
            break;
 8003f1a:	e020      	b.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	75fb      	strb	r3, [r7, #23]
            break;
 8003f20:	e01d      	b.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <ism330dhcx_xl_data_rate_set+0x17e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003f28:	2304      	movs	r3, #4
 8003f2a:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003f2c:	e017      	b.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d102      	bne.n	8003f3a <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003f34:	2304      	movs	r3, #4
 8003f36:	75fb      	strb	r3, [r7, #23]
            break;
 8003f38:	e011      	b.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d102      	bne.n	8003f46 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003f40:	2304      	movs	r3, #4
 8003f42:	75fb      	strb	r3, [r7, #23]
            break;
 8003f44:	e00b      	b.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d102      	bne.n	8003f52 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	75fb      	strb	r3, [r7, #23]
            break;
 8003f50:	e005      	b.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003f52:	78fb      	ldrb	r3, [r7, #3]
 8003f54:	75fb      	strb	r3, [r7, #23]
            break;
 8003f56:	e002      	b.n	8003f5e <ism330dhcx_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	75fb      	strb	r3, [r7, #23]
            break;
 8003f5c:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d16c      	bne.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8003f68:	f107 030a 	add.w	r3, r7, #10
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fd32 	bl	80049d8 <ism330dhcx_mlc_get>
 8003f74:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 8003f76:	7abb      	ldrb	r3, [r7, #10]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d162      	bne.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8003f7c:	f107 0309 	add.w	r3, r7, #9
 8003f80:	4619      	mov	r1, r3
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fd52 	bl	8004a2c <ism330dhcx_mlc_data_rate_get>
 8003f88:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d158      	bne.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>
        switch (mlc_odr) {
 8003f90:	7a7b      	ldrb	r3, [r7, #9]
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d852      	bhi.n	800403c <ism330dhcx_xl_data_rate_set+0x28c>
 8003f96:	a201      	add	r2, pc, #4	@ (adr r2, 8003f9c <ism330dhcx_xl_data_rate_set+0x1ec>)
 8003f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9c:	08003fad 	.word	0x08003fad
 8003fa0:	08003fbf 	.word	0x08003fbf
 8003fa4:	08003fdd 	.word	0x08003fdd
 8003fa8:	08004007 	.word	0x08004007
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <ism330dhcx_xl_data_rate_set+0x208>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003fb6:	e044      	b.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	75fb      	strb	r3, [r7, #23]
            break;
 8003fbc:	e041      	b.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d102      	bne.n	8003fca <ism330dhcx_xl_data_rate_set+0x21a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003fc8:	e03b      	b.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d102      	bne.n	8003fd6 <ism330dhcx_xl_data_rate_set+0x226>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	75fb      	strb	r3, [r7, #23]
            break;
 8003fd4:	e035      	b.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	75fb      	strb	r3, [r7, #23]
            break;
 8003fda:	e032      	b.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d102      	bne.n	8003fe8 <ism330dhcx_xl_data_rate_set+0x238>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003fe6:	e02c      	b.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d102      	bne.n	8003ff4 <ism330dhcx_xl_data_rate_set+0x244>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	75fb      	strb	r3, [r7, #23]
            break;
 8003ff2:	e026      	b.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d102      	bne.n	8004000 <ism330dhcx_xl_data_rate_set+0x250>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	75fb      	strb	r3, [r7, #23]
            break;
 8003ffe:	e020      	b.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	75fb      	strb	r3, [r7, #23]
            break;
 8004004:	e01d      	b.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d102      	bne.n	8004012 <ism330dhcx_xl_data_rate_set+0x262>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800400c:	2304      	movs	r3, #4
 800400e:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004010:	e017      	b.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d102      	bne.n	800401e <ism330dhcx_xl_data_rate_set+0x26e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004018:	2304      	movs	r3, #4
 800401a:	75fb      	strb	r3, [r7, #23]
            break;
 800401c:	e011      	b.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d102      	bne.n	800402a <ism330dhcx_xl_data_rate_set+0x27a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004024:	2304      	movs	r3, #4
 8004026:	75fb      	strb	r3, [r7, #23]
            break;
 8004028:	e00b      	b.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d102      	bne.n	8004036 <ism330dhcx_xl_data_rate_set+0x286>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004030:	2304      	movs	r3, #4
 8004032:	75fb      	strb	r3, [r7, #23]
            break;
 8004034:	e005      	b.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	75fb      	strb	r3, [r7, #23]
            break;
 800403a:	e002      	b.n	8004042 <ism330dhcx_xl_data_rate_set+0x292>

          default:
            odr_xl = val;
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	75fb      	strb	r3, [r7, #23]
            break;
 8004040:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0) {
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d107      	bne.n	8004058 <ism330dhcx_xl_data_rate_set+0x2a8>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004048:	f107 0208 	add.w	r2, r7, #8
 800404c:	2301      	movs	r3, #1
 800404e:	2110      	movs	r1, #16
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff fe1f 	bl	8003c94 <ism330dhcx_read_reg>
 8004056:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0) {
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10f      	bne.n	800407e <ism330dhcx_xl_data_rate_set+0x2ce>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800405e:	7dfb      	ldrb	r3, [r7, #23]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	b2da      	uxtb	r2, r3
 8004066:	7a3b      	ldrb	r3, [r7, #8]
 8004068:	f362 1307 	bfi	r3, r2, #4, #4
 800406c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 800406e:	f107 0208 	add.w	r2, r7, #8
 8004072:	2301      	movs	r3, #1
 8004074:	2110      	movs	r1, #16
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff fe24 	bl	8003cc4 <ism330dhcx_write_reg>
 800407c:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800407e:	693b      	ldr	r3, [r7, #16]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004092:	f107 0208 	add.w	r2, r7, #8
 8004096:	2301      	movs	r3, #1
 8004098:	2110      	movs	r1, #16
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fdfa 	bl	8003c94 <ism330dhcx_read_reg>
 80040a0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl) {
 80040a2:	7a3b      	ldrb	r3, [r7, #8]
 80040a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b0b      	cmp	r3, #11
 80040ac:	d84a      	bhi.n	8004144 <ism330dhcx_xl_data_rate_get+0xbc>
 80040ae:	a201      	add	r2, pc, #4	@ (adr r2, 80040b4 <ism330dhcx_xl_data_rate_get+0x2c>)
 80040b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b4:	080040e5 	.word	0x080040e5
 80040b8:	080040ed 	.word	0x080040ed
 80040bc:	080040f5 	.word	0x080040f5
 80040c0:	080040fd 	.word	0x080040fd
 80040c4:	08004105 	.word	0x08004105
 80040c8:	0800410d 	.word	0x0800410d
 80040cc:	08004115 	.word	0x08004115
 80040d0:	0800411d 	.word	0x0800411d
 80040d4:	08004125 	.word	0x08004125
 80040d8:	0800412d 	.word	0x0800412d
 80040dc:	08004135 	.word	0x08004135
 80040e0:	0800413d 	.word	0x0800413d
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
      break;
 80040ea:	e02f      	b.n	800414c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]
      break;
 80040f2:	e02b      	b.n	800414c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2202      	movs	r2, #2
 80040f8:	701a      	strb	r2, [r3, #0]
      break;
 80040fa:	e027      	b.n	800414c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2203      	movs	r2, #3
 8004100:	701a      	strb	r2, [r3, #0]
      break;
 8004102:	e023      	b.n	800414c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2204      	movs	r2, #4
 8004108:	701a      	strb	r2, [r3, #0]
      break;
 800410a:	e01f      	b.n	800414c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2205      	movs	r2, #5
 8004110:	701a      	strb	r2, [r3, #0]
      break;
 8004112:	e01b      	b.n	800414c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_417Hz:
      *val = ISM330DHCX_XL_ODR_417Hz;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2206      	movs	r2, #6
 8004118:	701a      	strb	r2, [r3, #0]
      break;
 800411a:	e017      	b.n	800414c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2207      	movs	r2, #7
 8004120:	701a      	strb	r2, [r3, #0]
      break;
 8004122:	e013      	b.n	800414c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1667Hz:
      *val = ISM330DHCX_XL_ODR_1667Hz;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2208      	movs	r2, #8
 8004128:	701a      	strb	r2, [r3, #0]
      break;
 800412a:	e00f      	b.n	800414c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3333Hz:
      *val = ISM330DHCX_XL_ODR_3333Hz;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2209      	movs	r2, #9
 8004130:	701a      	strb	r2, [r3, #0]
      break;
 8004132:	e00b      	b.n	800414c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	220a      	movs	r2, #10
 8004138:	701a      	strb	r2, [r3, #0]
      break;
 800413a:	e007      	b.n	800414c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6Hz5:
      *val = ISM330DHCX_XL_ODR_6Hz5;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	220b      	movs	r2, #11
 8004140:	701a      	strb	r2, [r3, #0]
      break;
 8004142:	e003      	b.n	800414c <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
      break;
 800414a:	bf00      	nop
  }

  return ret;
 800414c:	68fb      	ldr	r3, [r7, #12]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop

08004158 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004164:	f107 0208 	add.w	r2, r7, #8
 8004168:	2301      	movs	r3, #1
 800416a:	2111      	movs	r1, #17
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fd91 	bl	8003c94 <ism330dhcx_read_reg>
 8004172:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0) {
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <ism330dhcx_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	b2da      	uxtb	r2, r3
 8004182:	7a3b      	ldrb	r3, [r7, #8]
 8004184:	f362 0303 	bfi	r3, r2, #0, #4
 8004188:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 800418a:	f107 0208 	add.w	r2, r7, #8
 800418e:	2301      	movs	r3, #1
 8004190:	2111      	movs	r1, #17
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff fd96 	bl	8003cc4 <ism330dhcx_write_reg>
 8004198:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80041ae:	f107 0208 	add.w	r2, r7, #8
 80041b2:	2301      	movs	r3, #1
 80041b4:	2111      	movs	r1, #17
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff fd6c 	bl	8003c94 <ism330dhcx_read_reg>
 80041bc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g) {
 80041be:	7a3b      	ldrb	r3, [r7, #8]
 80041c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b0c      	cmp	r3, #12
 80041c8:	d834      	bhi.n	8004234 <ism330dhcx_gy_full_scale_get+0x90>
 80041ca:	a201      	add	r2, pc, #4	@ (adr r2, 80041d0 <ism330dhcx_gy_full_scale_get+0x2c>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	0800420d 	.word	0x0800420d
 80041d4:	0800422d 	.word	0x0800422d
 80041d8:	08004205 	.word	0x08004205
 80041dc:	08004235 	.word	0x08004235
 80041e0:	08004215 	.word	0x08004215
 80041e4:	08004235 	.word	0x08004235
 80041e8:	08004235 	.word	0x08004235
 80041ec:	08004235 	.word	0x08004235
 80041f0:	0800421d 	.word	0x0800421d
 80041f4:	08004235 	.word	0x08004235
 80041f8:	08004235 	.word	0x08004235
 80041fc:	08004235 	.word	0x08004235
 8004200:	08004225 	.word	0x08004225
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2202      	movs	r2, #2
 8004208:	701a      	strb	r2, [r3, #0]
      break;
 800420a:	e017      	b.n	800423c <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
      break;
 8004212:	e013      	b.n	800423c <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2204      	movs	r2, #4
 8004218:	701a      	strb	r2, [r3, #0]
      break;
 800421a:	e00f      	b.n	800423c <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2208      	movs	r2, #8
 8004220:	701a      	strb	r2, [r3, #0]
      break;
 8004222:	e00b      	b.n	800423c <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	220c      	movs	r2, #12
 8004228:	701a      	strb	r2, [r3, #0]
      break;
 800422a:	e007      	b.n	800423c <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2201      	movs	r2, #1
 8004230:	701a      	strb	r2, [r3, #0]
      break;
 8004232:	e003      	b.n	800423c <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2202      	movs	r2, #2
 8004238:	701a      	strb	r2, [r3, #0]
      break;
 800423a:	bf00      	nop
  }

  return ret;
 800423c:	68fb      	ldr	r3, [r7, #12]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop

08004248 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8004258:	f107 030c 	add.w	r3, r7, #12
 800425c:	4619      	mov	r1, r3
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fb45 	bl	80048ee <ism330dhcx_fsm_enable_get>
 8004264:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f040 80c4 	bne.w	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800426e:	7b3b      	ldrb	r3, [r7, #12]
 8004270:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004274:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004276:	7b3b      	ldrb	r3, [r7, #12]
 8004278:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800427c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800427e:	4313      	orrs	r3, r2
 8004280:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004282:	7b3b      	ldrb	r3, [r7, #12]
 8004284:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004288:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800428a:	4313      	orrs	r3, r2
 800428c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800428e:	7b3b      	ldrb	r3, [r7, #12]
 8004290:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004294:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004296:	4313      	orrs	r3, r2
 8004298:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 800429a:	7b3b      	ldrb	r3, [r7, #12]
 800429c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80042a0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80042a2:	4313      	orrs	r3, r2
 80042a4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80042a6:	7b3b      	ldrb	r3, [r7, #12]
 80042a8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80042ac:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80042ae:	4313      	orrs	r3, r2
 80042b0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80042b2:	7b3b      	ldrb	r3, [r7, #12]
 80042b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80042b8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80042ba:	4313      	orrs	r3, r2
 80042bc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80042be:	7b3b      	ldrb	r3, [r7, #12]
 80042c0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80042c4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80042c6:	4313      	orrs	r3, r2
 80042c8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80042ca:	7b7b      	ldrb	r3, [r7, #13]
 80042cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80042d0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80042d2:	4313      	orrs	r3, r2
 80042d4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80042d6:	7b7b      	ldrb	r3, [r7, #13]
 80042d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80042dc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80042de:	4313      	orrs	r3, r2
 80042e0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80042e2:	7b7b      	ldrb	r3, [r7, #13]
 80042e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80042e8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80042ea:	4313      	orrs	r3, r2
 80042ec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80042ee:	7b7b      	ldrb	r3, [r7, #13]
 80042f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80042f4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80042f6:	4313      	orrs	r3, r2
 80042f8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80042fa:	7b7b      	ldrb	r3, [r7, #13]
 80042fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004300:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8004302:	4313      	orrs	r3, r2
 8004304:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8004306:	7b7b      	ldrb	r3, [r7, #13]
 8004308:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800430c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800430e:	4313      	orrs	r3, r2
 8004310:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8004312:	7b7b      	ldrb	r3, [r7, #13]
 8004314:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004318:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800431a:	4313      	orrs	r3, r2
 800431c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 800431e:	7b7b      	ldrb	r3, [r7, #13]
 8004320:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004324:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8004326:	4313      	orrs	r3, r2
 8004328:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800432a:	2b01      	cmp	r3, #1
 800432c:	d163      	bne.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 800432e:	f107 030b 	add.w	r3, r7, #11
 8004332:	4619      	mov	r1, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fb07 	bl	8004948 <ism330dhcx_fsm_data_rate_get>
 800433a:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d159      	bne.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8004342:	7afb      	ldrb	r3, [r7, #11]
 8004344:	2b03      	cmp	r3, #3
 8004346:	d853      	bhi.n	80043f0 <ism330dhcx_gy_data_rate_set+0x1a8>
 8004348:	a201      	add	r2, pc, #4	@ (adr r2, 8004350 <ism330dhcx_gy_data_rate_set+0x108>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004361 	.word	0x08004361
 8004354:	08004373 	.word	0x08004373
 8004358:	08004391 	.word	0x08004391
 800435c:	080043bb 	.word	0x080043bb
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8004366:	2301      	movs	r3, #1
 8004368:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800436a:	e044      	b.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	75fb      	strb	r3, [r7, #23]
            break;
 8004370:	e041      	b.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d102      	bne.n	800437e <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004378:	2302      	movs	r3, #2
 800437a:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800437c:	e03b      	b.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d102      	bne.n	800438a <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004384:	2302      	movs	r3, #2
 8004386:	75fb      	strb	r3, [r7, #23]
            break;
 8004388:	e035      	b.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	75fb      	strb	r3, [r7, #23]
            break;
 800438e:	e032      	b.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d102      	bne.n	800439c <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004396:	2303      	movs	r3, #3
 8004398:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800439a:	e02c      	b.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d102      	bne.n	80043a8 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80043a2:	2303      	movs	r3, #3
 80043a4:	75fb      	strb	r3, [r7, #23]
            break;
 80043a6:	e026      	b.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d102      	bne.n	80043b4 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80043ae:	2303      	movs	r3, #3
 80043b0:	75fb      	strb	r3, [r7, #23]
            break;
 80043b2:	e020      	b.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	75fb      	strb	r3, [r7, #23]
            break;
 80043b8:	e01d      	b.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80043ba:	78fb      	ldrb	r3, [r7, #3]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d102      	bne.n	80043c6 <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80043c0:	2304      	movs	r3, #4
 80043c2:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80043c4:	e017      	b.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d102      	bne.n	80043d2 <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80043cc:	2304      	movs	r3, #4
 80043ce:	75fb      	strb	r3, [r7, #23]
            break;
 80043d0:	e011      	b.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d102      	bne.n	80043de <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80043d8:	2304      	movs	r3, #4
 80043da:	75fb      	strb	r3, [r7, #23]
            break;
 80043dc:	e00b      	b.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d102      	bne.n	80043ea <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80043e4:	2304      	movs	r3, #4
 80043e6:	75fb      	strb	r3, [r7, #23]
            break;
 80043e8:	e005      	b.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	75fb      	strb	r3, [r7, #23]
            break;
 80043ee:	e002      	b.n	80043f6 <ism330dhcx_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	75fb      	strb	r3, [r7, #23]
            break;
 80043f4:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d16c      	bne.n	80044da <ism330dhcx_gy_data_rate_set+0x292>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8004400:	f107 030a 	add.w	r3, r7, #10
 8004404:	4619      	mov	r1, r3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fae6 	bl	80049d8 <ism330dhcx_mlc_get>
 800440c:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 800440e:	7abb      	ldrb	r3, [r7, #10]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d162      	bne.n	80044da <ism330dhcx_gy_data_rate_set+0x292>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8004414:	f107 0309 	add.w	r3, r7, #9
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fb06 	bl	8004a2c <ism330dhcx_mlc_data_rate_get>
 8004420:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d158      	bne.n	80044da <ism330dhcx_gy_data_rate_set+0x292>
        switch (mlc_odr) {
 8004428:	7a7b      	ldrb	r3, [r7, #9]
 800442a:	2b03      	cmp	r3, #3
 800442c:	d852      	bhi.n	80044d4 <ism330dhcx_gy_data_rate_set+0x28c>
 800442e:	a201      	add	r2, pc, #4	@ (adr r2, 8004434 <ism330dhcx_gy_data_rate_set+0x1ec>)
 8004430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004434:	08004445 	.word	0x08004445
 8004438:	08004457 	.word	0x08004457
 800443c:	08004475 	.word	0x08004475
 8004440:	0800449f 	.word	0x0800449f
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d102      	bne.n	8004450 <ism330dhcx_gy_data_rate_set+0x208>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800444e:	e044      	b.n	80044da <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	75fb      	strb	r3, [r7, #23]
            break;
 8004454:	e041      	b.n	80044da <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d102      	bne.n	8004462 <ism330dhcx_gy_data_rate_set+0x21a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800445c:	2302      	movs	r3, #2
 800445e:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004460:	e03b      	b.n	80044da <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d102      	bne.n	800446e <ism330dhcx_gy_data_rate_set+0x226>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004468:	2302      	movs	r3, #2
 800446a:	75fb      	strb	r3, [r7, #23]
            break;
 800446c:	e035      	b.n	80044da <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	75fb      	strb	r3, [r7, #23]
            break;
 8004472:	e032      	b.n	80044da <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d102      	bne.n	8004480 <ism330dhcx_gy_data_rate_set+0x238>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800447a:	2303      	movs	r3, #3
 800447c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800447e:	e02c      	b.n	80044da <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d102      	bne.n	800448c <ism330dhcx_gy_data_rate_set+0x244>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004486:	2303      	movs	r3, #3
 8004488:	75fb      	strb	r3, [r7, #23]
            break;
 800448a:	e026      	b.n	80044da <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d102      	bne.n	8004498 <ism330dhcx_gy_data_rate_set+0x250>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004492:	2303      	movs	r3, #3
 8004494:	75fb      	strb	r3, [r7, #23]
            break;
 8004496:	e020      	b.n	80044da <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	75fb      	strb	r3, [r7, #23]
            break;
 800449c:	e01d      	b.n	80044da <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <ism330dhcx_gy_data_rate_set+0x262>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80044a4:	2304      	movs	r3, #4
 80044a6:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80044a8:	e017      	b.n	80044da <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d102      	bne.n	80044b6 <ism330dhcx_gy_data_rate_set+0x26e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80044b0:	2304      	movs	r3, #4
 80044b2:	75fb      	strb	r3, [r7, #23]
            break;
 80044b4:	e011      	b.n	80044da <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d102      	bne.n	80044c2 <ism330dhcx_gy_data_rate_set+0x27a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80044bc:	2304      	movs	r3, #4
 80044be:	75fb      	strb	r3, [r7, #23]
            break;
 80044c0:	e00b      	b.n	80044da <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d102      	bne.n	80044ce <ism330dhcx_gy_data_rate_set+0x286>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80044c8:	2304      	movs	r3, #4
 80044ca:	75fb      	strb	r3, [r7, #23]
            break;
 80044cc:	e005      	b.n	80044da <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	75fb      	strb	r3, [r7, #23]
            break;
 80044d2:	e002      	b.n	80044da <ism330dhcx_gy_data_rate_set+0x292>

          default:
            odr_gy = val;
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	75fb      	strb	r3, [r7, #23]
            break;
 80044d8:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0) {
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d107      	bne.n	80044f0 <ism330dhcx_gy_data_rate_set+0x2a8>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80044e0:	f107 0208 	add.w	r2, r7, #8
 80044e4:	2301      	movs	r3, #1
 80044e6:	2111      	movs	r1, #17
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff fbd3 	bl	8003c94 <ism330dhcx_read_reg>
 80044ee:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0) {
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10f      	bne.n	8004516 <ism330dhcx_gy_data_rate_set+0x2ce>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	7a3b      	ldrb	r3, [r7, #8]
 8004500:	f362 1307 	bfi	r3, r2, #4, #4
 8004504:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8004506:	f107 0208 	add.w	r2, r7, #8
 800450a:	2301      	movs	r3, #1
 800450c:	2111      	movs	r1, #17
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff fbd8 	bl	8003cc4 <ism330dhcx_write_reg>
 8004514:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8004516:	693b      	ldr	r3, [r7, #16]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800452a:	f107 0208 	add.w	r2, r7, #8
 800452e:	2301      	movs	r3, #1
 8004530:	2111      	movs	r1, #17
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff fbae 	bl	8003c94 <ism330dhcx_read_reg>
 8004538:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g) {
 800453a:	7a3b      	ldrb	r3, [r7, #8]
 800453c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b0a      	cmp	r3, #10
 8004544:	d844      	bhi.n	80045d0 <ism330dhcx_gy_data_rate_get+0xb0>
 8004546:	a201      	add	r2, pc, #4	@ (adr r2, 800454c <ism330dhcx_gy_data_rate_get+0x2c>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	08004579 	.word	0x08004579
 8004550:	08004581 	.word	0x08004581
 8004554:	08004589 	.word	0x08004589
 8004558:	08004591 	.word	0x08004591
 800455c:	08004599 	.word	0x08004599
 8004560:	080045a1 	.word	0x080045a1
 8004564:	080045a9 	.word	0x080045a9
 8004568:	080045b1 	.word	0x080045b1
 800456c:	080045b9 	.word	0x080045b9
 8004570:	080045c1 	.word	0x080045c1
 8004574:	080045c9 	.word	0x080045c9
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
      break;
 800457e:	e02b      	b.n	80045d8 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2201      	movs	r2, #1
 8004584:	701a      	strb	r2, [r3, #0]
      break;
 8004586:	e027      	b.n	80045d8 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2202      	movs	r2, #2
 800458c:	701a      	strb	r2, [r3, #0]
      break;
 800458e:	e023      	b.n	80045d8 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2203      	movs	r2, #3
 8004594:	701a      	strb	r2, [r3, #0]
      break;
 8004596:	e01f      	b.n	80045d8 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2204      	movs	r2, #4
 800459c:	701a      	strb	r2, [r3, #0]
      break;
 800459e:	e01b      	b.n	80045d8 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2205      	movs	r2, #5
 80045a4:	701a      	strb	r2, [r3, #0]
      break;
 80045a6:	e017      	b.n	80045d8 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_417Hz:
      *val = ISM330DHCX_GY_ODR_417Hz;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2206      	movs	r2, #6
 80045ac:	701a      	strb	r2, [r3, #0]
      break;
 80045ae:	e013      	b.n	80045d8 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2207      	movs	r2, #7
 80045b4:	701a      	strb	r2, [r3, #0]
      break;
 80045b6:	e00f      	b.n	80045d8 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1667Hz:
      *val = ISM330DHCX_GY_ODR_1667Hz;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2208      	movs	r2, #8
 80045bc:	701a      	strb	r2, [r3, #0]
      break;
 80045be:	e00b      	b.n	80045d8 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3333Hz:
      *val = ISM330DHCX_GY_ODR_3333Hz;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2209      	movs	r2, #9
 80045c4:	701a      	strb	r2, [r3, #0]
      break;
 80045c6:	e007      	b.n	80045d8 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	220a      	movs	r2, #10
 80045cc:	701a      	strb	r2, [r3, #0]
      break;
 80045ce:	e003      	b.n	80045d8 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
      break;
 80045d6:	bf00      	nop
  }

  return ret;
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop

080045e4 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80045f0:	f107 0208 	add.w	r2, r7, #8
 80045f4:	2301      	movs	r3, #1
 80045f6:	2112      	movs	r1, #18
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff fb4b 	bl	8003c94 <ism330dhcx_read_reg>
 80045fe:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10f      	bne.n	8004626 <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 8004606:	78fb      	ldrb	r3, [r7, #3]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	b2da      	uxtb	r2, r3
 800460e:	7a3b      	ldrb	r3, [r7, #8]
 8004610:	f362 1386 	bfi	r3, r2, #6, #1
 8004614:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004616:	f107 0208 	add.w	r2, r7, #8
 800461a:	2301      	movs	r3, #1
 800461c:	2112      	movs	r1, #18
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff fb50 	bl	8003cc4 <ism330dhcx_write_reg>
 8004624:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004626:	68fb      	ldr	r3, [r7, #12]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 800463a:	f107 020c 	add.w	r2, r7, #12
 800463e:	2306      	movs	r3, #6
 8004640:	2122      	movs	r1, #34	@ 0x22
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff fb26 	bl	8003c94 <ism330dhcx_read_reg>
 8004648:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800464a:	7b7b      	ldrb	r3, [r7, #13]
 800464c:	b21a      	sxth	r2, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004658:	b29b      	uxth	r3, r3
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	b29b      	uxth	r3, r3
 800465e:	7b3a      	ldrb	r2, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	b29b      	uxth	r3, r3
 8004664:	b21a      	sxth	r2, r3
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800466a:	7bfa      	ldrb	r2, [r7, #15]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	3302      	adds	r3, #2
 8004670:	b212      	sxth	r2, r2
 8004672:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	3302      	adds	r3, #2
 8004678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800467c:	b29b      	uxth	r3, r3
 800467e:	021b      	lsls	r3, r3, #8
 8004680:	b29b      	uxth	r3, r3
 8004682:	7bba      	ldrb	r2, [r7, #14]
 8004684:	4413      	add	r3, r2
 8004686:	b29a      	uxth	r2, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	3302      	adds	r3, #2
 800468c:	b212      	sxth	r2, r2
 800468e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004690:	7c7a      	ldrb	r2, [r7, #17]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	3304      	adds	r3, #4
 8004696:	b212      	sxth	r2, r2
 8004698:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	3304      	adds	r3, #4
 800469e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	7c3a      	ldrb	r2, [r7, #16]
 80046aa:	4413      	add	r3, r2
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	3304      	adds	r3, #4
 80046b2:	b212      	sxth	r2, r2
 80046b4:	801a      	strh	r2, [r3, #0]
  return ret;
 80046b6:	697b      	ldr	r3, [r7, #20]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 80046ca:	f107 020c 	add.w	r2, r7, #12
 80046ce:	2306      	movs	r3, #6
 80046d0:	2128      	movs	r1, #40	@ 0x28
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff fade 	bl	8003c94 <ism330dhcx_read_reg>
 80046d8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80046da:	7b7b      	ldrb	r3, [r7, #13]
 80046dc:	b21a      	sxth	r2, r3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	7b3a      	ldrb	r2, [r7, #12]
 80046f0:	4413      	add	r3, r2
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	b21a      	sxth	r2, r3
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80046fa:	7bfa      	ldrb	r2, [r7, #15]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	3302      	adds	r3, #2
 8004700:	b212      	sxth	r2, r2
 8004702:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	3302      	adds	r3, #2
 8004708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800470c:	b29b      	uxth	r3, r3
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	b29b      	uxth	r3, r3
 8004712:	7bba      	ldrb	r2, [r7, #14]
 8004714:	4413      	add	r3, r2
 8004716:	b29a      	uxth	r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	3302      	adds	r3, #2
 800471c:	b212      	sxth	r2, r2
 800471e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004720:	7c7a      	ldrb	r2, [r7, #17]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	3304      	adds	r3, #4
 8004726:	b212      	sxth	r2, r2
 8004728:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	3304      	adds	r3, #4
 800472e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004732:	b29b      	uxth	r3, r3
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	b29b      	uxth	r3, r3
 8004738:	7c3a      	ldrb	r2, [r7, #16]
 800473a:	4413      	add	r3, r2
 800473c:	b29a      	uxth	r2, r3
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	3304      	adds	r3, #4
 8004742:	b212      	sxth	r2, r2
 8004744:	801a      	strh	r2, [r3, #0]
  return ret;
 8004746:	697b      	ldr	r3, [r7, #20]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 800475c:	f107 0208 	add.w	r2, r7, #8
 8004760:	2301      	movs	r3, #1
 8004762:	2118      	movs	r1, #24
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7ff fa95 	bl	8003c94 <ism330dhcx_read_reg>
 800476a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0) {
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10f      	bne.n	8004792 <ism330dhcx_device_conf_set+0x42>
    ctrl9_xl.device_conf = (uint8_t)val;
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	b2da      	uxtb	r2, r3
 800477a:	7a3b      	ldrb	r3, [r7, #8]
 800477c:	f362 0341 	bfi	r3, r2, #1, #1
 8004780:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 8004782:	f107 0208 	add.w	r2, r7, #8
 8004786:	2301      	movs	r3, #1
 8004788:	2118      	movs	r1, #24
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fa9a 	bl	8003cc4 <ism330dhcx_write_reg>
 8004790:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 8004792:	68fb      	ldr	r3, [r7, #12]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80047a8:	f107 0208 	add.w	r2, r7, #8
 80047ac:	2301      	movs	r3, #1
 80047ae:	2101      	movs	r1, #1
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff fa6f 	bl	8003c94 <ism330dhcx_read_reg>
 80047b6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10f      	bne.n	80047de <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	7a3b      	ldrb	r3, [r7, #8]
 80047c8:	f362 1387 	bfi	r3, r2, #6, #2
 80047cc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80047ce:	f107 0208 	add.w	r2, r7, #8
 80047d2:	2301      	movs	r3, #1
 80047d4:	2101      	movs	r1, #1
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff fa74 	bl	8003cc4 <ism330dhcx_write_reg>
 80047dc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80047de:	68fb      	ldr	r3, [r7, #12]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 80047f2:	2301      	movs	r3, #1
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	210f      	movs	r1, #15
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fa4b 	bl	8003c94 <ism330dhcx_read_reg>
 80047fe:	60f8      	str	r0, [r7, #12]
  return ret;
 8004800:	68fb      	ldr	r3, [r7, #12]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	460b      	mov	r3, r1
 8004814:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8004816:	f107 0208 	add.w	r2, r7, #8
 800481a:	2301      	movs	r3, #1
 800481c:	2112      	movs	r1, #18
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fa38 	bl	8003c94 <ism330dhcx_read_reg>
 8004824:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10f      	bne.n	800484c <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 800482c:	78fb      	ldrb	r3, [r7, #3]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	b2da      	uxtb	r2, r3
 8004834:	7a3b      	ldrb	r3, [r7, #8]
 8004836:	f362 0300 	bfi	r3, r2, #0, #1
 800483a:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800483c:	f107 0208 	add.w	r2, r7, #8
 8004840:	2301      	movs	r3, #1
 8004842:	2112      	movs	r1, #18
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff fa3d 	bl	8003cc4 <ism330dhcx_write_reg>
 800484a:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800484c:	68fb      	ldr	r3, [r7, #12]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	460b      	mov	r3, r1
 8004860:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8004862:	f107 0208 	add.w	r2, r7, #8
 8004866:	2301      	movs	r3, #1
 8004868:	2112      	movs	r1, #18
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff fa12 	bl	8003c94 <ism330dhcx_read_reg>
 8004870:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10f      	bne.n	8004898 <ism330dhcx_auto_increment_set+0x42>
    ctrl3_c.if_inc = (uint8_t)val;
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	b2da      	uxtb	r2, r3
 8004880:	7a3b      	ldrb	r3, [r7, #8]
 8004882:	f362 0382 	bfi	r3, r2, #2, #1
 8004886:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004888:	f107 0208 	add.w	r2, r7, #8
 800488c:	2301      	movs	r3, #1
 800488e:	2112      	movs	r1, #18
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff fa17 	bl	8003cc4 <ism330dhcx_write_reg>
 8004896:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004898:	68fb      	ldr	r3, [r7, #12]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	460b      	mov	r3, r1
 80048ac:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80048ae:	f107 0208 	add.w	r2, r7, #8
 80048b2:	2301      	movs	r3, #1
 80048b4:	210a      	movs	r1, #10
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff f9ec 	bl	8003c94 <ism330dhcx_read_reg>
 80048bc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10f      	bne.n	80048e4 <ism330dhcx_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	7a3b      	ldrb	r3, [r7, #8]
 80048ce:	f362 0302 	bfi	r3, r2, #0, #3
 80048d2:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80048d4:	f107 0208 	add.w	r2, r7, #8
 80048d8:	2301      	movs	r3, #1
 80048da:	210a      	movs	r1, #10
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff f9f1 	bl	8003cc4 <ism330dhcx_write_reg>
 80048e2:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 80048e4:	68fb      	ldr	r3, [r7, #12]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80048f8:	2102      	movs	r1, #2
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff ff4e 	bl	800479c <ism330dhcx_mem_bank_set>
 8004900:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 8004908:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 800490a:	2301      	movs	r3, #1
 800490c:	2146      	movs	r1, #70	@ 0x46
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff f9c0 	bl	8003c94 <ism330dhcx_read_reg>
 8004914:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d107      	bne.n	800492c <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8004920:	2301      	movs	r3, #1
 8004922:	2147      	movs	r1, #71	@ 0x47
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff f9b5 	bl	8003c94 <ism330dhcx_read_reg>
 800492a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d104      	bne.n	800493c <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004932:	2100      	movs	r1, #0
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff ff31 	bl	800479c <ism330dhcx_mem_bank_set>
 800493a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800493c:	68fb      	ldr	r3, [r7, #12]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8004952:	2102      	movs	r1, #2
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff ff21 	bl	800479c <ism330dhcx_mem_bank_set>
 800495a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d107      	bne.n	8004972 <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8004962:	f107 0208 	add.w	r2, r7, #8
 8004966:	2301      	movs	r3, #1
 8004968:	215f      	movs	r1, #95	@ 0x5f
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff f992 	bl	8003c94 <ism330dhcx_read_reg>
 8004970:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d104      	bne.n	8004982 <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004978:	2100      	movs	r1, #0
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff ff0e 	bl	800479c <ism330dhcx_mem_bank_set>
 8004980:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 8004982:	7a3b      	ldrb	r3, [r7, #8]
 8004984:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b03      	cmp	r3, #3
 800498c:	d81a      	bhi.n	80049c4 <ism330dhcx_fsm_data_rate_get+0x7c>
 800498e:	a201      	add	r2, pc, #4	@ (adr r2, 8004994 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	080049a5 	.word	0x080049a5
 8004998:	080049ad 	.word	0x080049ad
 800499c:	080049b5 	.word	0x080049b5
 80049a0:	080049bd 	.word	0x080049bd
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
      break;
 80049aa:	e00f      	b.n	80049cc <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]
      break;
 80049b2:	e00b      	b.n	80049cc <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2202      	movs	r2, #2
 80049b8:	701a      	strb	r2, [r3, #0]
      break;
 80049ba:	e007      	b.n	80049cc <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2203      	movs	r2, #3
 80049c0:	701a      	strb	r2, [r3, #0]
      break;
 80049c2:	e003      	b.n	80049cc <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2200      	movs	r2, #0
 80049c8:	701a      	strb	r2, [r3, #0]
      break;
 80049ca:	bf00      	nop
  }

  return ret;
 80049cc:	68fb      	ldr	r3, [r7, #12]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop

080049d8 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80049e2:	2102      	movs	r1, #2
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff fed9 	bl	800479c <ism330dhcx_mem_bank_set>
 80049ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d107      	bne.n	8004a02 <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80049f2:	f107 0208 	add.w	r2, r7, #8
 80049f6:	2301      	movs	r3, #1
 80049f8:	2105      	movs	r1, #5
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff f94a 	bl	8003c94 <ism330dhcx_read_reg>
 8004a00:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004a08:	2100      	movs	r1, #0
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff fec6 	bl	800479c <ism330dhcx_mem_bank_set>
 8004a10:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 8004a12:	7a3b      	ldrb	r3, [r7, #8]
 8004a14:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004a20:	68fb      	ldr	r3, [r7, #12]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8004a36:	2102      	movs	r1, #2
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff feaf 	bl	800479c <ism330dhcx_mem_bank_set>
 8004a3e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d107      	bne.n	8004a56 <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8004a46:	f107 0208 	add.w	r2, r7, #8
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	2160      	movs	r1, #96	@ 0x60
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff f920 	bl	8003c94 <ism330dhcx_read_reg>
 8004a54:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d12a      	bne.n	8004ab2 <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 8004a5c:	7a3b      	ldrb	r3, [r7, #8]
 8004a5e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d81b      	bhi.n	8004aa0 <ism330dhcx_mlc_data_rate_get+0x74>
 8004a68:	a201      	add	r2, pc, #4	@ (adr r2, 8004a70 <ism330dhcx_mlc_data_rate_get+0x44>)
 8004a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6e:	bf00      	nop
 8004a70:	08004a81 	.word	0x08004a81
 8004a74:	08004a89 	.word	0x08004a89
 8004a78:	08004a91 	.word	0x08004a91
 8004a7c:	08004a99 	.word	0x08004a99
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
        break;
 8004a86:	e00f      	b.n	8004aa8 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	701a      	strb	r2, [r3, #0]
        break;
 8004a8e:	e00b      	b.n	8004aa8 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2202      	movs	r2, #2
 8004a94:	701a      	strb	r2, [r3, #0]
        break;
 8004a96:	e007      	b.n	8004aa8 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	701a      	strb	r2, [r3, #0]
        break;
 8004a9e:	e003      	b.n	8004aa8 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
        break;
 8004aa6:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff fe76 	bl	800479c <ism330dhcx_mem_bank_set>
 8004ab0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004ac0:	4b18      	ldr	r3, [pc, #96]	@ (8004b24 <SystemInit+0x68>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac6:	4a17      	ldr	r2, [pc, #92]	@ (8004b24 <SystemInit+0x68>)
 8004ac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004acc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8004ad0:	4b15      	ldr	r3, [pc, #84]	@ (8004b28 <SystemInit+0x6c>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8004ad6:	4b14      	ldr	r3, [pc, #80]	@ (8004b28 <SystemInit+0x6c>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8004adc:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <SystemInit+0x6c>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8004ae2:	4b11      	ldr	r3, [pc, #68]	@ (8004b28 <SystemInit+0x6c>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8004b28 <SystemInit+0x6c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a0e      	ldr	r2, [pc, #56]	@ (8004b28 <SystemInit+0x6c>)
 8004aee:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8004af2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8004af6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8004af8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b28 <SystemInit+0x6c>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8004afe:	4b0a      	ldr	r3, [pc, #40]	@ (8004b28 <SystemInit+0x6c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a09      	ldr	r2, [pc, #36]	@ (8004b28 <SystemInit+0x6c>)
 8004b04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8004b0a:	4b07      	ldr	r3, [pc, #28]	@ (8004b28 <SystemInit+0x6c>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b10:	4b04      	ldr	r3, [pc, #16]	@ (8004b24 <SystemInit+0x68>)
 8004b12:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004b16:	609a      	str	r2, [r3, #8]
  #endif
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	e000ed00 	.word	0xe000ed00
 8004b28:	46020c00 	.word	0x46020c00

08004b2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b30:	4b11      	ldr	r3, [pc, #68]	@ (8004b78 <HAL_Init+0x4c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a10      	ldr	r2, [pc, #64]	@ (8004b78 <HAL_Init+0x4c>)
 8004b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b3c:	2003      	movs	r0, #3
 8004b3e:	f000 f96d 	bl	8004e1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004b42:	f002 ff6f 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 8004b46:	4602      	mov	r2, r0
 8004b48:	4b0c      	ldr	r3, [pc, #48]	@ (8004b7c <HAL_Init+0x50>)
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	490b      	ldr	r1, [pc, #44]	@ (8004b80 <HAL_Init+0x54>)
 8004b52:	5ccb      	ldrb	r3, [r1, r3]
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
 8004b58:	4a0a      	ldr	r2, [pc, #40]	@ (8004b84 <HAL_Init+0x58>)
 8004b5a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b5c:	200f      	movs	r0, #15
 8004b5e:	f000 f813 	bl	8004b88 <HAL_InitTick>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e002      	b.n	8004b72 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004b6c:	f008 fbb8 	bl	800d2e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40022000 	.word	0x40022000
 8004b7c:	46020c00 	.word	0x46020c00
 8004b80:	080119b0 	.word	0x080119b0
 8004b84:	200000a0 	.word	0x200000a0

08004b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8004b90:	4b15      	ldr	r3, [pc, #84]	@ (8004be8 <HAL_InitTick+0x60>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e021      	b.n	8004be0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004b9c:	4b13      	ldr	r3, [pc, #76]	@ (8004bec <HAL_InitTick+0x64>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	4b11      	ldr	r3, [pc, #68]	@ (8004be8 <HAL_InitTick+0x60>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f965 	bl	8004e82 <HAL_SYSTICK_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e00e      	b.n	8004be0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b0f      	cmp	r3, #15
 8004bc6:	d80a      	bhi.n	8004bde <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bc8:	2200      	movs	r2, #0
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bd0:	f000 f92f 	bl	8004e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bd4:	4a06      	ldr	r2, [pc, #24]	@ (8004bf0 <HAL_InitTick+0x68>)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e000      	b.n	8004be0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	200000a8 	.word	0x200000a8
 8004bec:	200000a0 	.word	0x200000a0
 8004bf0:	200000a4 	.word	0x200000a4

08004bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004bf8:	4b06      	ldr	r3, [pc, #24]	@ (8004c14 <HAL_IncTick+0x20>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <HAL_IncTick+0x24>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4413      	add	r3, r2
 8004c04:	4a04      	ldr	r2, [pc, #16]	@ (8004c18 <HAL_IncTick+0x24>)
 8004c06:	6013      	str	r3, [r2, #0]
}
 8004c08:	bf00      	nop
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	200000a8 	.word	0x200000a8
 8004c18:	20000ed8 	.word	0x20000ed8

08004c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8004c20:	4b03      	ldr	r3, [pc, #12]	@ (8004c30 <HAL_GetTick+0x14>)
 8004c22:	681b      	ldr	r3, [r3, #0]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	20000ed8 	.word	0x20000ed8

08004c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c3c:	f7ff ffee 	bl	8004c1c <HAL_GetTick>
 8004c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c4c:	d005      	beq.n	8004c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c78 <HAL_Delay+0x44>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c5a:	bf00      	nop
 8004c5c:	f7ff ffde 	bl	8004c1c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d8f7      	bhi.n	8004c5c <HAL_Delay+0x28>
  {
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	200000a8 	.word	0x200000a8

08004c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c98:	4013      	ands	r3, r2
 8004c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ca4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cae:	4a04      	ldr	r2, [pc, #16]	@ (8004cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	60d3      	str	r3, [r2, #12]
}
 8004cb4:	bf00      	nop
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	e000ed00 	.word	0xe000ed00

08004cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cc8:	4b04      	ldr	r3, [pc, #16]	@ (8004cdc <__NVIC_GetPriorityGrouping+0x18>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	0a1b      	lsrs	r3, r3, #8
 8004cce:	f003 0307 	and.w	r3, r3, #7
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	e000ed00 	.word	0xe000ed00

08004ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	db0b      	blt.n	8004d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	f003 021f 	and.w	r2, r3, #31
 8004cf8:	4907      	ldr	r1, [pc, #28]	@ (8004d18 <__NVIC_EnableIRQ+0x38>)
 8004cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	2001      	movs	r0, #1
 8004d02:	fa00 f202 	lsl.w	r2, r0, r2
 8004d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	e000e100 	.word	0xe000e100

08004d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	6039      	str	r1, [r7, #0]
 8004d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	db0a      	blt.n	8004d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	490c      	ldr	r1, [pc, #48]	@ (8004d68 <__NVIC_SetPriority+0x4c>)
 8004d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3a:	0112      	lsls	r2, r2, #4
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	440b      	add	r3, r1
 8004d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d44:	e00a      	b.n	8004d5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	4908      	ldr	r1, [pc, #32]	@ (8004d6c <__NVIC_SetPriority+0x50>)
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	3b04      	subs	r3, #4
 8004d54:	0112      	lsls	r2, r2, #4
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	440b      	add	r3, r1
 8004d5a:	761a      	strb	r2, [r3, #24]
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	e000e100 	.word	0xe000e100
 8004d6c:	e000ed00 	.word	0xe000ed00

08004d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b089      	sub	sp, #36	@ 0x24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f1c3 0307 	rsb	r3, r3, #7
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	bf28      	it	cs
 8004d8e:	2304      	movcs	r3, #4
 8004d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	3304      	adds	r3, #4
 8004d96:	2b06      	cmp	r3, #6
 8004d98:	d902      	bls.n	8004da0 <NVIC_EncodePriority+0x30>
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	3b03      	subs	r3, #3
 8004d9e:	e000      	b.n	8004da2 <NVIC_EncodePriority+0x32>
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43da      	mvns	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	401a      	ands	r2, r3
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004db8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc2:	43d9      	mvns	r1, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc8:	4313      	orrs	r3, r2
         );
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3724      	adds	r7, #36	@ 0x24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004de8:	d301      	bcc.n	8004dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dea:	2301      	movs	r3, #1
 8004dec:	e00f      	b.n	8004e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dee:	4a0a      	ldr	r2, [pc, #40]	@ (8004e18 <SysTick_Config+0x40>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004df6:	210f      	movs	r1, #15
 8004df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004dfc:	f7ff ff8e 	bl	8004d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e00:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <SysTick_Config+0x40>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e06:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <SysTick_Config+0x40>)
 8004e08:	2207      	movs	r2, #7
 8004e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	e000e010 	.word	0xe000e010

08004e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ff29 	bl	8004c7c <__NVIC_SetPriorityGrouping>
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b086      	sub	sp, #24
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	4603      	mov	r3, r0
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	607a      	str	r2, [r7, #4]
 8004e3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e40:	f7ff ff40 	bl	8004cc4 <__NVIC_GetPriorityGrouping>
 8004e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	6978      	ldr	r0, [r7, #20]
 8004e4c:	f7ff ff90 	bl	8004d70 <NVIC_EncodePriority>
 8004e50:	4602      	mov	r2, r0
 8004e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e56:	4611      	mov	r1, r2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff ff5f 	bl	8004d1c <__NVIC_SetPriority>
}
 8004e5e:	bf00      	nop
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b082      	sub	sp, #8
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff ff33 	bl	8004ce0 <__NVIC_EnableIRQ>
}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff ffa4 	bl	8004dd8 <SysTick_Config>
 8004e90:	4603      	mov	r3, r0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01e      	beq.n	8004ef4 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2204      	movs	r2, #4
 8004ebc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ec2:	f043 0202 	orr.w	r2, r3, #2
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2204      	movs	r2, #4
 8004ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed6:	4a39      	ldr	r2, [pc, #228]	@ (8004fbc <HAL_DCMI_IRQHandler+0x120>)
 8004ed8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 f88b 	bl	8004ffa <HAL_DMA_Abort_IT>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d004      	beq.n	8004ef4 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 f866 	bl	8004fc0 <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01e      	beq.n	8004f3c <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2202      	movs	r2, #2
 8004f04:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0a:	f043 0201 	orr.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2204      	movs	r2, #4
 8004f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f1e:	4a27      	ldr	r2, [pc, #156]	@ (8004fbc <HAL_DCMI_IRQHandler+0x120>)
 8004f20:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f867 	bl	8004ffa <HAL_DMA_Abort_IT>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d004      	beq.n	8004f3c <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 f842 	bl	8004fc0 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 0310 	and.w	r3, r3, #16
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d006      	beq.n	8004f54 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2210      	movs	r2, #16
 8004f4c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fc fdb2 	bl	8001ab8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d006      	beq.n	8004f6c <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2208      	movs	r2, #8
 8004f64:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fc fdbc 	bl	8001ae4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d01d      	beq.n	8004fb2 <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d107      	bne.n	8004f94 <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 021e 	bic.w	r2, r2, #30
 8004f92:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7fc fd8e 	bl	8001ace <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004fb2:	bf00      	nop
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	08004fc1 	.word	0x08004fc1

08004fc0 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fcc:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d009      	beq.n	8004fec <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fe4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f7fc fd84 	bl	8001afa <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8004ff2:	bf00      	nop
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e019      	b.n	8005040 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d004      	beq.n	8005022 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e00e      	b.n	8005040 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2204      	movs	r2, #4
 8005026:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005038:	f043 0304 	orr.w	r3, r3, #4
 800503c:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800505c:	f023 030f 	bic.w	r3, r3, #15
 8005060:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800506a:	3b50      	subs	r3, #80	@ 0x50
 800506c:	09db      	lsrs	r3, r3, #7
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2201      	movs	r2, #1
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4013      	ands	r3, r2
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 8150 	beq.w	8005328 <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005092:	2b00      	cmp	r3, #0
 8005094:	d011      	beq.n	80050ba <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050ac:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b2:	f043 0201 	orr.w	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d011      	beq.n	80050ec <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050de:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e4:	f043 0202 	orr.w	r2, r3, #2
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d011      	beq.n	800511e <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005110:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005116:	f043 0204 	orr.w	r2, r3, #4
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d011      	beq.n	8005150 <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005142:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005148:	f043 0208 	orr.w	r2, r3, #8
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800515a:	2b00      	cmp	r3, #0
 800515c:	d013      	beq.n	8005186 <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00c      	beq.n	8005186 <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005174:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d055      	beq.n	8005240 <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d04e      	beq.n	8005240 <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80051aa:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d137      	bne.n	8005228 <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051c6:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695a      	ldr	r2, [r3, #20]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0202 	orr.w	r2, r2, #2
 80051d6:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d004      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2203      	movs	r2, #3
 80051ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80051ee:	e003      	b.n	80051f8 <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005208:	2201      	movs	r2, #1
 800520a:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8087 	beq.w	800532c <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	4798      	blx	r3
        }

        return;
 8005226:	e081      	b.n	800532c <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2205      	movs	r2, #5
 800522c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800524a:	2b00      	cmp	r3, #0
 800524c:	d039      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d032      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005264:	2b00      	cmp	r3, #0
 8005266:	d012      	beq.n	800528e <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d116      	bne.n	80052a0 <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005278:	2b00      	cmp	r3, #0
 800527a:	d111      	bne.n	80052a0 <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005288:	2201      	movs	r2, #1
 800528a:	731a      	strb	r2, [r3, #12]
 800528c:	e008      	b.n	80052a0 <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005294:	2b00      	cmp	r3, #0
 8005296:	d103      	bne.n	80052a0 <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80052a8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d031      	beq.n	800532e <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695a      	ldr	r2, [r3, #20]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0202 	orr.w	r2, r2, #2
 80052d8:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d004      	beq.n	80052f2 <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2203      	movs	r2, #3
 80052ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80052f0:	e003      	b.n	80052fa <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800530a:	2201      	movs	r2, #1
 800530c:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800531a:	2b00      	cmp	r3, #0
 800531c:	d007      	beq.n	800532e <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	4798      	blx	r3
 8005326:	e002      	b.n	800532e <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005328:	bf00      	nop
 800532a:	e000      	b.n	800532e <HAL_DMA_IRQHandler+0x2e2>
        return;
 800532c:	bf00      	nop
    }
  }
}
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	460b      	mov	r3, r1
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005346:	7afb      	ldrb	r3, [r7, #11]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d011      	beq.n	8005370 <HAL_EXTI_RegisterCallback+0x3c>
 800534c:	2b02      	cmp	r3, #2
 800534e:	dc13      	bgt.n	8005378 <HAL_EXTI_RegisterCallback+0x44>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <HAL_EXTI_RegisterCallback+0x26>
 8005354:	2b01      	cmp	r3, #1
 8005356:	d007      	beq.n	8005368 <HAL_EXTI_RegisterCallback+0x34>
 8005358:	e00e      	b.n	8005378 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	609a      	str	r2, [r3, #8]
      break;
 8005366:	e00a      	b.n	800537e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	605a      	str	r2, [r3, #4]
      break;
 800536e:	e006      	b.n	800537e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	609a      	str	r2, [r3, #8]
      break;
 8005376:	e002      	b.n	800537e <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	75fb      	strb	r3, [r7, #23]
      break;
 800537c:	bf00      	nop
  }

  return status;
 800537e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005380:	4618      	mov	r0, r3
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e003      	b.n	80053a8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80053a6:	2300      	movs	r3, #0
  }
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	0c1b      	lsrs	r3, r3, #16
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	2201      	movs	r2, #1
 80053d2:	fa02 f303 	lsl.w	r3, r2, r3
 80053d6:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	4b17      	ldr	r3, [pc, #92]	@ (800543c <HAL_EXTI_IRQHandler+0x88>)
 80053de:	4413      	add	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4013      	ands	r3, r2
 80053ea:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	4b0d      	ldr	r3, [pc, #52]	@ (8005440 <HAL_EXTI_IRQHandler+0x8c>)
 800540c:	4413      	add	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4013      	ands	r3, r2
 8005418:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d009      	beq.n	8005434 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	4798      	blx	r3
    }
  }
}
 8005434:	bf00      	nop
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	4602200c 	.word	0x4602200c
 8005440:	46022010 	.word	0x46022010

08005444 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005444:	b480      	push	{r7}
 8005446:	b089      	sub	sp, #36	@ 0x24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005456:	e1ba      	b.n	80057ce <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	2101      	movs	r1, #1
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	fa01 f303 	lsl.w	r3, r1, r3
 8005464:	4013      	ands	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 81aa 	beq.w	80057c8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a55      	ldr	r2, [pc, #340]	@ (80055cc <HAL_GPIO_Init+0x188>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d15d      	bne.n	8005538 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8005482:	2201      	movs	r2, #1
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	fa02 f303 	lsl.w	r3, r2, r3
 800548a:	43db      	mvns	r3, r3
 800548c:	69fa      	ldr	r2, [r7, #28]
 800548e:	4013      	ands	r3, r2
 8005490:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f003 0201 	and.w	r2, r3, #1
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80054ac:	4a48      	ldr	r2, [pc, #288]	@ (80055d0 <HAL_GPIO_Init+0x18c>)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054b4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80054b6:	4a46      	ldr	r2, [pc, #280]	@ (80055d0 <HAL_GPIO_Init+0x18c>)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4413      	add	r3, r2
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	08da      	lsrs	r2, r3, #3
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	3208      	adds	r2, #8
 80054ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	220f      	movs	r2, #15
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43db      	mvns	r3, r3
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	4013      	ands	r3, r2
 80054e4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	220b      	movs	r2, #11
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	08da      	lsrs	r2, r3, #3
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	3208      	adds	r2, #8
 8005502:	69f9      	ldr	r1, [r7, #28]
 8005504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	2203      	movs	r2, #3
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	43db      	mvns	r3, r3
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	4013      	ands	r3, r2
 800551e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	2202      	movs	r2, #2
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	4313      	orrs	r3, r2
 800552e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e067      	b.n	8005608 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d003      	beq.n	8005548 <HAL_GPIO_Init+0x104>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b12      	cmp	r3, #18
 8005546:	d145      	bne.n	80055d4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	08da      	lsrs	r2, r3, #3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3208      	adds	r2, #8
 8005550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005554:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	220f      	movs	r2, #15
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	43db      	mvns	r3, r3
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	4013      	ands	r3, r2
 800556a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f003 020f 	and.w	r2, r3, #15
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	4313      	orrs	r3, r2
 8005584:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	08da      	lsrs	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3208      	adds	r2, #8
 800558e:	69f9      	ldr	r1, [r7, #28]
 8005590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	2203      	movs	r2, #3
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	43db      	mvns	r3, r3
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	4013      	ands	r3, r2
 80055aa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f003 0203 	and.w	r2, r3, #3
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	e01e      	b.n	8005608 <HAL_GPIO_Init+0x1c4>
 80055ca:	bf00      	nop
 80055cc:	46020000 	.word	0x46020000
 80055d0:	08011a08 	.word	0x08011a08
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	2203      	movs	r2, #3
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	4013      	ands	r3, r2
 80055ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f003 0203 	and.w	r2, r3, #3
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	4313      	orrs	r3, r2
 8005600:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	69fa      	ldr	r2, [r7, #28]
 8005606:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d00b      	beq.n	8005628 <HAL_GPIO_Init+0x1e4>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d007      	beq.n	8005628 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800561c:	2b11      	cmp	r3, #17
 800561e:	d003      	beq.n	8005628 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b12      	cmp	r3, #18
 8005626:	d130      	bne.n	800568a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	2203      	movs	r2, #3
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	43db      	mvns	r3, r3
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	4013      	ands	r3, r2
 800563e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	4313      	orrs	r3, r2
 8005650:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800565e:	2201      	movs	r2, #1
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	43db      	mvns	r3, r3
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	4013      	ands	r3, r2
 800566c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	f003 0201 	and.w	r2, r3, #1
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	4313      	orrs	r3, r2
 8005682:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d017      	beq.n	80056c2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	2203      	movs	r2, #3
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	43db      	mvns	r3, r3
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	4013      	ands	r3, r2
 80056a8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d07c      	beq.n	80057c8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80056ce:	4a47      	ldr	r2, [pc, #284]	@ (80057ec <HAL_GPIO_Init+0x3a8>)
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	089b      	lsrs	r3, r3, #2
 80056d4:	3318      	adds	r3, #24
 80056d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056da:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	220f      	movs	r2, #15
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	43db      	mvns	r3, r3
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	4013      	ands	r3, r2
 80056f0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	0a9a      	lsrs	r2, r3, #10
 80056f6:	4b3e      	ldr	r3, [pc, #248]	@ (80057f0 <HAL_GPIO_Init+0x3ac>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	f002 0203 	and.w	r2, r2, #3
 8005700:	00d2      	lsls	r2, r2, #3
 8005702:	4093      	lsls	r3, r2
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	4313      	orrs	r3, r2
 8005708:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800570a:	4938      	ldr	r1, [pc, #224]	@ (80057ec <HAL_GPIO_Init+0x3a8>)
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	089b      	lsrs	r3, r3, #2
 8005710:	3318      	adds	r3, #24
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005718:	4b34      	ldr	r3, [pc, #208]	@ (80057ec <HAL_GPIO_Init+0x3a8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	43db      	mvns	r3, r3
 8005722:	69fa      	ldr	r2, [r7, #28]
 8005724:	4013      	ands	r3, r2
 8005726:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800573c:	4a2b      	ldr	r2, [pc, #172]	@ (80057ec <HAL_GPIO_Init+0x3a8>)
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005742:	4b2a      	ldr	r3, [pc, #168]	@ (80057ec <HAL_GPIO_Init+0x3a8>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	43db      	mvns	r3, r3
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	4013      	ands	r3, r2
 8005750:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800575e:	69fa      	ldr	r2, [r7, #28]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005766:	4a21      	ldr	r2, [pc, #132]	@ (80057ec <HAL_GPIO_Init+0x3a8>)
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800576c:	4b1f      	ldr	r3, [pc, #124]	@ (80057ec <HAL_GPIO_Init+0x3a8>)
 800576e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005772:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	43db      	mvns	r3, r3
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	4013      	ands	r3, r2
 800577c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005792:	4a16      	ldr	r2, [pc, #88]	@ (80057ec <HAL_GPIO_Init+0x3a8>)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800579a:	4b14      	ldr	r3, [pc, #80]	@ (80057ec <HAL_GPIO_Init+0x3a8>)
 800579c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	4013      	ands	r3, r2
 80057aa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80057c0:	4a0a      	ldr	r2, [pc, #40]	@ (80057ec <HAL_GPIO_Init+0x3a8>)
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	3301      	adds	r3, #1
 80057cc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	fa22 f303 	lsr.w	r3, r2, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f47f ae3d 	bne.w	8005458 <HAL_GPIO_Init+0x14>
  }
}
 80057de:	bf00      	nop
 80057e0:	bf00      	nop
 80057e2:	3724      	adds	r7, #36	@ 0x24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	46022000 	.word	0x46022000
 80057f0:	002f7f7f 	.word	0x002f7f7f

080057f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b089      	sub	sp, #36	@ 0x24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8005806:	e0bc      	b.n	8005982 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8005808:	2201      	movs	r2, #1
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	4013      	ands	r3, r2
 8005814:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 80ad 	beq.w	800597c <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a5e      	ldr	r2, [pc, #376]	@ (80059a0 <HAL_GPIO_DeInit+0x1ac>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d115      	bne.n	8005856 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800582a:	4a5e      	ldr	r2, [pc, #376]	@ (80059a4 <HAL_GPIO_DeInit+0x1b0>)
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005832:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005834:	4a5b      	ldr	r2, [pc, #364]	@ (80059a4 <HAL_GPIO_DeInit+0x1b0>)
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	4413      	add	r3, r2
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8005840:	4b57      	ldr	r3, [pc, #348]	@ (80059a0 <HAL_GPIO_DeInit+0x1ac>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	2101      	movs	r1, #1
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	fa01 f303 	lsl.w	r3, r1, r3
 800584c:	43db      	mvns	r3, r3
 800584e:	4954      	ldr	r1, [pc, #336]	@ (80059a0 <HAL_GPIO_DeInit+0x1ac>)
 8005850:	4013      	ands	r3, r2
 8005852:	600b      	str	r3, [r1, #0]
 8005854:	e053      	b.n	80058fe <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8005856:	4a54      	ldr	r2, [pc, #336]	@ (80059a8 <HAL_GPIO_DeInit+0x1b4>)
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	089b      	lsrs	r3, r3, #2
 800585c:	3318      	adds	r3, #24
 800585e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005862:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	220f      	movs	r2, #15
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4013      	ands	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	0a9a      	lsrs	r2, r3, #10
 800587c:	4b4b      	ldr	r3, [pc, #300]	@ (80059ac <HAL_GPIO_DeInit+0x1b8>)
 800587e:	4013      	ands	r3, r2
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	f002 0203 	and.w	r2, r2, #3
 8005886:	00d2      	lsls	r2, r2, #3
 8005888:	4093      	lsls	r3, r2
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	429a      	cmp	r2, r3
 800588e:	d136      	bne.n	80058fe <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8005890:	4b45      	ldr	r3, [pc, #276]	@ (80059a8 <HAL_GPIO_DeInit+0x1b4>)
 8005892:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	43db      	mvns	r3, r3
 800589a:	4943      	ldr	r1, [pc, #268]	@ (80059a8 <HAL_GPIO_DeInit+0x1b4>)
 800589c:	4013      	ands	r3, r2
 800589e:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 80058a2:	4b41      	ldr	r3, [pc, #260]	@ (80059a8 <HAL_GPIO_DeInit+0x1b4>)
 80058a4:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	43db      	mvns	r3, r3
 80058ac:	493e      	ldr	r1, [pc, #248]	@ (80059a8 <HAL_GPIO_DeInit+0x1b4>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 80058b4:	4b3c      	ldr	r3, [pc, #240]	@ (80059a8 <HAL_GPIO_DeInit+0x1b4>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	43db      	mvns	r3, r3
 80058bc:	493a      	ldr	r1, [pc, #232]	@ (80059a8 <HAL_GPIO_DeInit+0x1b4>)
 80058be:	4013      	ands	r3, r2
 80058c0:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 80058c2:	4b39      	ldr	r3, [pc, #228]	@ (80059a8 <HAL_GPIO_DeInit+0x1b4>)
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	43db      	mvns	r3, r3
 80058ca:	4937      	ldr	r1, [pc, #220]	@ (80059a8 <HAL_GPIO_DeInit+0x1b4>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	220f      	movs	r2, #15
 80058da:	fa02 f303 	lsl.w	r3, r2, r3
 80058de:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 80058e0:	4a31      	ldr	r2, [pc, #196]	@ (80059a8 <HAL_GPIO_DeInit+0x1b4>)
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	089b      	lsrs	r3, r3, #2
 80058e6:	3318      	adds	r3, #24
 80058e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	43da      	mvns	r2, r3
 80058f0:	482d      	ldr	r0, [pc, #180]	@ (80059a8 <HAL_GPIO_DeInit+0x1b4>)
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	089b      	lsrs	r3, r3, #2
 80058f6:	400a      	ands	r2, r1
 80058f8:	3318      	adds	r3, #24
 80058fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	2103      	movs	r1, #3
 8005908:	fa01 f303 	lsl.w	r3, r1, r3
 800590c:	431a      	orrs	r2, r3
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	08da      	lsrs	r2, r3, #3
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	3208      	adds	r2, #8
 800591a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	220f      	movs	r2, #15
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	43db      	mvns	r3, r3
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	08d2      	lsrs	r2, r2, #3
 8005932:	4019      	ands	r1, r3
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	3208      	adds	r2, #8
 8005938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	2103      	movs	r1, #3
 8005946:	fa01 f303 	lsl.w	r3, r1, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	401a      	ands	r2, r3
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	2101      	movs	r1, #1
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	43db      	mvns	r3, r3
 8005960:	401a      	ands	r2, r3
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	2103      	movs	r1, #3
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	43db      	mvns	r3, r3
 8005976:	401a      	ands	r2, r3
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	3301      	adds	r3, #1
 8005980:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	fa22 f303 	lsr.w	r3, r2, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	f47f af3c 	bne.w	8005808 <HAL_GPIO_DeInit+0x14>
  }
}
 8005990:	bf00      	nop
 8005992:	bf00      	nop
 8005994:	3724      	adds	r7, #36	@ 0x24
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	46020000 	.word	0x46020000
 80059a4:	08011a08 	.word	0x08011a08
 80059a8:	46022000 	.word	0x46022000
 80059ac:	002f7f7f 	.word	0x002f7f7f

080059b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	807b      	strh	r3, [r7, #2]
 80059bc:	4613      	mov	r3, r2
 80059be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059c0:	787b      	ldrb	r3, [r7, #1]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059c6:	887a      	ldrh	r2, [r7, #2]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80059cc:	e002      	b.n	80059d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80059ce:	887a      	ldrh	r2, [r7, #2]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e081      	b.n	8005af6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f8a8 	bl	8005b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	@ 0x24
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0201 	bic.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005a30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d107      	bne.n	8005a5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a56:	609a      	str	r2, [r3, #8]
 8005a58:	e006      	b.n	8005a68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005a66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d104      	bne.n	8005a7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691a      	ldr	r2, [r3, #16]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	69d9      	ldr	r1, [r3, #28]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1a      	ldr	r2, [r3, #32]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e021      	b.n	8005b54 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2224      	movs	r2, #36	@ 0x24
 8005b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0201 	bic.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f821 	bl	8005b70 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	461a      	mov	r2, r3
 8005b92:	4603      	mov	r3, r0
 8005b94:	817b      	strh	r3, [r7, #10]
 8005b96:	460b      	mov	r3, r1
 8005b98:	813b      	strh	r3, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	f040 80f9 	bne.w	8005d9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_I2C_Mem_Write+0x34>
 8005bb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d105      	bne.n	8005bc4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bbe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e0ed      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_I2C_Mem_Write+0x4e>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e0e6      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bda:	f7ff f81f 	bl	8004c1c <HAL_GetTick>
 8005bde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	2319      	movs	r3, #25
 8005be6:	2201      	movs	r2, #1
 8005be8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fadd 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0d1      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2221      	movs	r2, #33	@ 0x21
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2240      	movs	r2, #64	@ 0x40
 8005c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a3a      	ldr	r2, [r7, #32]
 8005c16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c24:	88f8      	ldrh	r0, [r7, #6]
 8005c26:	893a      	ldrh	r2, [r7, #8]
 8005c28:	8979      	ldrh	r1, [r7, #10]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	9301      	str	r3, [sp, #4]
 8005c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	4603      	mov	r3, r0
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 f9ed 	bl	8006014 <I2C_RequestMemoryWrite>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d005      	beq.n	8005c4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e0a9      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2bff      	cmp	r3, #255	@ 0xff
 8005c54:	d90e      	bls.n	8005c74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	22ff      	movs	r2, #255	@ 0xff
 8005c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	8979      	ldrh	r1, [r7, #10]
 8005c64:	2300      	movs	r3, #0
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fc45 	bl	80064fc <I2C_TransferConfig>
 8005c72:	e00f      	b.n	8005c94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	8979      	ldrh	r1, [r7, #10]
 8005c86:	2300      	movs	r3, #0
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 fc34 	bl	80064fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 fac7 	bl	800622c <I2C_WaitOnTXISFlagUntilTimeout>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e07b      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cac:	781a      	ldrb	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d034      	beq.n	8005d4c <HAL_I2C_Mem_Write+0x1c8>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d130      	bne.n	8005d4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2180      	movs	r1, #128	@ 0x80
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 fa59 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e04d      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2bff      	cmp	r3, #255	@ 0xff
 8005d0c:	d90e      	bls.n	8005d2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	22ff      	movs	r2, #255	@ 0xff
 8005d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	8979      	ldrh	r1, [r7, #10]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 fbe9 	bl	80064fc <I2C_TransferConfig>
 8005d2a:	e00f      	b.n	8005d4c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	8979      	ldrh	r1, [r7, #10]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fbd8 	bl	80064fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d19e      	bne.n	8005c94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 faa6 	bl	80062ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e01a      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6859      	ldr	r1, [r3, #4]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005da8 <HAL_I2C_Mem_Write+0x224>)
 8005d7e:	400b      	ands	r3, r1
 8005d80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e000      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005d9e:	2302      	movs	r3, #2
  }
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	fe00e800 	.word	0xfe00e800

08005dac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	4608      	mov	r0, r1
 8005db6:	4611      	mov	r1, r2
 8005db8:	461a      	mov	r2, r3
 8005dba:	4603      	mov	r3, r0
 8005dbc:	817b      	strh	r3, [r7, #10]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	813b      	strh	r3, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	f040 80fd 	bne.w	8005fce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <HAL_I2C_Mem_Read+0x34>
 8005dda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d105      	bne.n	8005dec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005de6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0f1      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_I2C_Mem_Read+0x4e>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e0ea      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e02:	f7fe ff0b 	bl	8004c1c <HAL_GetTick>
 8005e06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	2319      	movs	r3, #25
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f9c9 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e0d5      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2222      	movs	r2, #34	@ 0x22
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2240      	movs	r2, #64	@ 0x40
 8005e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a3a      	ldr	r2, [r7, #32]
 8005e3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e4c:	88f8      	ldrh	r0, [r7, #6]
 8005e4e:	893a      	ldrh	r2, [r7, #8]
 8005e50:	8979      	ldrh	r1, [r7, #10]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f92d 	bl	80060bc <I2C_RequestMemoryRead>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e0ad      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	2bff      	cmp	r3, #255	@ 0xff
 8005e7c:	d90e      	bls.n	8005e9c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	22ff      	movs	r2, #255	@ 0xff
 8005e82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	8979      	ldrh	r1, [r7, #10]
 8005e8c:	4b52      	ldr	r3, [pc, #328]	@ (8005fd8 <HAL_I2C_Mem_Read+0x22c>)
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 fb31 	bl	80064fc <I2C_TransferConfig>
 8005e9a:	e00f      	b.n	8005ebc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	8979      	ldrh	r1, [r7, #10]
 8005eae:	4b4a      	ldr	r3, [pc, #296]	@ (8005fd8 <HAL_I2C_Mem_Read+0x22c>)
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 fb20 	bl	80064fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2104      	movs	r1, #4
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 f970 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e07c      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d034      	beq.n	8005f7c <HAL_I2C_Mem_Read+0x1d0>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d130      	bne.n	8005f7c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f20:	2200      	movs	r2, #0
 8005f22:	2180      	movs	r1, #128	@ 0x80
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f941 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e04d      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2bff      	cmp	r3, #255	@ 0xff
 8005f3c:	d90e      	bls.n	8005f5c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	22ff      	movs	r2, #255	@ 0xff
 8005f42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	8979      	ldrh	r1, [r7, #10]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 fad1 	bl	80064fc <I2C_TransferConfig>
 8005f5a:	e00f      	b.n	8005f7c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	8979      	ldrh	r1, [r7, #10]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 fac0 	bl	80064fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d19a      	bne.n	8005ebc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 f98e 	bl	80062ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e01a      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6859      	ldr	r1, [r3, #4]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	4b0b      	ldr	r3, [pc, #44]	@ (8005fdc <HAL_I2C_Mem_Read+0x230>)
 8005fae:	400b      	ands	r3, r1
 8005fb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e000      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005fce:	2302      	movs	r3, #2
  }
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	80002400 	.word	0x80002400
 8005fdc:	fe00e800 	.word	0xfe00e800

08005fe0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fee:	b2db      	uxtb	r3, r3
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	4608      	mov	r0, r1
 800601e:	4611      	mov	r1, r2
 8006020:	461a      	mov	r2, r3
 8006022:	4603      	mov	r3, r0
 8006024:	817b      	strh	r3, [r7, #10]
 8006026:	460b      	mov	r3, r1
 8006028:	813b      	strh	r3, [r7, #8]
 800602a:	4613      	mov	r3, r2
 800602c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800602e:	88fb      	ldrh	r3, [r7, #6]
 8006030:	b2da      	uxtb	r2, r3
 8006032:	8979      	ldrh	r1, [r7, #10]
 8006034:	4b20      	ldr	r3, [pc, #128]	@ (80060b8 <I2C_RequestMemoryWrite+0xa4>)
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fa5d 	bl	80064fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	69b9      	ldr	r1, [r7, #24]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f8f0 	bl	800622c <I2C_WaitOnTXISFlagUntilTimeout>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e02c      	b.n	80060b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006056:	88fb      	ldrh	r3, [r7, #6]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d105      	bne.n	8006068 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800605c:	893b      	ldrh	r3, [r7, #8]
 800605e:	b2da      	uxtb	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	629a      	str	r2, [r3, #40]	@ 0x28
 8006066:	e015      	b.n	8006094 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006068:	893b      	ldrh	r3, [r7, #8]
 800606a:	0a1b      	lsrs	r3, r3, #8
 800606c:	b29b      	uxth	r3, r3
 800606e:	b2da      	uxtb	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	69b9      	ldr	r1, [r7, #24]
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 f8d6 	bl	800622c <I2C_WaitOnTXISFlagUntilTimeout>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e012      	b.n	80060b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800608a:	893b      	ldrh	r3, [r7, #8]
 800608c:	b2da      	uxtb	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	2200      	movs	r2, #0
 800609c:	2180      	movs	r1, #128	@ 0x80
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f884 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e000      	b.n	80060b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	80002000 	.word	0x80002000

080060bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af02      	add	r7, sp, #8
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	4608      	mov	r0, r1
 80060c6:	4611      	mov	r1, r2
 80060c8:	461a      	mov	r2, r3
 80060ca:	4603      	mov	r3, r0
 80060cc:	817b      	strh	r3, [r7, #10]
 80060ce:	460b      	mov	r3, r1
 80060d0:	813b      	strh	r3, [r7, #8]
 80060d2:	4613      	mov	r3, r2
 80060d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80060d6:	88fb      	ldrh	r3, [r7, #6]
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	8979      	ldrh	r1, [r7, #10]
 80060dc:	4b20      	ldr	r3, [pc, #128]	@ (8006160 <I2C_RequestMemoryRead+0xa4>)
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2300      	movs	r3, #0
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 fa0a 	bl	80064fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	69b9      	ldr	r1, [r7, #24]
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f89d 	bl	800622c <I2C_WaitOnTXISFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e02c      	b.n	8006156 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060fc:	88fb      	ldrh	r3, [r7, #6]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d105      	bne.n	800610e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006102:	893b      	ldrh	r3, [r7, #8]
 8006104:	b2da      	uxtb	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	629a      	str	r2, [r3, #40]	@ 0x28
 800610c:	e015      	b.n	800613a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800610e:	893b      	ldrh	r3, [r7, #8]
 8006110:	0a1b      	lsrs	r3, r3, #8
 8006112:	b29b      	uxth	r3, r3
 8006114:	b2da      	uxtb	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	69b9      	ldr	r1, [r7, #24]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f883 	bl	800622c <I2C_WaitOnTXISFlagUntilTimeout>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e012      	b.n	8006156 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006130:	893b      	ldrh	r3, [r7, #8]
 8006132:	b2da      	uxtb	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2200      	movs	r2, #0
 8006142:	2140      	movs	r1, #64	@ 0x40
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f831 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	80002000 	.word	0x80002000

08006164 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b02      	cmp	r3, #2
 8006178:	d103      	bne.n	8006182 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2200      	movs	r2, #0
 8006180:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b01      	cmp	r3, #1
 800618e:	d007      	beq.n	80061a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	619a      	str	r2, [r3, #24]
  }
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	4613      	mov	r3, r2
 80061ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061bc:	e022      	b.n	8006204 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061c4:	d01e      	beq.n	8006204 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c6:	f7fe fd29 	bl	8004c1c <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d302      	bcc.n	80061dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d113      	bne.n	8006204 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e0:	f043 0220 	orr.w	r2, r3, #32
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e00f      	b.n	8006224 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699a      	ldr	r2, [r3, #24]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	4013      	ands	r3, r2
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	429a      	cmp	r2, r3
 8006212:	bf0c      	ite	eq
 8006214:	2301      	moveq	r3, #1
 8006216:	2300      	movne	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	79fb      	ldrb	r3, [r7, #7]
 800621e:	429a      	cmp	r2, r3
 8006220:	d0cd      	beq.n	80061be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006238:	e02c      	b.n	8006294 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f870 	bl	8006324 <I2C_IsErrorOccurred>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e02a      	b.n	80062a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006254:	d01e      	beq.n	8006294 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006256:	f7fe fce1 	bl	8004c1c <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	429a      	cmp	r2, r3
 8006264:	d302      	bcc.n	800626c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d113      	bne.n	8006294 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006270:	f043 0220 	orr.w	r2, r3, #32
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2220      	movs	r2, #32
 800627c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e007      	b.n	80062a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d1cb      	bne.n	800623a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062b8:	e028      	b.n	800630c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 f830 	bl	8006324 <I2C_IsErrorOccurred>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e026      	b.n	800631c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ce:	f7fe fca5 	bl	8004c1c <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d302      	bcc.n	80062e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d113      	bne.n	800630c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e8:	f043 0220 	orr.w	r2, r3, #32
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e007      	b.n	800631c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b20      	cmp	r3, #32
 8006318:	d1cf      	bne.n	80062ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08a      	sub	sp, #40	@ 0x28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	f003 0310 	and.w	r3, r3, #16
 800634c:	2b00      	cmp	r3, #0
 800634e:	d075      	beq.n	800643c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2210      	movs	r2, #16
 8006356:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006358:	e056      	b.n	8006408 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006360:	d052      	beq.n	8006408 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006362:	f7fe fc5b 	bl	8004c1c <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	429a      	cmp	r2, r3
 8006370:	d302      	bcc.n	8006378 <I2C_IsErrorOccurred+0x54>
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d147      	bne.n	8006408 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006382:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800638a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006396:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800639a:	d12e      	bne.n	80063fa <I2C_IsErrorOccurred+0xd6>
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063a2:	d02a      	beq.n	80063fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80063a4:	7cfb      	ldrb	r3, [r7, #19]
 80063a6:	2b20      	cmp	r3, #32
 80063a8:	d027      	beq.n	80063fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80063ba:	f7fe fc2f 	bl	8004c1c <HAL_GetTick>
 80063be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063c0:	e01b      	b.n	80063fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80063c2:	f7fe fc2b 	bl	8004c1c <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b19      	cmp	r3, #25
 80063ce:	d914      	bls.n	80063fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d4:	f043 0220 	orr.w	r2, r3, #32
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

              status = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b20      	cmp	r3, #32
 8006406:	d1dc      	bne.n	80063c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b20      	cmp	r3, #32
 8006414:	d003      	beq.n	800641e <I2C_IsErrorOccurred+0xfa>
 8006416:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800641a:	2b00      	cmp	r3, #0
 800641c:	d09d      	beq.n	800635a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800641e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006422:	2b00      	cmp	r3, #0
 8006424:	d103      	bne.n	800642e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2220      	movs	r2, #32
 800642c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	f043 0304 	orr.w	r3, r3, #4
 8006434:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00b      	beq.n	8006466 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	f043 0301 	orr.w	r3, r3, #1
 8006454:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800645e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00b      	beq.n	8006488 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	f043 0308 	orr.w	r3, r3, #8
 8006476:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006480:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	f043 0302 	orr.w	r3, r3, #2
 8006498:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80064aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d01c      	beq.n	80064ec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f7ff fe56 	bl	8006164 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6859      	ldr	r1, [r3, #4]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	4b0d      	ldr	r3, [pc, #52]	@ (80064f8 <I2C_IsErrorOccurred+0x1d4>)
 80064c4:	400b      	ands	r3, r1
 80064c6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	431a      	orrs	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80064ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3728      	adds	r7, #40	@ 0x28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	fe00e800 	.word	0xfe00e800

080064fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	607b      	str	r3, [r7, #4]
 8006506:	460b      	mov	r3, r1
 8006508:	817b      	strh	r3, [r7, #10]
 800650a:	4613      	mov	r3, r2
 800650c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800650e:	897b      	ldrh	r3, [r7, #10]
 8006510:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006514:	7a7b      	ldrb	r3, [r7, #9]
 8006516:	041b      	lsls	r3, r3, #16
 8006518:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800651c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	4313      	orrs	r3, r2
 8006526:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800652a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	0d5b      	lsrs	r3, r3, #21
 8006536:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800653a:	4b08      	ldr	r3, [pc, #32]	@ (800655c <I2C_TransferConfig+0x60>)
 800653c:	430b      	orrs	r3, r1
 800653e:	43db      	mvns	r3, r3
 8006540:	ea02 0103 	and.w	r1, r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	430a      	orrs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	03ff63ff 	.word	0x03ff63ff

08006560 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b20      	cmp	r3, #32
 8006574:	d138      	bne.n	80065e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006580:	2302      	movs	r3, #2
 8006582:	e032      	b.n	80065ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2224      	movs	r2, #36	@ 0x24
 8006590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0201 	bic.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6819      	ldr	r1, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0201 	orr.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	e000      	b.n	80065ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065e8:	2302      	movs	r3, #2
  }
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b20      	cmp	r3, #32
 800660a:	d139      	bne.n	8006680 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006616:	2302      	movs	r3, #2
 8006618:	e033      	b.n	8006682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2224      	movs	r2, #36	@ 0x24
 8006626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0201 	bic.w	r2, r2, #1
 8006638:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006648:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0201 	orr.w	r2, r2, #1
 800666a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	e000      	b.n	8006682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006680:	2302      	movs	r3, #2
  }
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
	...

08006690 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800669c:	4b0b      	ldr	r3, [pc, #44]	@ (80066cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	73fb      	strb	r3, [r7, #15]
 80066ac:	e007      	b.n	80066be <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80066ae:	4b07      	ldr	r3, [pc, #28]	@ (80066cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f023 0204 	bic.w	r2, r3, #4
 80066b6:	4905      	ldr	r1, [pc, #20]	@ (80066cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	600b      	str	r3, [r1, #0]
  }

  return status;
 80066be:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	40030400 	.word	0x40030400

080066d0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80066d0:	b480      	push	{r7}
 80066d2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80066d4:	4b05      	ldr	r3, [pc, #20]	@ (80066ec <HAL_ICACHE_Enable+0x1c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a04      	ldr	r2, [pc, #16]	@ (80066ec <HAL_ICACHE_Enable+0x1c>)
 80066da:	f043 0301 	orr.w	r3, r3, #1
 80066de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	40030400 	.word	0x40030400

080066f0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80066f8:	4b34      	ldr	r3, [pc, #208]	@ (80067cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80066fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006700:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	429a      	cmp	r2, r3
 8006708:	d101      	bne.n	800670e <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	e057      	b.n	80067be <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006714:	d90a      	bls.n	800672c <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006716:	4b2d      	ldr	r3, [pc, #180]	@ (80067cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4313      	orrs	r3, r2
 8006722:	4a2a      	ldr	r2, [pc, #168]	@ (80067cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006728:	60d3      	str	r3, [r2, #12]
 800672a:	e007      	b.n	800673c <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800672c:	4b27      	ldr	r3, [pc, #156]	@ (80067cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006734:	4925      	ldr	r1, [pc, #148]	@ (80067cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4313      	orrs	r3, r2
 800673a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800673c:	4b24      	ldr	r3, [pc, #144]	@ (80067d0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a24      	ldr	r2, [pc, #144]	@ (80067d4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	099b      	lsrs	r3, r3, #6
 8006748:	2232      	movs	r2, #50	@ 0x32
 800674a:	fb02 f303 	mul.w	r3, r2, r3
 800674e:	4a21      	ldr	r2, [pc, #132]	@ (80067d4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006750:	fba2 2303 	umull	r2, r3, r2, r3
 8006754:	099b      	lsrs	r3, r3, #6
 8006756:	3301      	adds	r3, #1
 8006758:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800675a:	e002      	b.n	8006762 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3b01      	subs	r3, #1
 8006760:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006762:	4b1a      	ldr	r3, [pc, #104]	@ (80067cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <HAL_PWREx_ControlVoltageScaling+0x84>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1f3      	bne.n	800675c <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d01b      	beq.n	80067b2 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800677a:	4b15      	ldr	r3, [pc, #84]	@ (80067d0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a15      	ldr	r2, [pc, #84]	@ (80067d4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006780:	fba2 2303 	umull	r2, r3, r2, r3
 8006784:	099b      	lsrs	r3, r3, #6
 8006786:	2232      	movs	r2, #50	@ 0x32
 8006788:	fb02 f303 	mul.w	r3, r2, r3
 800678c:	4a11      	ldr	r2, [pc, #68]	@ (80067d4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800678e:	fba2 2303 	umull	r2, r3, r2, r3
 8006792:	099b      	lsrs	r3, r3, #6
 8006794:	3301      	adds	r3, #1
 8006796:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006798:	e002      	b.n	80067a0 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3b01      	subs	r3, #1
 800679e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80067a0:	4b0a      	ldr	r3, [pc, #40]	@ (80067cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80067a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d102      	bne.n	80067b2 <HAL_PWREx_ControlVoltageScaling+0xc2>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1f3      	bne.n	800679a <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e000      	b.n	80067be <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	46020800 	.word	0x46020800
 80067d0:	200000a0 	.word	0x200000a0
 80067d4:	10624dd3 	.word	0x10624dd3

080067d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80067dc:	4b04      	ldr	r3, [pc, #16]	@ (80067f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80067de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	46020800 	.word	0x46020800

080067f4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80067fc:	4b22      	ldr	r3, [pc, #136]	@ (8006888 <HAL_PWREx_ConfigSupply+0x94>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a22      	ldr	r2, [pc, #136]	@ (800688c <HAL_PWREx_ConfigSupply+0x98>)
 8006802:	fba2 2303 	umull	r2, r3, r2, r3
 8006806:	099b      	lsrs	r3, r3, #6
 8006808:	2232      	movs	r2, #50	@ 0x32
 800680a:	fb02 f303 	mul.w	r3, r2, r3
 800680e:	4a1f      	ldr	r2, [pc, #124]	@ (800688c <HAL_PWREx_ConfigSupply+0x98>)
 8006810:	fba2 2303 	umull	r2, r3, r2, r3
 8006814:	099b      	lsrs	r3, r3, #6
 8006816:	3301      	adds	r3, #1
 8006818:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d113      	bne.n	8006848 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006820:	4b1b      	ldr	r3, [pc, #108]	@ (8006890 <HAL_PWREx_ConfigSupply+0x9c>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	4a1a      	ldr	r2, [pc, #104]	@ (8006890 <HAL_PWREx_ConfigSupply+0x9c>)
 8006826:	f023 0302 	bic.w	r3, r3, #2
 800682a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800682c:	e002      	b.n	8006834 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3b01      	subs	r3, #1
 8006832:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006834:	4b16      	ldr	r3, [pc, #88]	@ (8006890 <HAL_PWREx_ConfigSupply+0x9c>)
 8006836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b02      	cmp	r3, #2
 800683e:	d116      	bne.n	800686e <HAL_PWREx_ConfigSupply+0x7a>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f3      	bne.n	800682e <HAL_PWREx_ConfigSupply+0x3a>
 8006846:	e012      	b.n	800686e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006848:	4b11      	ldr	r3, [pc, #68]	@ (8006890 <HAL_PWREx_ConfigSupply+0x9c>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	4a10      	ldr	r2, [pc, #64]	@ (8006890 <HAL_PWREx_ConfigSupply+0x9c>)
 800684e:	f043 0302 	orr.w	r3, r3, #2
 8006852:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006854:	e002      	b.n	800685c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3b01      	subs	r3, #1
 800685a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800685c:	4b0c      	ldr	r3, [pc, #48]	@ (8006890 <HAL_PWREx_ConfigSupply+0x9c>)
 800685e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d102      	bne.n	800686e <HAL_PWREx_ConfigSupply+0x7a>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1f3      	bne.n	8006856 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e000      	b.n	800687a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	200000a0 	.word	0x200000a0
 800688c:	10624dd3 	.word	0x10624dd3
 8006890:	46020800 	.word	0x46020800

08006894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08e      	sub	sp, #56	@ 0x38
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800689c:	2300      	movs	r3, #0
 800689e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d102      	bne.n	80068ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	f000 bec3 	b.w	8007634 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ae:	4b9c      	ldr	r3, [pc, #624]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	f003 030c 	and.w	r3, r3, #12
 80068b6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068b8:	4b99      	ldr	r3, [pc, #612]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 80068ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068bc:	f003 0303 	and.w	r3, r3, #3
 80068c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0310 	and.w	r3, r3, #16
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8172 	beq.w	8006bb4 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d007      	beq.n	80068e6 <HAL_RCC_OscConfig+0x52>
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	2b0c      	cmp	r3, #12
 80068da:	f040 80e4 	bne.w	8006aa6 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80068de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	f040 80e0 	bne.w	8006aa6 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80068e6:	4b8e      	ldr	r3, [pc, #568]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d006      	beq.n	8006900 <HAL_RCC_OscConfig+0x6c>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d102      	bne.n	8006900 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f000 be9a 	b.w	8007634 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006904:	4b86      	ldr	r3, [pc, #536]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d004      	beq.n	800691a <HAL_RCC_OscConfig+0x86>
 8006910:	4b83      	ldr	r3, [pc, #524]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006918:	e005      	b.n	8006926 <HAL_RCC_OscConfig+0x92>
 800691a:	4b81      	ldr	r3, [pc, #516]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 800691c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006920:	041b      	lsls	r3, r3, #16
 8006922:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006926:	4293      	cmp	r3, r2
 8006928:	d255      	bcs.n	80069d6 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800692a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006934:	4618      	mov	r0, r3
 8006936:	f001 f9d3 	bl	8007ce0 <RCC_SetFlashLatencyFromMSIRange>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	f000 be77 	b.w	8007634 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006946:	4b76      	ldr	r3, [pc, #472]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	4a75      	ldr	r2, [pc, #468]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 800694c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006950:	6093      	str	r3, [r2, #8]
 8006952:	4b73      	ldr	r3, [pc, #460]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695e:	4970      	ldr	r1, [pc, #448]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006960:	4313      	orrs	r3, r2
 8006962:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800696c:	d309      	bcc.n	8006982 <HAL_RCC_OscConfig+0xee>
 800696e:	4b6c      	ldr	r3, [pc, #432]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f023 021f 	bic.w	r2, r3, #31
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	4969      	ldr	r1, [pc, #420]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 800697c:	4313      	orrs	r3, r2
 800697e:	60cb      	str	r3, [r1, #12]
 8006980:	e07e      	b.n	8006a80 <HAL_RCC_OscConfig+0x1ec>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	da0a      	bge.n	80069a0 <HAL_RCC_OscConfig+0x10c>
 800698a:	4b65      	ldr	r3, [pc, #404]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	015b      	lsls	r3, r3, #5
 8006998:	4961      	ldr	r1, [pc, #388]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 800699a:	4313      	orrs	r3, r2
 800699c:	60cb      	str	r3, [r1, #12]
 800699e:	e06f      	b.n	8006a80 <HAL_RCC_OscConfig+0x1ec>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a8:	d30a      	bcc.n	80069c0 <HAL_RCC_OscConfig+0x12c>
 80069aa:	4b5d      	ldr	r3, [pc, #372]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	029b      	lsls	r3, r3, #10
 80069b8:	4959      	ldr	r1, [pc, #356]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60cb      	str	r3, [r1, #12]
 80069be:	e05f      	b.n	8006a80 <HAL_RCC_OscConfig+0x1ec>
 80069c0:	4b57      	ldr	r3, [pc, #348]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	03db      	lsls	r3, r3, #15
 80069ce:	4954      	ldr	r1, [pc, #336]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60cb      	str	r3, [r1, #12]
 80069d4:	e054      	b.n	8006a80 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80069d6:	4b52      	ldr	r3, [pc, #328]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	4a51      	ldr	r2, [pc, #324]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 80069dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80069e0:	6093      	str	r3, [r2, #8]
 80069e2:	4b4f      	ldr	r3, [pc, #316]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ee:	494c      	ldr	r1, [pc, #304]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80069fc:	d309      	bcc.n	8006a12 <HAL_RCC_OscConfig+0x17e>
 80069fe:	4b48      	ldr	r3, [pc, #288]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f023 021f 	bic.w	r2, r3, #31
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	4945      	ldr	r1, [pc, #276]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60cb      	str	r3, [r1, #12]
 8006a10:	e028      	b.n	8006a64 <HAL_RCC_OscConfig+0x1d0>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	da0a      	bge.n	8006a30 <HAL_RCC_OscConfig+0x19c>
 8006a1a:	4b41      	ldr	r3, [pc, #260]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	015b      	lsls	r3, r3, #5
 8006a28:	493d      	ldr	r1, [pc, #244]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60cb      	str	r3, [r1, #12]
 8006a2e:	e019      	b.n	8006a64 <HAL_RCC_OscConfig+0x1d0>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a38:	d30a      	bcc.n	8006a50 <HAL_RCC_OscConfig+0x1bc>
 8006a3a:	4b39      	ldr	r3, [pc, #228]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	029b      	lsls	r3, r3, #10
 8006a48:	4935      	ldr	r1, [pc, #212]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60cb      	str	r3, [r1, #12]
 8006a4e:	e009      	b.n	8006a64 <HAL_RCC_OscConfig+0x1d0>
 8006a50:	4b33      	ldr	r3, [pc, #204]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	03db      	lsls	r3, r3, #15
 8006a5e:	4930      	ldr	r1, [pc, #192]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 f936 	bl	8007ce0 <RCC_SetFlashLatencyFromMSIRange>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f000 bdda 	b.w	8007634 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006a80:	f001 f8d8 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006a84:	4b27      	ldr	r3, [pc, #156]	@ (8006b24 <HAL_RCC_OscConfig+0x290>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fe f87d 	bl	8004b88 <HAL_InitTick>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006a94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 808a 	beq.w	8006bb2 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8006a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006aa2:	f000 bdc7 	b.w	8007634 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d066      	beq.n	8006b7c <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006aae:	4b1c      	ldr	r3, [pc, #112]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006ab4:	f043 0301 	orr.w	r3, r3, #1
 8006ab8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006aba:	f7fe f8af 	bl	8004c1c <HAL_GetTick>
 8006abe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006ac0:	e009      	b.n	8006ad6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ac2:	f7fe f8ab 	bl	8004c1c <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d902      	bls.n	8006ad6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	f000 bdaf 	b.w	8007634 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006ad6:	4b12      	ldr	r3, [pc, #72]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0ef      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006ae8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006aec:	6093      	str	r3, [r2, #8]
 8006aee:	4b0c      	ldr	r3, [pc, #48]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afa:	4909      	ldr	r1, [pc, #36]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b04:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006b08:	d30e      	bcc.n	8006b28 <HAL_RCC_OscConfig+0x294>
 8006b0a:	4b05      	ldr	r3, [pc, #20]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f023 021f 	bic.w	r2, r3, #31
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	4902      	ldr	r1, [pc, #8]	@ (8006b20 <HAL_RCC_OscConfig+0x28c>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60cb      	str	r3, [r1, #12]
 8006b1c:	e04a      	b.n	8006bb4 <HAL_RCC_OscConfig+0x320>
 8006b1e:	bf00      	nop
 8006b20:	46020c00 	.word	0x46020c00
 8006b24:	200000a4 	.word	0x200000a4
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	da0a      	bge.n	8006b46 <HAL_RCC_OscConfig+0x2b2>
 8006b30:	4b9b      	ldr	r3, [pc, #620]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	015b      	lsls	r3, r3, #5
 8006b3e:	4998      	ldr	r1, [pc, #608]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60cb      	str	r3, [r1, #12]
 8006b44:	e036      	b.n	8006bb4 <HAL_RCC_OscConfig+0x320>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b4e:	d30a      	bcc.n	8006b66 <HAL_RCC_OscConfig+0x2d2>
 8006b50:	4b93      	ldr	r3, [pc, #588]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	029b      	lsls	r3, r3, #10
 8006b5e:	4990      	ldr	r1, [pc, #576]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	60cb      	str	r3, [r1, #12]
 8006b64:	e026      	b.n	8006bb4 <HAL_RCC_OscConfig+0x320>
 8006b66:	4b8e      	ldr	r3, [pc, #568]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	03db      	lsls	r3, r3, #15
 8006b74:	498a      	ldr	r1, [pc, #552]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60cb      	str	r3, [r1, #12]
 8006b7a:	e01b      	b.n	8006bb4 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006b7c:	4b88      	ldr	r3, [pc, #544]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a87      	ldr	r2, [pc, #540]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006b82:	f023 0301 	bic.w	r3, r3, #1
 8006b86:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006b88:	f7fe f848 	bl	8004c1c <HAL_GetTick>
 8006b8c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006b8e:	e009      	b.n	8006ba4 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b90:	f7fe f844 	bl	8004c1c <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d902      	bls.n	8006ba4 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	f000 bd48 	b.w	8007634 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006ba4:	4b7e      	ldr	r3, [pc, #504]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1ef      	bne.n	8006b90 <HAL_RCC_OscConfig+0x2fc>
 8006bb0:	e000      	b.n	8006bb4 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006bb2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8094 	beq.w	8006cea <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d005      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x340>
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bca:	2b0c      	cmp	r3, #12
 8006bcc:	d110      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d10d      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd4:	4b72      	ldr	r3, [pc, #456]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 8083 	beq.w	8006ce8 <HAL_RCC_OscConfig+0x454>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d17e      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	f000 bd22 	b.w	8007634 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bf8:	d106      	bne.n	8006c08 <HAL_RCC_OscConfig+0x374>
 8006bfa:	4b69      	ldr	r3, [pc, #420]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a68      	ldr	r2, [pc, #416]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	e041      	b.n	8006c8c <HAL_RCC_OscConfig+0x3f8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c10:	d112      	bne.n	8006c38 <HAL_RCC_OscConfig+0x3a4>
 8006c12:	4b63      	ldr	r3, [pc, #396]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a62      	ldr	r2, [pc, #392]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	4b60      	ldr	r3, [pc, #384]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a5f      	ldr	r2, [pc, #380]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	4b5d      	ldr	r3, [pc, #372]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	e029      	b.n	8006c8c <HAL_RCC_OscConfig+0x3f8>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006c40:	d112      	bne.n	8006c68 <HAL_RCC_OscConfig+0x3d4>
 8006c42:	4b57      	ldr	r3, [pc, #348]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a56      	ldr	r2, [pc, #344]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	4b54      	ldr	r3, [pc, #336]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a53      	ldr	r2, [pc, #332]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	4b51      	ldr	r3, [pc, #324]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a50      	ldr	r2, [pc, #320]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	e011      	b.n	8006c8c <HAL_RCC_OscConfig+0x3f8>
 8006c68:	4b4d      	ldr	r3, [pc, #308]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a4c      	ldr	r2, [pc, #304]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	4b4a      	ldr	r3, [pc, #296]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a49      	ldr	r2, [pc, #292]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	4b47      	ldr	r3, [pc, #284]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a46      	ldr	r2, [pc, #280]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006c86:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d014      	beq.n	8006cbe <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8006c94:	f7fd ffc2 	bl	8004c1c <HAL_GetTick>
 8006c98:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c9a:	e009      	b.n	8006cb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c9c:	f7fd ffbe 	bl	8004c1c <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b64      	cmp	r3, #100	@ 0x64
 8006ca8:	d902      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	f000 bcc2 	b.w	8007634 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cb0:	4b3b      	ldr	r3, [pc, #236]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0ef      	beq.n	8006c9c <HAL_RCC_OscConfig+0x408>
 8006cbc:	e015      	b.n	8006cea <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006cbe:	f7fd ffad 	bl	8004c1c <HAL_GetTick>
 8006cc2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006cc4:	e009      	b.n	8006cda <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cc6:	f7fd ffa9 	bl	8004c1c <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2b64      	cmp	r3, #100	@ 0x64
 8006cd2:	d902      	bls.n	8006cda <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	f000 bcad 	b.w	8007634 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006cda:	4b31      	ldr	r3, [pc, #196]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1ef      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x432>
 8006ce6:	e000      	b.n	8006cea <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d066      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	2b04      	cmp	r3, #4
 8006cfa:	d005      	beq.n	8006d08 <HAL_RCC_OscConfig+0x474>
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	2b0c      	cmp	r3, #12
 8006d00:	d11a      	bne.n	8006d38 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d117      	bne.n	8006d38 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d08:	4b25      	ldr	r3, [pc, #148]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d006      	beq.n	8006d22 <HAL_RCC_OscConfig+0x48e>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f000 bc89 	b.w	8007634 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006d22:	4b1f      	ldr	r3, [pc, #124]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	041b      	lsls	r3, r3, #16
 8006d30:	491b      	ldr	r1, [pc, #108]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d36:	e045      	b.n	8006dc4 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d024      	beq.n	8006d8a <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006d40:	4b17      	ldr	r3, [pc, #92]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a16      	ldr	r2, [pc, #88]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d4a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006d4c:	f7fd ff66 	bl	8004c1c <HAL_GetTick>
 8006d50:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d52:	e009      	b.n	8006d68 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d54:	f7fd ff62 	bl	8004c1c <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d902      	bls.n	8006d68 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	f000 bc66 	b.w	8007634 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d68:	4b0d      	ldr	r3, [pc, #52]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0ef      	beq.n	8006d54 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006d74:	4b0a      	ldr	r3, [pc, #40]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	041b      	lsls	r3, r3, #16
 8006d82:	4907      	ldr	r1, [pc, #28]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	610b      	str	r3, [r1, #16]
 8006d88:	e01c      	b.n	8006dc4 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006d8a:	4b05      	ldr	r3, [pc, #20]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a04      	ldr	r2, [pc, #16]	@ (8006da0 <HAL_RCC_OscConfig+0x50c>)
 8006d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d94:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006d96:	f7fd ff41 	bl	8004c1c <HAL_GetTick>
 8006d9a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d9c:	e00c      	b.n	8006db8 <HAL_RCC_OscConfig+0x524>
 8006d9e:	bf00      	nop
 8006da0:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006da4:	f7fd ff3a 	bl	8004c1c <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d902      	bls.n	8006db8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	f000 bc3e 	b.w	8007634 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006db8:	4baf      	ldr	r3, [pc, #700]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1ef      	bne.n	8006da4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 80c7 	beq.w	8006f60 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dd8:	4ba7      	ldr	r3, [pc, #668]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dde:	f003 0304 	and.w	r3, r3, #4
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d111      	bne.n	8006e0a <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006de6:	4ba4      	ldr	r3, [pc, #656]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dec:	4aa2      	ldr	r2, [pc, #648]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006dee:	f043 0304 	orr.w	r3, r3, #4
 8006df2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006df6:	4ba0      	ldr	r3, [pc, #640]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006e04:	2301      	movs	r3, #1
 8006e06:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006e0a:	4b9c      	ldr	r3, [pc, #624]	@ (800707c <HAL_RCC_OscConfig+0x7e8>)
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d118      	bne.n	8006e48 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006e16:	4b99      	ldr	r3, [pc, #612]	@ (800707c <HAL_RCC_OscConfig+0x7e8>)
 8006e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1a:	4a98      	ldr	r2, [pc, #608]	@ (800707c <HAL_RCC_OscConfig+0x7e8>)
 8006e1c:	f043 0301 	orr.w	r3, r3, #1
 8006e20:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e22:	f7fd fefb 	bl	8004c1c <HAL_GetTick>
 8006e26:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006e28:	e008      	b.n	8006e3c <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e2a:	f7fd fef7 	bl	8004c1c <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d901      	bls.n	8006e3c <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e3fb      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006e3c:	4b8f      	ldr	r3, [pc, #572]	@ (800707c <HAL_RCC_OscConfig+0x7e8>)
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0f0      	beq.n	8006e2a <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d05f      	beq.n	8006f10 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006e50:	4b89      	ldr	r3, [pc, #548]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006e52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e56:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	699a      	ldr	r2, [r3, #24]
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d037      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d006      	beq.n	8006e7e <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e3da      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d01b      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8006e88:	4b7b      	ldr	r3, [pc, #492]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e8e:	4a7a      	ldr	r2, [pc, #488]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006e90:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006e94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8006e98:	f7fd fec0 	bl	8004c1c <HAL_GetTick>
 8006e9c:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ea0:	f7fd febc 	bl	8004c1c <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e3c0      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006eb2:	4b71      	ldr	r3, [pc, #452]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1ef      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006ec0:	4b6d      	ldr	r3, [pc, #436]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006ec2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ec6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	496a      	ldr	r1, [pc, #424]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006ed6:	4b68      	ldr	r3, [pc, #416]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006edc:	4a66      	ldr	r2, [pc, #408]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006ede:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006ee6:	f7fd fe99 	bl	8004c1c <HAL_GetTick>
 8006eea:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006eec:	e008      	b.n	8006f00 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eee:	f7fd fe95 	bl	8004c1c <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d901      	bls.n	8006f00 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e399      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006f00:	4b5d      	ldr	r3, [pc, #372]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006f02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0ef      	beq.n	8006eee <HAL_RCC_OscConfig+0x65a>
 8006f0e:	e01b      	b.n	8006f48 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006f10:	4b59      	ldr	r3, [pc, #356]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f16:	4a58      	ldr	r2, [pc, #352]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006f18:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006f1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006f20:	f7fd fe7c 	bl	8004c1c <HAL_GetTick>
 8006f24:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006f26:	e008      	b.n	8006f3a <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f28:	f7fd fe78 	bl	8004c1c <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e37c      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1ef      	bne.n	8006f28 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f48:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d107      	bne.n	8006f60 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f50:	4b49      	ldr	r3, [pc, #292]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f56:	4a48      	ldr	r2, [pc, #288]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006f58:	f023 0304 	bic.w	r3, r3, #4
 8006f5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 8112 	beq.w	8007192 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f74:	4b40      	ldr	r3, [pc, #256]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f7a:	f003 0304 	and.w	r3, r3, #4
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d111      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f82:	4b3d      	ldr	r3, [pc, #244]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f88:	4a3b      	ldr	r2, [pc, #236]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006f8a:	f043 0304 	orr.w	r3, r3, #4
 8006f8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006f92:	4b39      	ldr	r3, [pc, #228]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	613b      	str	r3, [r7, #16]
 8006f9e:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006fa6:	4b35      	ldr	r3, [pc, #212]	@ (800707c <HAL_RCC_OscConfig+0x7e8>)
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d118      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006fb2:	4b32      	ldr	r3, [pc, #200]	@ (800707c <HAL_RCC_OscConfig+0x7e8>)
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb6:	4a31      	ldr	r2, [pc, #196]	@ (800707c <HAL_RCC_OscConfig+0x7e8>)
 8006fb8:	f043 0301 	orr.w	r3, r3, #1
 8006fbc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fbe:	f7fd fe2d 	bl	8004c1c <HAL_GetTick>
 8006fc2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006fc4:	e008      	b.n	8006fd8 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fc6:	f7fd fe29 	bl	8004c1c <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d901      	bls.n	8006fd8 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e32d      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006fd8:	4b28      	ldr	r3, [pc, #160]	@ (800707c <HAL_RCC_OscConfig+0x7e8>)
 8006fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d0f0      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d01f      	beq.n	8007030 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f003 0304 	and.w	r3, r3, #4
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d010      	beq.n	800701e <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8006ffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007002:	4a1d      	ldr	r2, [pc, #116]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8007004:	f043 0304 	orr.w	r3, r3, #4
 8007008:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800700c:	4b1a      	ldr	r3, [pc, #104]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 800700e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007012:	4a19      	ldr	r2, [pc, #100]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8007014:	f043 0301 	orr.w	r3, r3, #1
 8007018:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800701c:	e018      	b.n	8007050 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800701e:	4b16      	ldr	r3, [pc, #88]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8007020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007024:	4a14      	ldr	r2, [pc, #80]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8007026:	f043 0301 	orr.w	r3, r3, #1
 800702a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800702e:	e00f      	b.n	8007050 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007030:	4b11      	ldr	r3, [pc, #68]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8007032:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007036:	4a10      	ldr	r2, [pc, #64]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007040:	4b0d      	ldr	r3, [pc, #52]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8007042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007046:	4a0c      	ldr	r2, [pc, #48]	@ (8007078 <HAL_RCC_OscConfig+0x7e4>)
 8007048:	f023 0304 	bic.w	r3, r3, #4
 800704c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d058      	beq.n	800710a <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8007058:	f7fd fde0 	bl	8004c1c <HAL_GetTick>
 800705c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800705e:	e00f      	b.n	8007080 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007060:	f7fd fddc 	bl	8004c1c <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800706e:	4293      	cmp	r3, r2
 8007070:	d906      	bls.n	8007080 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e2de      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
 8007076:	bf00      	nop
 8007078:	46020c00 	.word	0x46020c00
 800707c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007080:	4b9c      	ldr	r3, [pc, #624]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 8007082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0e8      	beq.n	8007060 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007096:	2b00      	cmp	r3, #0
 8007098:	d01b      	beq.n	80070d2 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800709a:	4b96      	ldr	r3, [pc, #600]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 800709c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070a0:	4a94      	ldr	r2, [pc, #592]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80070a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80070aa:	e00a      	b.n	80070c2 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ac:	f7fd fdb6 	bl	8004c1c <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e2b8      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80070c2:	4b8c      	ldr	r3, [pc, #560]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80070c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0ed      	beq.n	80070ac <HAL_RCC_OscConfig+0x818>
 80070d0:	e053      	b.n	800717a <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80070d2:	4b88      	ldr	r3, [pc, #544]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80070d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070d8:	4a86      	ldr	r2, [pc, #536]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80070da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80070e2:	e00a      	b.n	80070fa <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070e4:	f7fd fd9a 	bl	8004c1c <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e29c      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80070fa:	4b7e      	ldr	r3, [pc, #504]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80070fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007100:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1ed      	bne.n	80070e4 <HAL_RCC_OscConfig+0x850>
 8007108:	e037      	b.n	800717a <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800710a:	f7fd fd87 	bl	8004c1c <HAL_GetTick>
 800710e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007110:	e00a      	b.n	8007128 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007112:	f7fd fd83 	bl	8004c1c <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007120:	4293      	cmp	r3, r2
 8007122:	d901      	bls.n	8007128 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e285      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007128:	4b72      	ldr	r3, [pc, #456]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 800712a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1ed      	bne.n	8007112 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007136:	4b6f      	ldr	r3, [pc, #444]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 8007138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800713c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007140:	2b00      	cmp	r3, #0
 8007142:	d01a      	beq.n	800717a <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007144:	4b6b      	ldr	r3, [pc, #428]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 8007146:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800714a:	4a6a      	ldr	r2, [pc, #424]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 800714c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007150:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007154:	e00a      	b.n	800716c <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007156:	f7fd fd61 	bl	8004c1c <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007164:	4293      	cmp	r3, r2
 8007166:	d901      	bls.n	800716c <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e263      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800716c:	4b61      	ldr	r3, [pc, #388]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 800716e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1ed      	bne.n	8007156 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800717a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800717e:	2b01      	cmp	r3, #1
 8007180:	d107      	bne.n	8007192 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007182:	4b5c      	ldr	r3, [pc, #368]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 8007184:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007188:	4a5a      	ldr	r2, [pc, #360]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 800718a:	f023 0304 	bic.w	r3, r3, #4
 800718e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0320 	and.w	r3, r3, #32
 800719a:	2b00      	cmp	r3, #0
 800719c:	d036      	beq.n	800720c <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d019      	beq.n	80071da <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80071a6:	4b53      	ldr	r3, [pc, #332]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a52      	ldr	r2, [pc, #328]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80071ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80071b0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80071b2:	f7fd fd33 	bl	8004c1c <HAL_GetTick>
 80071b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80071b8:	e008      	b.n	80071cc <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071ba:	f7fd fd2f 	bl	8004c1c <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d901      	bls.n	80071cc <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e233      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80071cc:	4b49      	ldr	r3, [pc, #292]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0f0      	beq.n	80071ba <HAL_RCC_OscConfig+0x926>
 80071d8:	e018      	b.n	800720c <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80071da:	4b46      	ldr	r3, [pc, #280]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a45      	ldr	r2, [pc, #276]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80071e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071e4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80071e6:	f7fd fd19 	bl	8004c1c <HAL_GetTick>
 80071ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80071ec:	e008      	b.n	8007200 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071ee:	f7fd fd15 	bl	8004c1c <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d901      	bls.n	8007200 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e219      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007200:	4b3c      	ldr	r3, [pc, #240]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1f0      	bne.n	80071ee <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007214:	2b00      	cmp	r3, #0
 8007216:	d036      	beq.n	8007286 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721c:	2b00      	cmp	r3, #0
 800721e:	d019      	beq.n	8007254 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8007220:	4b34      	ldr	r3, [pc, #208]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a33      	ldr	r2, [pc, #204]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 8007226:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800722a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800722c:	f7fd fcf6 	bl	8004c1c <HAL_GetTick>
 8007230:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007232:	e008      	b.n	8007246 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007234:	f7fd fcf2 	bl	8004c1c <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	2b02      	cmp	r3, #2
 8007240:	d901      	bls.n	8007246 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e1f6      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007246:	4b2b      	ldr	r3, [pc, #172]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d0f0      	beq.n	8007234 <HAL_RCC_OscConfig+0x9a0>
 8007252:	e018      	b.n	8007286 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007254:	4b27      	ldr	r3, [pc, #156]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a26      	ldr	r2, [pc, #152]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 800725a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800725e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007260:	f7fd fcdc 	bl	8004c1c <HAL_GetTick>
 8007264:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007268:	f7fd fcd8 	bl	8004c1c <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e1dc      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800727a:	4b1e      	ldr	r3, [pc, #120]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1f0      	bne.n	8007268 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800728e:	2b00      	cmp	r3, #0
 8007290:	d07f      	beq.n	8007392 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007296:	2b00      	cmp	r3, #0
 8007298:	d062      	beq.n	8007360 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800729a:	4b16      	ldr	r3, [pc, #88]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	4a15      	ldr	r2, [pc, #84]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80072a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80072a4:	6093      	str	r3, [r2, #8]
 80072a6:	4b13      	ldr	r3, [pc, #76]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b2:	4910      	ldr	r1, [pc, #64]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072bc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80072c0:	d309      	bcc.n	80072d6 <HAL_RCC_OscConfig+0xa42>
 80072c2:	4b0c      	ldr	r3, [pc, #48]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f023 021f 	bic.w	r2, r3, #31
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	4909      	ldr	r1, [pc, #36]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60cb      	str	r3, [r1, #12]
 80072d4:	e02a      	b.n	800732c <HAL_RCC_OscConfig+0xa98>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072da:	2b00      	cmp	r3, #0
 80072dc:	da0c      	bge.n	80072f8 <HAL_RCC_OscConfig+0xa64>
 80072de:	4b05      	ldr	r3, [pc, #20]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	015b      	lsls	r3, r3, #5
 80072ec:	4901      	ldr	r1, [pc, #4]	@ (80072f4 <HAL_RCC_OscConfig+0xa60>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60cb      	str	r3, [r1, #12]
 80072f2:	e01b      	b.n	800732c <HAL_RCC_OscConfig+0xa98>
 80072f4:	46020c00 	.word	0x46020c00
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007300:	d30a      	bcc.n	8007318 <HAL_RCC_OscConfig+0xa84>
 8007302:	4ba5      	ldr	r3, [pc, #660]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	029b      	lsls	r3, r3, #10
 8007310:	49a1      	ldr	r1, [pc, #644]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007312:	4313      	orrs	r3, r2
 8007314:	60cb      	str	r3, [r1, #12]
 8007316:	e009      	b.n	800732c <HAL_RCC_OscConfig+0xa98>
 8007318:	4b9f      	ldr	r3, [pc, #636]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	03db      	lsls	r3, r3, #15
 8007326:	499c      	ldr	r1, [pc, #624]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007328:	4313      	orrs	r3, r2
 800732a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800732c:	4b9a      	ldr	r3, [pc, #616]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a99      	ldr	r2, [pc, #612]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007332:	f043 0310 	orr.w	r3, r3, #16
 8007336:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007338:	f7fd fc70 	bl	8004c1c <HAL_GetTick>
 800733c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800733e:	e008      	b.n	8007352 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007340:	f7fd fc6c 	bl	8004c1c <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d901      	bls.n	8007352 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e170      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007352:	4b91      	ldr	r3, [pc, #580]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0320 	and.w	r3, r3, #32
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0f0      	beq.n	8007340 <HAL_RCC_OscConfig+0xaac>
 800735e:	e018      	b.n	8007392 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007360:	4b8d      	ldr	r3, [pc, #564]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a8c      	ldr	r2, [pc, #560]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007366:	f023 0310 	bic.w	r3, r3, #16
 800736a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800736c:	f7fd fc56 	bl	8004c1c <HAL_GetTick>
 8007370:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007372:	e008      	b.n	8007386 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007374:	f7fd fc52 	bl	8004c1c <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	2b02      	cmp	r3, #2
 8007380:	d901      	bls.n	8007386 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e156      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007386:	4b84      	ldr	r3, [pc, #528]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1f0      	bne.n	8007374 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 814b 	beq.w	8007632 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800739c:	2300      	movs	r3, #0
 800739e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073a2:	4b7d      	ldr	r3, [pc, #500]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 80073a4:	69db      	ldr	r3, [r3, #28]
 80073a6:	f003 030c 	and.w	r3, r3, #12
 80073aa:	2b0c      	cmp	r3, #12
 80073ac:	f000 80fa 	beq.w	80075a4 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	f040 80cc 	bne.w	8007552 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80073ba:	4b77      	ldr	r3, [pc, #476]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a76      	ldr	r2, [pc, #472]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 80073c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073c4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80073c6:	f7fd fc29 	bl	8004c1c <HAL_GetTick>
 80073ca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80073cc:	e008      	b.n	80073e0 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073ce:	f7fd fc25 	bl	8004c1c <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d901      	bls.n	80073e0 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e129      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80073e0:	4b6d      	ldr	r3, [pc, #436]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1f0      	bne.n	80073ce <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073ec:	4b6a      	ldr	r3, [pc, #424]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 80073ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073f2:	f003 0304 	and.w	r3, r3, #4
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d111      	bne.n	800741e <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80073fa:	4b67      	ldr	r3, [pc, #412]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 80073fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007400:	4a65      	ldr	r2, [pc, #404]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007402:	f043 0304 	orr.w	r3, r3, #4
 8007406:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800740a:	4b63      	ldr	r3, [pc, #396]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 800740c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8007418:	2301      	movs	r3, #1
 800741a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800741e:	4b5f      	ldr	r3, [pc, #380]	@ (800759c <HAL_RCC_OscConfig+0xd08>)
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007426:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800742a:	d102      	bne.n	8007432 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 800742c:	2301      	movs	r3, #1
 800742e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007432:	4b5a      	ldr	r3, [pc, #360]	@ (800759c <HAL_RCC_OscConfig+0xd08>)
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	4a59      	ldr	r2, [pc, #356]	@ (800759c <HAL_RCC_OscConfig+0xd08>)
 8007438:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800743c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800743e:	4b56      	ldr	r3, [pc, #344]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007442:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007446:	f023 0303 	bic.w	r3, r3, #3
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007452:	3a01      	subs	r2, #1
 8007454:	0212      	lsls	r2, r2, #8
 8007456:	4311      	orrs	r1, r2
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800745c:	430a      	orrs	r2, r1
 800745e:	494e      	ldr	r1, [pc, #312]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007460:	4313      	orrs	r3, r2
 8007462:	628b      	str	r3, [r1, #40]	@ 0x28
 8007464:	4b4c      	ldr	r3, [pc, #304]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007466:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007468:	4b4d      	ldr	r3, [pc, #308]	@ (80075a0 <HAL_RCC_OscConfig+0xd0c>)
 800746a:	4013      	ands	r3, r2
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007470:	3a01      	subs	r2, #1
 8007472:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800747a:	3a01      	subs	r2, #1
 800747c:	0252      	lsls	r2, r2, #9
 800747e:	b292      	uxth	r2, r2
 8007480:	4311      	orrs	r1, r2
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007486:	3a01      	subs	r2, #1
 8007488:	0412      	lsls	r2, r2, #16
 800748a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800748e:	4311      	orrs	r1, r2
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007494:	3a01      	subs	r2, #1
 8007496:	0612      	lsls	r2, r2, #24
 8007498:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800749c:	430a      	orrs	r2, r1
 800749e:	493e      	ldr	r1, [pc, #248]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80074a4:	4b3c      	ldr	r3, [pc, #240]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 80074a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a8:	4a3b      	ldr	r2, [pc, #236]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 80074aa:	f023 0310 	bic.w	r3, r3, #16
 80074ae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80074b0:	4b39      	ldr	r3, [pc, #228]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 80074b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074b8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80074c0:	00d2      	lsls	r2, r2, #3
 80074c2:	4935      	ldr	r1, [pc, #212]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	638b      	str	r3, [r1, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80074c8:	4b33      	ldr	r3, [pc, #204]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 80074ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074cc:	4a32      	ldr	r2, [pc, #200]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 80074ce:	f043 0310 	orr.w	r3, r3, #16
 80074d2:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80074d4:	4b30      	ldr	r3, [pc, #192]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 80074d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d8:	f023 020c 	bic.w	r2, r3, #12
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e0:	492d      	ldr	r1, [pc, #180]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80074e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d105      	bne.n	80074fa <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80074ee:	4b2b      	ldr	r3, [pc, #172]	@ (800759c <HAL_RCC_OscConfig+0xd08>)
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	4a2a      	ldr	r2, [pc, #168]	@ (800759c <HAL_RCC_OscConfig+0xd08>)
 80074f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074f8:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80074fa:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d107      	bne.n	8007512 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8007502:	4b25      	ldr	r3, [pc, #148]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007508:	4a23      	ldr	r2, [pc, #140]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 800750a:	f023 0304 	bic.w	r3, r3, #4
 800750e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007512:	4b21      	ldr	r3, [pc, #132]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007516:	4a20      	ldr	r2, [pc, #128]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800751c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800751e:	4b1e      	ldr	r3, [pc, #120]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a1d      	ldr	r2, [pc, #116]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007524:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007528:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800752a:	f7fd fb77 	bl	8004c1c <HAL_GetTick>
 800752e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007530:	e008      	b.n	8007544 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007532:	f7fd fb73 	bl	8004c1c <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	2b02      	cmp	r3, #2
 800753e:	d901      	bls.n	8007544 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e077      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007544:	4b14      	ldr	r3, [pc, #80]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d0f0      	beq.n	8007532 <HAL_RCC_OscConfig+0xc9e>
 8007550:	e06f      	b.n	8007632 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007552:	4b11      	ldr	r3, [pc, #68]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a10      	ldr	r2, [pc, #64]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007558:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800755c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800755e:	f7fd fb5d 	bl	8004c1c <HAL_GetTick>
 8007562:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007564:	e008      	b.n	8007578 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007566:	f7fd fb59 	bl	8004c1c <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b02      	cmp	r3, #2
 8007572:	d901      	bls.n	8007578 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e05d      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007578:	4b07      	ldr	r3, [pc, #28]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1f0      	bne.n	8007566 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007584:	4b04      	ldr	r3, [pc, #16]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 8007586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007588:	4a03      	ldr	r2, [pc, #12]	@ (8007598 <HAL_RCC_OscConfig+0xd04>)
 800758a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800758e:	f023 0303 	bic.w	r3, r3, #3
 8007592:	6293      	str	r3, [r2, #40]	@ 0x28
 8007594:	e04d      	b.n	8007632 <HAL_RCC_OscConfig+0xd9e>
 8007596:	bf00      	nop
 8007598:	46020c00 	.word	0x46020c00
 800759c:	46020800 	.word	0x46020800
 80075a0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80075a4:	4b25      	ldr	r3, [pc, #148]	@ (800763c <HAL_RCC_OscConfig+0xda8>)
 80075a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80075aa:	4b24      	ldr	r3, [pc, #144]	@ (800763c <HAL_RCC_OscConfig+0xda8>)
 80075ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ae:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d03a      	beq.n	800762e <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	f003 0203 	and.w	r2, r3, #3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d133      	bne.n	800762e <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	0a1b      	lsrs	r3, r3, #8
 80075ca:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d12a      	bne.n	800762e <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	0b1b      	lsrs	r3, r3, #12
 80075dc:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d122      	bne.n	800762e <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075f2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d11a      	bne.n	800762e <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	0a5b      	lsrs	r3, r3, #9
 80075fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007604:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007606:	429a      	cmp	r2, r3
 8007608:	d111      	bne.n	800762e <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	0c1b      	lsrs	r3, r3, #16
 800760e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007616:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007618:	429a      	cmp	r2, r3
 800761a:	d108      	bne.n	800762e <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	0e1b      	lsrs	r3, r3, #24
 8007620:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007628:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800762a:	429a      	cmp	r2, r3
 800762c:	d001      	beq.n	8007632 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3738      	adds	r7, #56	@ 0x38
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	46020c00 	.word	0x46020c00

08007640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e1d9      	b.n	8007a08 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007654:	4b9b      	ldr	r3, [pc, #620]	@ (80078c4 <HAL_RCC_ClockConfig+0x284>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 030f 	and.w	r3, r3, #15
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	429a      	cmp	r2, r3
 8007660:	d910      	bls.n	8007684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007662:	4b98      	ldr	r3, [pc, #608]	@ (80078c4 <HAL_RCC_ClockConfig+0x284>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f023 020f 	bic.w	r2, r3, #15
 800766a:	4996      	ldr	r1, [pc, #600]	@ (80078c4 <HAL_RCC_ClockConfig+0x284>)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	4313      	orrs	r3, r2
 8007670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007672:	4b94      	ldr	r3, [pc, #592]	@ (80078c4 <HAL_RCC_ClockConfig+0x284>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 030f 	and.w	r3, r3, #15
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	429a      	cmp	r2, r3
 800767e:	d001      	beq.n	8007684 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e1c1      	b.n	8007a08 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0310 	and.w	r3, r3, #16
 800768c:	2b00      	cmp	r3, #0
 800768e:	d010      	beq.n	80076b2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	695a      	ldr	r2, [r3, #20]
 8007694:	4b8c      	ldr	r3, [pc, #560]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 8007696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007698:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800769c:	429a      	cmp	r2, r3
 800769e:	d908      	bls.n	80076b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80076a0:	4b89      	ldr	r3, [pc, #548]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 80076a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	4986      	ldr	r1, [pc, #536]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0308 	and.w	r3, r3, #8
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d012      	beq.n	80076e4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691a      	ldr	r2, [r3, #16]
 80076c2:	4b81      	ldr	r3, [pc, #516]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	091b      	lsrs	r3, r3, #4
 80076c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d909      	bls.n	80076e4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80076d0:	4b7d      	ldr	r3, [pc, #500]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	497a      	ldr	r1, [pc, #488]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d010      	beq.n	8007712 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	4b74      	ldr	r3, [pc, #464]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d908      	bls.n	8007712 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007700:	4b71      	ldr	r3, [pc, #452]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	496e      	ldr	r1, [pc, #440]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 800770e:	4313      	orrs	r3, r2
 8007710:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d010      	beq.n	8007740 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689a      	ldr	r2, [r3, #8]
 8007722:	4b69      	ldr	r3, [pc, #420]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	429a      	cmp	r2, r3
 800772c:	d908      	bls.n	8007740 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800772e:	4b66      	ldr	r3, [pc, #408]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f023 020f 	bic.w	r2, r3, #15
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	4963      	ldr	r1, [pc, #396]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 800773c:	4313      	orrs	r3, r2
 800773e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 80d2 	beq.w	80078f2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800774e:	2300      	movs	r3, #0
 8007750:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	2b03      	cmp	r3, #3
 8007758:	d143      	bne.n	80077e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800775a:	4b5b      	ldr	r3, [pc, #364]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 800775c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b00      	cmp	r3, #0
 8007766:	d110      	bne.n	800778a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007768:	4b57      	ldr	r3, [pc, #348]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 800776a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800776e:	4a56      	ldr	r2, [pc, #344]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 8007770:	f043 0304 	orr.w	r3, r3, #4
 8007774:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007778:	4b53      	ldr	r3, [pc, #332]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 800777a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800777e:	f003 0304 	and.w	r3, r3, #4
 8007782:	60bb      	str	r3, [r7, #8]
 8007784:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007786:	2301      	movs	r3, #1
 8007788:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800778a:	f7fd fa47 	bl	8004c1c <HAL_GetTick>
 800778e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007790:	4b4e      	ldr	r3, [pc, #312]	@ (80078cc <HAL_RCC_ClockConfig+0x28c>)
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00f      	beq.n	80077bc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800779c:	e008      	b.n	80077b0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800779e:	f7fd fa3d 	bl	8004c1c <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d901      	bls.n	80077b0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e12b      	b.n	8007a08 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80077b0:	4b46      	ldr	r3, [pc, #280]	@ (80078cc <HAL_RCC_ClockConfig+0x28c>)
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d0f0      	beq.n	800779e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d107      	bne.n	80077d2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80077c2:	4b41      	ldr	r3, [pc, #260]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 80077c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077c8:	4a3f      	ldr	r2, [pc, #252]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 80077ca:	f023 0304 	bic.w	r3, r3, #4
 80077ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80077d2:	4b3d      	ldr	r3, [pc, #244]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d121      	bne.n	8007822 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e112      	b.n	8007a08 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d107      	bne.n	80077fa <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077ea:	4b37      	ldr	r3, [pc, #220]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d115      	bne.n	8007822 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e106      	b.n	8007a08 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d107      	bne.n	8007812 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007802:	4b31      	ldr	r3, [pc, #196]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0304 	and.w	r3, r3, #4
 800780a:	2b00      	cmp	r3, #0
 800780c:	d109      	bne.n	8007822 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e0fa      	b.n	8007a08 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007812:	4b2d      	ldr	r3, [pc, #180]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e0f2      	b.n	8007a08 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8007822:	4b29      	ldr	r3, [pc, #164]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	f023 0203 	bic.w	r2, r3, #3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	4926      	ldr	r1, [pc, #152]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 8007830:	4313      	orrs	r3, r2
 8007832:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8007834:	f7fd f9f2 	bl	8004c1c <HAL_GetTick>
 8007838:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	2b03      	cmp	r3, #3
 8007840:	d112      	bne.n	8007868 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007842:	e00a      	b.n	800785a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007844:	f7fd f9ea 	bl	8004c1c <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007852:	4293      	cmp	r3, r2
 8007854:	d901      	bls.n	800785a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e0d6      	b.n	8007a08 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800785a:	4b1b      	ldr	r3, [pc, #108]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	f003 030c 	and.w	r3, r3, #12
 8007862:	2b0c      	cmp	r3, #12
 8007864:	d1ee      	bne.n	8007844 <HAL_RCC_ClockConfig+0x204>
 8007866:	e044      	b.n	80078f2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2b02      	cmp	r3, #2
 800786e:	d112      	bne.n	8007896 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007870:	e00a      	b.n	8007888 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007872:	f7fd f9d3 	bl	8004c1c <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007880:	4293      	cmp	r3, r2
 8007882:	d901      	bls.n	8007888 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e0bf      	b.n	8007a08 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007888:	4b0f      	ldr	r3, [pc, #60]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	f003 030c 	and.w	r3, r3, #12
 8007890:	2b08      	cmp	r3, #8
 8007892:	d1ee      	bne.n	8007872 <HAL_RCC_ClockConfig+0x232>
 8007894:	e02d      	b.n	80078f2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d123      	bne.n	80078e6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800789e:	e00a      	b.n	80078b6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078a0:	f7fd f9bc 	bl	8004c1c <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e0a8      	b.n	8007a08 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80078b6:	4b04      	ldr	r3, [pc, #16]	@ (80078c8 <HAL_RCC_ClockConfig+0x288>)
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	f003 030c 	and.w	r3, r3, #12
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1ee      	bne.n	80078a0 <HAL_RCC_ClockConfig+0x260>
 80078c2:	e016      	b.n	80078f2 <HAL_RCC_ClockConfig+0x2b2>
 80078c4:	40022000 	.word	0x40022000
 80078c8:	46020c00 	.word	0x46020c00
 80078cc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078d0:	f7fd f9a4 	bl	8004c1c <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078de:	4293      	cmp	r3, r2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e090      	b.n	8007a08 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80078e6:	4b4a      	ldr	r3, [pc, #296]	@ (8007a10 <HAL_RCC_ClockConfig+0x3d0>)
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	f003 030c 	and.w	r3, r3, #12
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d1ee      	bne.n	80078d0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d010      	beq.n	8007920 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	4b43      	ldr	r3, [pc, #268]	@ (8007a10 <HAL_RCC_ClockConfig+0x3d0>)
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	429a      	cmp	r2, r3
 800790c:	d208      	bcs.n	8007920 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800790e:	4b40      	ldr	r3, [pc, #256]	@ (8007a10 <HAL_RCC_ClockConfig+0x3d0>)
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	f023 020f 	bic.w	r2, r3, #15
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	493d      	ldr	r1, [pc, #244]	@ (8007a10 <HAL_RCC_ClockConfig+0x3d0>)
 800791c:	4313      	orrs	r3, r2
 800791e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007920:	4b3c      	ldr	r3, [pc, #240]	@ (8007a14 <HAL_RCC_ClockConfig+0x3d4>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 030f 	and.w	r3, r3, #15
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	d210      	bcs.n	8007950 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800792e:	4b39      	ldr	r3, [pc, #228]	@ (8007a14 <HAL_RCC_ClockConfig+0x3d4>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f023 020f 	bic.w	r2, r3, #15
 8007936:	4937      	ldr	r1, [pc, #220]	@ (8007a14 <HAL_RCC_ClockConfig+0x3d4>)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	4313      	orrs	r3, r2
 800793c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800793e:	4b35      	ldr	r3, [pc, #212]	@ (8007a14 <HAL_RCC_ClockConfig+0x3d4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 030f 	and.w	r3, r3, #15
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	429a      	cmp	r2, r3
 800794a:	d001      	beq.n	8007950 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e05b      	b.n	8007a08 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d010      	beq.n	800797e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	68da      	ldr	r2, [r3, #12]
 8007960:	4b2b      	ldr	r3, [pc, #172]	@ (8007a10 <HAL_RCC_ClockConfig+0x3d0>)
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007968:	429a      	cmp	r2, r3
 800796a:	d208      	bcs.n	800797e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800796c:	4b28      	ldr	r3, [pc, #160]	@ (8007a10 <HAL_RCC_ClockConfig+0x3d0>)
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	4925      	ldr	r1, [pc, #148]	@ (8007a10 <HAL_RCC_ClockConfig+0x3d0>)
 800797a:	4313      	orrs	r3, r2
 800797c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0308 	and.w	r3, r3, #8
 8007986:	2b00      	cmp	r3, #0
 8007988:	d012      	beq.n	80079b0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691a      	ldr	r2, [r3, #16]
 800798e:	4b20      	ldr	r3, [pc, #128]	@ (8007a10 <HAL_RCC_ClockConfig+0x3d0>)
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	091b      	lsrs	r3, r3, #4
 8007994:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007998:	429a      	cmp	r2, r3
 800799a:	d209      	bcs.n	80079b0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800799c:	4b1c      	ldr	r3, [pc, #112]	@ (8007a10 <HAL_RCC_ClockConfig+0x3d0>)
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	011b      	lsls	r3, r3, #4
 80079aa:	4919      	ldr	r1, [pc, #100]	@ (8007a10 <HAL_RCC_ClockConfig+0x3d0>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0310 	and.w	r3, r3, #16
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d010      	beq.n	80079de <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	695a      	ldr	r2, [r3, #20]
 80079c0:	4b13      	ldr	r3, [pc, #76]	@ (8007a10 <HAL_RCC_ClockConfig+0x3d0>)
 80079c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d208      	bcs.n	80079de <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80079cc:	4b10      	ldr	r3, [pc, #64]	@ (8007a10 <HAL_RCC_ClockConfig+0x3d0>)
 80079ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	490d      	ldr	r1, [pc, #52]	@ (8007a10 <HAL_RCC_ClockConfig+0x3d0>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80079de:	f000 f821 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 80079e2:	4602      	mov	r2, r0
 80079e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007a10 <HAL_RCC_ClockConfig+0x3d0>)
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	f003 030f 	and.w	r3, r3, #15
 80079ec:	490a      	ldr	r1, [pc, #40]	@ (8007a18 <HAL_RCC_ClockConfig+0x3d8>)
 80079ee:	5ccb      	ldrb	r3, [r1, r3]
 80079f0:	fa22 f303 	lsr.w	r3, r2, r3
 80079f4:	4a09      	ldr	r2, [pc, #36]	@ (8007a1c <HAL_RCC_ClockConfig+0x3dc>)
 80079f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80079f8:	4b09      	ldr	r3, [pc, #36]	@ (8007a20 <HAL_RCC_ClockConfig+0x3e0>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fd f8c3 	bl	8004b88 <HAL_InitTick>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73fb      	strb	r3, [r7, #15]

  return status;
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3718      	adds	r7, #24
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	46020c00 	.word	0x46020c00
 8007a14:	40022000 	.word	0x40022000
 8007a18:	080119b0 	.word	0x080119b0
 8007a1c:	200000a0 	.word	0x200000a0
 8007a20:	200000a4 	.word	0x200000a4

08007a24 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b08b      	sub	sp, #44	@ 0x2c
 8007a28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a32:	4b7b      	ldr	r3, [pc, #492]	@ (8007c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	f003 030c 	and.w	r3, r3, #12
 8007a3a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a3c:	4b78      	ldr	r3, [pc, #480]	@ (8007c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a40:	f003 0303 	and.w	r3, r3, #3
 8007a44:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d005      	beq.n	8007a58 <HAL_RCC_GetSysClockFreq+0x34>
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	2b0c      	cmp	r3, #12
 8007a50:	d121      	bne.n	8007a96 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d11e      	bne.n	8007a96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007a58:	4b71      	ldr	r3, [pc, #452]	@ (8007c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d107      	bne.n	8007a74 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8007a64:	4b6e      	ldr	r3, [pc, #440]	@ (8007c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007a66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a6a:	0b1b      	lsrs	r3, r3, #12
 8007a6c:	f003 030f 	and.w	r3, r3, #15
 8007a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a72:	e005      	b.n	8007a80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007a74:	4b6a      	ldr	r3, [pc, #424]	@ (8007c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	0f1b      	lsrs	r3, r3, #28
 8007a7a:	f003 030f 	and.w	r3, r3, #15
 8007a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007a80:	4a68      	ldr	r2, [pc, #416]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a88:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d110      	bne.n	8007ab2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007a94:	e00d      	b.n	8007ab2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a96:	4b62      	ldr	r3, [pc, #392]	@ (8007c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	f003 030c 	and.w	r3, r3, #12
 8007a9e:	2b04      	cmp	r3, #4
 8007aa0:	d102      	bne.n	8007aa8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007aa2:	4b61      	ldr	r3, [pc, #388]	@ (8007c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8007aa4:	623b      	str	r3, [r7, #32]
 8007aa6:	e004      	b.n	8007ab2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	d101      	bne.n	8007ab2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007aae:	4b5e      	ldr	r3, [pc, #376]	@ (8007c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ab0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	2b0c      	cmp	r3, #12
 8007ab6:	f040 80ac 	bne.w	8007c12 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007aba:	4b59      	ldr	r3, [pc, #356]	@ (8007c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abe:	f003 0303 	and.w	r3, r3, #3
 8007ac2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007ac4:	4b56      	ldr	r3, [pc, #344]	@ (8007c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac8:	0a1b      	lsrs	r3, r3, #8
 8007aca:	f003 030f 	and.w	r3, r3, #15
 8007ace:	3301      	adds	r3, #1
 8007ad0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007ad2:	4b53      	ldr	r3, [pc, #332]	@ (8007c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad6:	091b      	lsrs	r3, r3, #4
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007ade:	4b50      	ldr	r3, [pc, #320]	@ (8007c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae2:	08db      	lsrs	r3, r3, #3
 8007ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	fb02 f303 	mul.w	r3, r2, r3
 8007aee:	ee07 3a90 	vmov	s15, r3
 8007af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 8086 	beq.w	8007c0e <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d003      	beq.n	8007b10 <HAL_RCC_GetSysClockFreq+0xec>
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d022      	beq.n	8007b54 <HAL_RCC_GetSysClockFreq+0x130>
 8007b0e:	e043      	b.n	8007b98 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b1a:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8007c2c <HAL_RCC_GetSysClockFreq+0x208>
 8007b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b22:	4b3f      	ldr	r3, [pc, #252]	@ (8007c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b2a:	ee07 3a90 	vmov	s15, r3
 8007b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007b32:	ed97 6a01 	vldr	s12, [r7, #4]
 8007b36:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007c30 <HAL_RCC_GetSysClockFreq+0x20c>
 8007b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b4e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8007b52:	e046      	b.n	8007be2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8007c2c <HAL_RCC_GetSysClockFreq+0x208>
 8007b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b66:	4b2e      	ldr	r3, [pc, #184]	@ (8007c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b6e:	ee07 3a90 	vmov	s15, r3
 8007b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007b76:	ed97 6a01 	vldr	s12, [r7, #4]
 8007b7a:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8007c30 <HAL_RCC_GetSysClockFreq+0x20c>
 8007b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b92:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8007b96:	e024      	b.n	8007be2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	ee07 3a90 	vmov	s15, r3
 8007ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8007c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb8:	ee07 3a90 	vmov	s15, r3
 8007bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007bc0:	ed97 6a01 	vldr	s12, [r7, #4]
 8007bc4:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8007c30 <HAL_RCC_GetSysClockFreq+0x20c>
 8007bc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007bcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007bd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bdc:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8007be0:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8007be2:	4b0f      	ldr	r3, [pc, #60]	@ (8007c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007be6:	0e1b      	lsrs	r3, r3, #24
 8007be8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bec:	3301      	adds	r3, #1
 8007bee:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c06:	ee17 3a90 	vmov	r3, s15
 8007c0a:	623b      	str	r3, [r7, #32]
 8007c0c:	e001      	b.n	8007c12 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8007c12:	6a3b      	ldr	r3, [r7, #32]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	372c      	adds	r7, #44	@ 0x2c
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	46020c00 	.word	0x46020c00
 8007c24:	080119c8 	.word	0x080119c8
 8007c28:	00f42400 	.word	0x00f42400
 8007c2c:	4b742400 	.word	0x4b742400
 8007c30:	46000000 	.word	0x46000000

08007c34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007c38:	f7ff fef4 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	4b07      	ldr	r3, [pc, #28]	@ (8007c5c <HAL_RCC_GetHCLKFreq+0x28>)
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	f003 030f 	and.w	r3, r3, #15
 8007c46:	4906      	ldr	r1, [pc, #24]	@ (8007c60 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007c48:	5ccb      	ldrb	r3, [r1, r3]
 8007c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c4e:	4a05      	ldr	r2, [pc, #20]	@ (8007c64 <HAL_RCC_GetHCLKFreq+0x30>)
 8007c50:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007c52:	4b04      	ldr	r3, [pc, #16]	@ (8007c64 <HAL_RCC_GetHCLKFreq+0x30>)
 8007c54:	681b      	ldr	r3, [r3, #0]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	46020c00 	.word	0x46020c00
 8007c60:	080119b0 	.word	0x080119b0
 8007c64:	200000a0 	.word	0x200000a0

08007c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007c6c:	f7ff ffe2 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 8007c70:	4602      	mov	r2, r0
 8007c72:	4b05      	ldr	r3, [pc, #20]	@ (8007c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	091b      	lsrs	r3, r3, #4
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	4903      	ldr	r1, [pc, #12]	@ (8007c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c7e:	5ccb      	ldrb	r3, [r1, r3]
 8007c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	46020c00 	.word	0x46020c00
 8007c8c:	080119c0 	.word	0x080119c0

08007c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007c94:	f7ff ffce 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	4b05      	ldr	r3, [pc, #20]	@ (8007cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	0a1b      	lsrs	r3, r3, #8
 8007ca0:	f003 0307 	and.w	r3, r3, #7
 8007ca4:	4903      	ldr	r1, [pc, #12]	@ (8007cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ca6:	5ccb      	ldrb	r3, [r1, r3]
 8007ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	46020c00 	.word	0x46020c00
 8007cb4:	080119c0 	.word	0x080119c0

08007cb8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007cbc:	f7ff ffba 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	4b05      	ldr	r3, [pc, #20]	@ (8007cd8 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc6:	091b      	lsrs	r3, r3, #4
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	4903      	ldr	r1, [pc, #12]	@ (8007cdc <HAL_RCC_GetPCLK3Freq+0x24>)
 8007cce:	5ccb      	ldrb	r3, [r1, r3]
 8007cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	46020c00 	.word	0x46020c00
 8007cdc:	080119c0 	.word	0x080119c0

08007ce0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8007de4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cee:	f003 0304 	and.w	r3, r3, #4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007cf6:	f7fe fd6f 	bl	80067d8 <HAL_PWREx_GetVoltageRange>
 8007cfa:	6178      	str	r0, [r7, #20]
 8007cfc:	e019      	b.n	8007d32 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007cfe:	4b39      	ldr	r3, [pc, #228]	@ (8007de4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d04:	4a37      	ldr	r2, [pc, #220]	@ (8007de4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007d06:	f043 0304 	orr.w	r3, r3, #4
 8007d0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007d0e:	4b35      	ldr	r3, [pc, #212]	@ (8007de4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007d1c:	f7fe fd5c 	bl	80067d8 <HAL_PWREx_GetVoltageRange>
 8007d20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007d22:	4b30      	ldr	r3, [pc, #192]	@ (8007de4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d28:	4a2e      	ldr	r2, [pc, #184]	@ (8007de4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007d2a:	f023 0304 	bic.w	r3, r3, #4
 8007d2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d38:	d003      	beq.n	8007d42 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d40:	d109      	bne.n	8007d56 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d48:	d202      	bcs.n	8007d50 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007d4e:	e033      	b.n	8007db8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007d50:	2300      	movs	r3, #0
 8007d52:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007d54:	e030      	b.n	8007db8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d5c:	d208      	bcs.n	8007d70 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d64:	d102      	bne.n	8007d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007d66:	2303      	movs	r3, #3
 8007d68:	613b      	str	r3, [r7, #16]
 8007d6a:	e025      	b.n	8007db8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e035      	b.n	8007ddc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d76:	d90f      	bls.n	8007d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d109      	bne.n	8007d92 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d84:	d902      	bls.n	8007d8c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007d86:	2300      	movs	r3, #0
 8007d88:	613b      	str	r3, [r7, #16]
 8007d8a:	e015      	b.n	8007db8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	613b      	str	r3, [r7, #16]
 8007d90:	e012      	b.n	8007db8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007d92:	2300      	movs	r3, #0
 8007d94:	613b      	str	r3, [r7, #16]
 8007d96:	e00f      	b.n	8007db8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d9e:	d109      	bne.n	8007db4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007da6:	d102      	bne.n	8007dae <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007da8:	2301      	movs	r3, #1
 8007daa:	613b      	str	r3, [r7, #16]
 8007dac:	e004      	b.n	8007db8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007dae:	2302      	movs	r3, #2
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	e001      	b.n	8007db8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007db4:	2301      	movs	r3, #1
 8007db6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007db8:	4b0b      	ldr	r3, [pc, #44]	@ (8007de8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f023 020f 	bic.w	r2, r3, #15
 8007dc0:	4909      	ldr	r1, [pc, #36]	@ (8007de8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007dc8:	4b07      	ldr	r3, [pc, #28]	@ (8007de8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 030f 	and.w	r3, r3, #15
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d001      	beq.n	8007dda <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	46020c00 	.word	0x46020c00
 8007de8:	40022000 	.word	0x40022000

08007dec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b089      	sub	sp, #36	@ 0x24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007df4:	4bac      	ldr	r3, [pc, #688]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007dfe:	4baa      	ldr	r3, [pc, #680]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e02:	f003 0303 	and.w	r3, r3, #3
 8007e06:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007e08:	4ba7      	ldr	r3, [pc, #668]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e0c:	0a1b      	lsrs	r3, r3, #8
 8007e0e:	f003 030f 	and.w	r3, r3, #15
 8007e12:	3301      	adds	r3, #1
 8007e14:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8007e16:	4ba4      	ldr	r3, [pc, #656]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e1a:	f003 0310 	and.w	r3, r3, #16
 8007e1e:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007e20:	4ba1      	ldr	r3, [pc, #644]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e24:	08db      	lsrs	r3, r3, #3
 8007e26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	fb02 f303 	mul.w	r3, r2, r3
 8007e30:	ee07 3a90 	vmov	s15, r3
 8007e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e38:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 8123 	beq.w	800808a <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	d062      	beq.n	8007f10 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	f200 8081 	bhi.w	8007f54 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d024      	beq.n	8007ea2 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d17a      	bne.n	8007f54 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	ee07 3a90 	vmov	s15, r3
 8007e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e68:	eddf 6a90 	vldr	s13, [pc, #576]	@ 80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8007e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e70:	4b8d      	ldr	r3, [pc, #564]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e78:	ee07 3a90 	vmov	s15, r3
 8007e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e80:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e84:	eddf 5a8a 	vldr	s11, [pc, #552]	@ 80080b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8007e88:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e94:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ea0:	e08f      	b.n	8007fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007ea2:	4b81      	ldr	r3, [pc, #516]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d005      	beq.n	8007eba <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8007eae:	4b7e      	ldr	r3, [pc, #504]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	0f1b      	lsrs	r3, r3, #28
 8007eb4:	f003 030f 	and.w	r3, r3, #15
 8007eb8:	e006      	b.n	8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8007eba:	4b7b      	ldr	r3, [pc, #492]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007ebc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ec0:	041b      	lsls	r3, r3, #16
 8007ec2:	0f1b      	lsrs	r3, r3, #28
 8007ec4:	f003 030f 	and.w	r3, r3, #15
 8007ec8:	4a7a      	ldr	r2, [pc, #488]	@ (80080b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ece:	ee07 3a90 	vmov	s15, r3
 8007ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	ee07 3a90 	vmov	s15, r3
 8007edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	ee07 3a90 	vmov	s15, r3
 8007eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ef2:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 80080b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8007ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f0e:	e058      	b.n	8007fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	ee07 3a90 	vmov	s15, r3
 8007f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1a:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8007f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f22:	4b61      	ldr	r3, [pc, #388]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2a:	ee07 3a90 	vmov	s15, r3
 8007f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f36:	eddf 5a5e 	vldr	s11, [pc, #376]	@ 80080b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8007f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f52:	e036      	b.n	8007fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007f54:	4b54      	ldr	r3, [pc, #336]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d005      	beq.n	8007f6c <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8007f60:	4b51      	ldr	r3, [pc, #324]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	0f1b      	lsrs	r3, r3, #28
 8007f66:	f003 030f 	and.w	r3, r3, #15
 8007f6a:	e006      	b.n	8007f7a <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8007f6c:	4b4e      	ldr	r3, [pc, #312]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007f6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f72:	041b      	lsls	r3, r3, #16
 8007f74:	0f1b      	lsrs	r3, r3, #28
 8007f76:	f003 030f 	and.w	r3, r3, #15
 8007f7a:	4a4e      	ldr	r2, [pc, #312]	@ (80080b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f80:	ee07 3a90 	vmov	s15, r3
 8007f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	ee07 3a90 	vmov	s15, r3
 8007f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	ee07 3a90 	vmov	s15, r3
 8007f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa0:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fa4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80080b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8007fa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fc0:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007fc2:	4b39      	ldr	r3, [pc, #228]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d017      	beq.n	8007ffe <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007fce:	4b36      	ldr	r3, [pc, #216]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fd2:	0a5b      	lsrs	r3, r3, #9
 8007fd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fd8:	ee07 3a90 	vmov	s15, r3
 8007fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8007fe0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fe4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007fe8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ff4:	ee17 2a90 	vmov	r2, s15
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	e002      	b.n	8008004 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008004:	4b28      	ldr	r3, [pc, #160]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d017      	beq.n	8008040 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008010:	4b25      	ldr	r3, [pc, #148]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008014:	0c1b      	lsrs	r3, r3, #16
 8008016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800801a:	ee07 3a90 	vmov	s15, r3
 800801e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008022:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008026:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800802a:	edd7 6a07 	vldr	s13, [r7, #28]
 800802e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008036:	ee17 2a90 	vmov	r2, s15
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	605a      	str	r2, [r3, #4]
 800803e:	e002      	b.n	8008046 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008046:	4b18      	ldr	r3, [pc, #96]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800804a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d017      	beq.n	8008082 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008052:	4b15      	ldr	r3, [pc, #84]	@ (80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008056:	0e1b      	lsrs	r3, r3, #24
 8008058:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800805c:	ee07 3a90 	vmov	s15, r3
 8008060:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8008064:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008068:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800806c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008078:	ee17 2a90 	vmov	r2, s15
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008080:	e00c      	b.n	800809c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	609a      	str	r2, [r3, #8]
}
 8008088:	e008      	b.n	800809c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	609a      	str	r2, [r3, #8]
}
 800809c:	bf00      	nop
 800809e:	3724      	adds	r7, #36	@ 0x24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	46020c00 	.word	0x46020c00
 80080ac:	4b742400 	.word	0x4b742400
 80080b0:	46000000 	.word	0x46000000
 80080b4:	080119c8 	.word	0x080119c8

080080b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b089      	sub	sp, #36	@ 0x24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80080c0:	4bac      	ldr	r3, [pc, #688]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80080c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80080ca:	4baa      	ldr	r3, [pc, #680]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80080cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ce:	f003 0303 	and.w	r3, r3, #3
 80080d2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80080d4:	4ba7      	ldr	r3, [pc, #668]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80080d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d8:	0a1b      	lsrs	r3, r3, #8
 80080da:	f003 030f 	and.w	r3, r3, #15
 80080de:	3301      	adds	r3, #1
 80080e0:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80080e2:	4ba4      	ldr	r3, [pc, #656]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80080e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e6:	f003 0310 	and.w	r3, r3, #16
 80080ea:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80080ec:	4ba1      	ldr	r3, [pc, #644]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80080ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f0:	08db      	lsrs	r3, r3, #3
 80080f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	fb02 f303 	mul.w	r3, r2, r3
 80080fc:	ee07 3a90 	vmov	s15, r3
 8008100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008104:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 8123 	beq.w	8008356 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	2b03      	cmp	r3, #3
 8008114:	d062      	beq.n	80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2b03      	cmp	r3, #3
 800811a:	f200 8081 	bhi.w	8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d024      	beq.n	800816e <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	2b02      	cmp	r3, #2
 8008128:	d17a      	bne.n	8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	ee07 3a90 	vmov	s15, r3
 8008130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008134:	eddf 6a90 	vldr	s13, [pc, #576]	@ 8008378 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8008138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800813c:	4b8d      	ldr	r3, [pc, #564]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800813e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008144:	ee07 3a90 	vmov	s15, r3
 8008148:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800814c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008150:	eddf 5a8a 	vldr	s11, [pc, #552]	@ 800837c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008154:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008158:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800815c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008160:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008168:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800816c:	e08f      	b.n	800828e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800816e:	4b81      	ldr	r3, [pc, #516]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d005      	beq.n	8008186 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800817a:	4b7e      	ldr	r3, [pc, #504]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	0f1b      	lsrs	r3, r3, #28
 8008180:	f003 030f 	and.w	r3, r3, #15
 8008184:	e006      	b.n	8008194 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8008186:	4b7b      	ldr	r3, [pc, #492]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008188:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800818c:	041b      	lsls	r3, r3, #16
 800818e:	0f1b      	lsrs	r3, r3, #28
 8008190:	f003 030f 	and.w	r3, r3, #15
 8008194:	4a7a      	ldr	r2, [pc, #488]	@ (8008380 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800819a:	ee07 3a90 	vmov	s15, r3
 800819e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	ee07 3a90 	vmov	s15, r3
 80081a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	ee07 3a90 	vmov	s15, r3
 80081b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80081be:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 800837c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80081c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80081d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081da:	e058      	b.n	800828e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	ee07 3a90 	vmov	s15, r3
 80081e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e6:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8008378 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80081ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ee:	4b61      	ldr	r3, [pc, #388]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80081f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f6:	ee07 3a90 	vmov	s15, r3
 80081fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80081fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008202:	eddf 5a5e 	vldr	s11, [pc, #376]	@ 800837c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008206:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800820a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800820e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008212:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800821a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800821e:	e036      	b.n	800828e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008220:	4b54      	ldr	r3, [pc, #336]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d005      	beq.n	8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 800822c:	4b51      	ldr	r3, [pc, #324]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	0f1b      	lsrs	r3, r3, #28
 8008232:	f003 030f 	and.w	r3, r3, #15
 8008236:	e006      	b.n	8008246 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8008238:	4b4e      	ldr	r3, [pc, #312]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800823a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800823e:	041b      	lsls	r3, r3, #16
 8008240:	0f1b      	lsrs	r3, r3, #28
 8008242:	f003 030f 	and.w	r3, r3, #15
 8008246:	4a4e      	ldr	r2, [pc, #312]	@ (8008380 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800824c:	ee07 3a90 	vmov	s15, r3
 8008250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	ee07 3a90 	vmov	s15, r3
 800825a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	ee07 3a90 	vmov	s15, r3
 8008268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800826c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008270:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800837c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800827c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008280:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008288:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800828c:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800828e:	4b39      	ldr	r3, [pc, #228]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d017      	beq.n	80082ca <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800829a:	4b36      	ldr	r3, [pc, #216]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800829c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800829e:	0a5b      	lsrs	r3, r3, #9
 80082a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082a4:	ee07 3a90 	vmov	s15, r3
 80082a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80082ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082b0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80082b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80082b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082c0:	ee17 2a90 	vmov	r2, s15
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	e002      	b.n	80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80082d0:	4b28      	ldr	r3, [pc, #160]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80082d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d017      	beq.n	800830c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80082dc:	4b25      	ldr	r3, [pc, #148]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80082de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082e0:	0c1b      	lsrs	r3, r3, #16
 80082e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80082ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082f2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80082f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80082fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008302:	ee17 2a90 	vmov	r2, s15
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	605a      	str	r2, [r3, #4]
 800830a:	e002      	b.n	8008312 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008312:	4b18      	ldr	r3, [pc, #96]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008316:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d017      	beq.n	800834e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800831e:	4b15      	ldr	r3, [pc, #84]	@ (8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008322:	0e1b      	lsrs	r3, r3, #24
 8008324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008328:	ee07 3a90 	vmov	s15, r3
 800832c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008330:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008334:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008338:	edd7 6a07 	vldr	s13, [r7, #28]
 800833c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008344:	ee17 2a90 	vmov	r2, s15
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800834c:	e00c      	b.n	8008368 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	609a      	str	r2, [r3, #8]
}
 8008354:	e008      	b.n	8008368 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	609a      	str	r2, [r3, #8]
}
 8008368:	bf00      	nop
 800836a:	3724      	adds	r7, #36	@ 0x24
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	46020c00 	.word	0x46020c00
 8008378:	4b742400 	.word	0x4b742400
 800837c:	46000000 	.word	0x46000000
 8008380:	080119c8 	.word	0x080119c8

08008384 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008384:	b480      	push	{r7}
 8008386:	b089      	sub	sp, #36	@ 0x24
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800838c:	4bac      	ldr	r3, [pc, #688]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800838e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008394:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008396:	4baa      	ldr	r3, [pc, #680]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80083a0:	4ba7      	ldr	r3, [pc, #668]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80083a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a4:	0a1b      	lsrs	r3, r3, #8
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	3301      	adds	r3, #1
 80083ac:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80083ae:	4ba4      	ldr	r3, [pc, #656]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80083b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b2:	f003 0310 	and.w	r3, r3, #16
 80083b6:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80083b8:	4ba1      	ldr	r3, [pc, #644]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80083ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083bc:	08db      	lsrs	r3, r3, #3
 80083be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	fb02 f303 	mul.w	r3, r2, r3
 80083c8:	ee07 3a90 	vmov	s15, r3
 80083cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f000 8123 	beq.w	8008622 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d062      	beq.n	80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	f200 8081 	bhi.w	80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d024      	beq.n	800843a <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d17a      	bne.n	80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	ee07 3a90 	vmov	s15, r3
 80083fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008400:	eddf 6a90 	vldr	s13, [pc, #576]	@ 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8008404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008408:	4b8d      	ldr	r3, [pc, #564]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800840a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800840c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008410:	ee07 3a90 	vmov	s15, r3
 8008414:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008418:	ed97 6a02 	vldr	s12, [r7, #8]
 800841c:	eddf 5a8a 	vldr	s11, [pc, #552]	@ 8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008420:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008424:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008428:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800842c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008434:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8008438:	e08f      	b.n	800855a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800843a:	4b81      	ldr	r3, [pc, #516]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d005      	beq.n	8008452 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8008446:	4b7e      	ldr	r3, [pc, #504]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	0f1b      	lsrs	r3, r3, #28
 800844c:	f003 030f 	and.w	r3, r3, #15
 8008450:	e006      	b.n	8008460 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8008452:	4b7b      	ldr	r3, [pc, #492]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008454:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008458:	041b      	lsls	r3, r3, #16
 800845a:	0f1b      	lsrs	r3, r3, #28
 800845c:	f003 030f 	and.w	r3, r3, #15
 8008460:	4a7a      	ldr	r2, [pc, #488]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008466:	ee07 3a90 	vmov	s15, r3
 800846a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	ee07 3a90 	vmov	s15, r3
 8008474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	ee07 3a90 	vmov	s15, r3
 8008482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008486:	ed97 6a02 	vldr	s12, [r7, #8]
 800848a:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800848e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800849a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800849e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084a6:	e058      	b.n	800855a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	ee07 3a90 	vmov	s15, r3
 80084ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b2:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80084b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ba:	4b61      	ldr	r3, [pc, #388]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80084bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80084ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80084ce:	eddf 5a5e 	vldr	s11, [pc, #376]	@ 8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80084d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80084d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80084da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084de:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80084e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084ea:	e036      	b.n	800855a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80084ec:	4b54      	ldr	r3, [pc, #336]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d005      	beq.n	8008504 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 80084f8:	4b51      	ldr	r3, [pc, #324]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	0f1b      	lsrs	r3, r3, #28
 80084fe:	f003 030f 	and.w	r3, r3, #15
 8008502:	e006      	b.n	8008512 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8008504:	4b4e      	ldr	r3, [pc, #312]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008506:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800850a:	041b      	lsls	r3, r3, #16
 800850c:	0f1b      	lsrs	r3, r3, #28
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	4a4e      	ldr	r2, [pc, #312]	@ (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008518:	ee07 3a90 	vmov	s15, r3
 800851c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	ee07 3a90 	vmov	s15, r3
 8008526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800852a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	ee07 3a90 	vmov	s15, r3
 8008534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008538:	ed97 6a02 	vldr	s12, [r7, #8]
 800853c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008548:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800854c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008554:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008558:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800855a:	4b39      	ldr	r3, [pc, #228]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800855c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800855e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d017      	beq.n	8008596 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008566:	4b36      	ldr	r3, [pc, #216]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800856a:	0a5b      	lsrs	r3, r3, #9
 800856c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008570:	ee07 3a90 	vmov	s15, r3
 8008574:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008578:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800857c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008580:	edd7 6a07 	vldr	s13, [r7, #28]
 8008584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800858c:	ee17 2a90 	vmov	r2, s15
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	e002      	b.n	800859c <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800859c:	4b28      	ldr	r3, [pc, #160]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800859e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d017      	beq.n	80085d8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80085a8:	4b25      	ldr	r3, [pc, #148]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80085aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ac:	0c1b      	lsrs	r3, r3, #16
 80085ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085b2:	ee07 3a90 	vmov	s15, r3
 80085b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80085ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085be:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80085c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80085c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ce:	ee17 2a90 	vmov	r2, s15
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	605a      	str	r2, [r3, #4]
 80085d6:	e002      	b.n	80085de <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80085de:	4b18      	ldr	r3, [pc, #96]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80085e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d017      	beq.n	800861a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80085ea:	4b15      	ldr	r3, [pc, #84]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80085ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ee:	0e1b      	lsrs	r3, r3, #24
 80085f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085f4:	ee07 3a90 	vmov	s15, r3
 80085f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80085fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008600:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008604:	edd7 6a07 	vldr	s13, [r7, #28]
 8008608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800860c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008610:	ee17 2a90 	vmov	r2, s15
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008618:	e00c      	b.n	8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	609a      	str	r2, [r3, #8]
}
 8008620:	e008      	b.n	8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	609a      	str	r2, [r3, #8]
}
 8008634:	bf00      	nop
 8008636:	3724      	adds	r7, #36	@ 0x24
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	46020c00 	.word	0x46020c00
 8008644:	4b742400 	.word	0x4b742400
 8008648:	46000000 	.word	0x46000000
 800864c:	080119c8 	.word	0x080119c8

08008650 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b08e      	sub	sp, #56	@ 0x38
 8008654:	af00      	add	r7, sp, #0
 8008656:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800865a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800865e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8008662:	430b      	orrs	r3, r1
 8008664:	d145      	bne.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008666:	4ba7      	ldr	r3, [pc, #668]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800866c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008670:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008672:	4ba4      	ldr	r3, [pc, #656]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008678:	f003 0302 	and.w	r3, r3, #2
 800867c:	2b02      	cmp	r3, #2
 800867e:	d108      	bne.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008686:	d104      	bne.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008688:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800868c:	637b      	str	r3, [r7, #52]	@ 0x34
 800868e:	f001 b8fc 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008692:	4b9c      	ldr	r3, [pc, #624]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800869c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086a0:	d114      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80086a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086a8:	d110      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086aa:	4b96      	ldr	r3, [pc, #600]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086b8:	d103      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80086ba:	23fa      	movs	r3, #250	@ 0xfa
 80086bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086be:	f001 b8e4 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80086c2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80086c6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086c8:	f001 b8df 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80086cc:	4b8d      	ldr	r3, [pc, #564]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086d8:	d107      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80086da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086e0:	d103      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80086e2:	4b89      	ldr	r3, [pc, #548]	@ (8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80086e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086e6:	f001 b8d0 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ee:	f001 b8cc 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80086f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086f6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80086fa:	430b      	orrs	r3, r1
 80086fc:	d151      	bne.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80086fe:	4b81      	ldr	r3, [pc, #516]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008700:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008704:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008708:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800870a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870c:	2b80      	cmp	r3, #128	@ 0x80
 800870e:	d035      	beq.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008712:	2b80      	cmp	r3, #128	@ 0x80
 8008714:	d841      	bhi.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	2b60      	cmp	r3, #96	@ 0x60
 800871a:	d02a      	beq.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800871c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871e:	2b60      	cmp	r3, #96	@ 0x60
 8008720:	d83b      	bhi.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008724:	2b40      	cmp	r3, #64	@ 0x40
 8008726:	d009      	beq.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872a:	2b40      	cmp	r3, #64	@ 0x40
 800872c:	d835      	bhi.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800872e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00c      	beq.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008736:	2b20      	cmp	r3, #32
 8008738:	d012      	beq.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800873a:	e02e      	b.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800873c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008740:	4618      	mov	r0, r3
 8008742:	f7ff fb53 	bl	8007dec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008748:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800874a:	f001 b89e 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800874e:	f107 0318 	add.w	r3, r7, #24
 8008752:	4618      	mov	r0, r3
 8008754:	f7ff fcb0 	bl	80080b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800875c:	f001 b895 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008760:	f107 030c 	add.w	r3, r7, #12
 8008764:	4618      	mov	r0, r3
 8008766:	f7ff fe0d 	bl	8008384 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800876e:	f001 b88c 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008772:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008776:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008778:	f001 b887 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800877c:	4b61      	ldr	r3, [pc, #388]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008788:	d103      	bne.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800878a:	4b60      	ldr	r3, [pc, #384]	@ (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800878c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800878e:	f001 b87c 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008792:	2300      	movs	r3, #0
 8008794:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008796:	f001 b878 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800879e:	f001 b874 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80087a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a6:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80087aa:	430b      	orrs	r3, r1
 80087ac:	d158      	bne.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80087ae:	4b55      	ldr	r3, [pc, #340]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80087b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80087b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80087b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80087ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087c0:	d03b      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80087c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087c8:	d846      	bhi.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087d0:	d02e      	beq.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087d8:	d83e      	bhi.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087e0:	d00b      	beq.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087e8:	d836      	bhi.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80087ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00d      	beq.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80087f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087f6:	d012      	beq.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80087f8:	e02e      	b.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087fe:	4618      	mov	r0, r3
 8008800:	f7ff faf4 	bl	8007dec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008808:	f001 b83f 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800880c:	f107 0318 	add.w	r3, r7, #24
 8008810:	4618      	mov	r0, r3
 8008812:	f7ff fc51 	bl	80080b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800881a:	f001 b836 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800881e:	f107 030c 	add.w	r3, r7, #12
 8008822:	4618      	mov	r0, r3
 8008824:	f7ff fdae 	bl	8008384 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800882c:	f001 b82d 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008830:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008834:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008836:	f001 b828 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800883a:	4b32      	ldr	r3, [pc, #200]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008846:	d103      	bne.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008848:	4b30      	ldr	r3, [pc, #192]	@ (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800884a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800884c:	f001 b81d 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008854:	f001 b819 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800885c:	f001 b815 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008864:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008868:	430b      	orrs	r3, r1
 800886a:	d126      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800886c:	4b25      	ldr	r3, [pc, #148]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800886e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008872:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008876:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8008878:	4b22      	ldr	r3, [pc, #136]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008884:	d106      	bne.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	2b00      	cmp	r3, #0
 800888a:	d103      	bne.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800888c:	4b1f      	ldr	r3, [pc, #124]	@ (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800888e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008890:	f000 bffb 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8008894:	4b1b      	ldr	r3, [pc, #108]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800889c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088a0:	d107      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088a8:	d103      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80088aa:	4b19      	ldr	r3, [pc, #100]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80088ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ae:	f000 bfec 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80088b6:	f000 bfe8 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80088ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088be:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80088c2:	430b      	orrs	r3, r1
 80088c4:	d164      	bne.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80088c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80088c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088cc:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80088d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80088d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80088d8:	d03d      	beq.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80088da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088dc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80088e0:	d852      	bhi.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088e8:	d014      	beq.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80088ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088f0:	d84a      	bhi.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d01f      	beq.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80088f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088fe:	d012      	beq.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008900:	e042      	b.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008902:	bf00      	nop
 8008904:	46020c00 	.word	0x46020c00
 8008908:	0007a120 	.word	0x0007a120
 800890c:	00f42400 	.word	0x00f42400
 8008910:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008918:	4618      	mov	r0, r3
 800891a:	f7ff fa67 	bl	8007dec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800891e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008920:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008922:	f000 bfb2 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008926:	f107 0318 	add.w	r3, r7, #24
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff fbc4 	bl	80080b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008934:	f000 bfa9 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008938:	4bab      	ldr	r3, [pc, #684]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008944:	d103      	bne.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8008946:	4ba9      	ldr	r3, [pc, #676]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008948:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800894a:	f000 bf9e 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800894e:	2300      	movs	r3, #0
 8008950:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008952:	f000 bf9a 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008956:	4ba4      	ldr	r3, [pc, #656]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d005      	beq.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008962:	4ba1      	ldr	r3, [pc, #644]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	0e1b      	lsrs	r3, r3, #24
 8008968:	f003 030f 	and.w	r3, r3, #15
 800896c:	e006      	b.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800896e:	4b9e      	ldr	r3, [pc, #632]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008974:	041b      	lsls	r3, r3, #16
 8008976:	0e1b      	lsrs	r3, r3, #24
 8008978:	f003 030f 	and.w	r3, r3, #15
 800897c:	4a9c      	ldr	r2, [pc, #624]	@ (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800897e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008982:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008984:	f000 bf81 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8008988:	2300      	movs	r3, #0
 800898a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800898c:	f000 bf7d 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008994:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8008998:	430b      	orrs	r3, r1
 800899a:	d175      	bne.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800899c:	4b92      	ldr	r3, [pc, #584]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800899e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089a6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80089a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d15b      	bne.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80089ae:	4b8e      	ldr	r3, [pc, #568]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80089b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089b4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80089b8:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80089c0:	d034      	beq.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80089c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80089c8:	d849      	bhi.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089d0:	d00b      	beq.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80089d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089d8:	d841      	bhi.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80089da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d016      	beq.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80089e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089e6:	d009      	beq.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80089e8:	e039      	b.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff f9fc 	bl	8007dec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80089f8:	f000 bf47 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089fc:	f107 0318 	add.w	r3, r7, #24
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7ff fb59 	bl	80080b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008a0a:	f000 bf3e 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008a0e:	4b76      	ldr	r3, [pc, #472]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a1a:	d103      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8008a1c:	4b73      	ldr	r3, [pc, #460]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008a1e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008a20:	f000 bf33 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008a28:	f000 bf2f 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a2c:	4b6e      	ldr	r3, [pc, #440]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d005      	beq.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8008a38:	4b6b      	ldr	r3, [pc, #428]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	0e1b      	lsrs	r3, r3, #24
 8008a3e:	f003 030f 	and.w	r3, r3, #15
 8008a42:	e006      	b.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8008a44:	4b68      	ldr	r3, [pc, #416]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008a46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a4a:	041b      	lsls	r3, r3, #16
 8008a4c:	0e1b      	lsrs	r3, r3, #24
 8008a4e:	f003 030f 	and.w	r3, r3, #15
 8008a52:	4a67      	ldr	r2, [pc, #412]	@ (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8008a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a58:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008a5a:	f000 bf16 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008a62:	f000 bf12 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a6c:	d108      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff f9ba 	bl	8007dec <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a7c:	f000 bf05 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a84:	f000 bf01 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a8c:	1e51      	subs	r1, r2, #1
 8008a8e:	430b      	orrs	r3, r1
 8008a90:	d136      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008a92:	4b55      	ldr	r3, [pc, #340]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a98:	f003 0303 	and.w	r3, r3, #3
 8008a9c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d104      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008aa4:	f7ff f8f4 	bl	8007c90 <HAL_RCC_GetPCLK2Freq>
 8008aa8:	6378      	str	r0, [r7, #52]	@ 0x34
 8008aaa:	f000 beee 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d104      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008ab4:	f7fe ffb6 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 8008ab8:	6378      	str	r0, [r7, #52]	@ 0x34
 8008aba:	f000 bee6 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008abe:	4b4a      	ldr	r3, [pc, #296]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aca:	d106      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d103      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8008ad2:	4b48      	ldr	r3, [pc, #288]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ad6:	f000 bed8 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008ada:	4b43      	ldr	r3, [pc, #268]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ae0:	f003 0302 	and.w	r3, r3, #2
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d107      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d104      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8008aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008af4:	f000 bec9 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008afc:	f000 bec5 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8008b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b04:	1e91      	subs	r1, r2, #2
 8008b06:	430b      	orrs	r3, r1
 8008b08:	d136      	bne.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008b0a:	4b37      	ldr	r3, [pc, #220]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b10:	f003 030c 	and.w	r3, r3, #12
 8008b14:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d104      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008b1c:	f7ff f8a4 	bl	8007c68 <HAL_RCC_GetPCLK1Freq>
 8008b20:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b22:	f000 beb2 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b28:	2b04      	cmp	r3, #4
 8008b2a:	d104      	bne.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008b2c:	f7fe ff7a 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 8008b30:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b32:	f000 beaa 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008b36:	4b2c      	ldr	r3, [pc, #176]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b42:	d106      	bne.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8008b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b46:	2b08      	cmp	r3, #8
 8008b48:	d103      	bne.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8008b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b4e:	f000 be9c 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008b52:	4b25      	ldr	r3, [pc, #148]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b58:	f003 0302 	and.w	r3, r3, #2
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d107      	bne.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8008b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b62:	2b0c      	cmp	r3, #12
 8008b64:	d104      	bne.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8008b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b6c:	f000 be8d 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b74:	f000 be89 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b7c:	1f11      	subs	r1, r2, #4
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	d13e      	bne.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008b82:	4b19      	ldr	r3, [pc, #100]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008b8c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d104      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008b94:	f7ff f868 	bl	8007c68 <HAL_RCC_GetPCLK1Freq>
 8008b98:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b9a:	f000 be76 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba0:	2b10      	cmp	r3, #16
 8008ba2:	d104      	bne.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008ba4:	f7fe ff3e 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 8008ba8:	6378      	str	r0, [r7, #52]	@ 0x34
 8008baa:	f000 be6e 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008bae:	4b0e      	ldr	r3, [pc, #56]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bba:	d106      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbe:	2b20      	cmp	r3, #32
 8008bc0:	d103      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8008bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bc6:	f000 be60 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008bca:	4b07      	ldr	r3, [pc, #28]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d10f      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bda:	2b30      	cmp	r3, #48	@ 0x30
 8008bdc:	d10c      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8008bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008be4:	f000 be51 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8008be8:	46020c00 	.word	0x46020c00
 8008bec:	02dc6c00 	.word	0x02dc6c00
 8008bf0:	080119c8 	.word	0x080119c8
 8008bf4:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bfc:	f000 be45 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c04:	f1a2 0108 	sub.w	r1, r2, #8
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	d136      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008c0c:	4bad      	ldr	r3, [pc, #692]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c16:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d104      	bne.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008c1e:	f7ff f823 	bl	8007c68 <HAL_RCC_GetPCLK1Freq>
 8008c22:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c24:	f000 be31 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2a:	2b40      	cmp	r3, #64	@ 0x40
 8008c2c:	d104      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008c2e:	f7fe fef9 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 8008c32:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c34:	f000 be29 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008c38:	4ba2      	ldr	r3, [pc, #648]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c44:	d106      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8008c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c48:	2b80      	cmp	r3, #128	@ 0x80
 8008c4a:	d103      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8008c4c:	4b9e      	ldr	r3, [pc, #632]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c50:	f000 be1b 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008c54:	4b9b      	ldr	r3, [pc, #620]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008c56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c5a:	f003 0302 	and.w	r3, r3, #2
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d107      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8008c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c64:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c66:	d104      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8008c68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c6e:	f000 be0c 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c76:	f000 be08 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8008c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c7e:	f1a2 0110 	sub.w	r1, r2, #16
 8008c82:	430b      	orrs	r3, r1
 8008c84:	d139      	bne.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008c86:	4b8f      	ldr	r3, [pc, #572]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c90:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d104      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008c98:	f7fe ffe6 	bl	8007c68 <HAL_RCC_GetPCLK1Freq>
 8008c9c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c9e:	f000 bdf4 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ca8:	d104      	bne.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008caa:	f7fe febb 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 8008cae:	6378      	str	r0, [r7, #52]	@ 0x34
 8008cb0:	f000 bdeb 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008cb4:	4b83      	ldr	r3, [pc, #524]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cc0:	d107      	bne.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cc8:	d103      	bne.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8008cca:	4b7f      	ldr	r3, [pc, #508]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cce:	f000 bddc 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008cd2:	4b7c      	ldr	r3, [pc, #496]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cd8:	f003 0302 	and.w	r3, r3, #2
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d108      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ce6:	d104      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8008ce8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cee:	f000 bdcc 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cf6:	f000 bdc8 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cfe:	f1a2 0120 	sub.w	r1, r2, #32
 8008d02:	430b      	orrs	r3, r1
 8008d04:	d158      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008d06:	4b6f      	ldr	r3, [pc, #444]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d0c:	f003 0307 	and.w	r3, r3, #7
 8008d10:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d104      	bne.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8008d18:	f7fe ffce 	bl	8007cb8 <HAL_RCC_GetPCLK3Freq>
 8008d1c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d1e:	f000 bdb4 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d104      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008d28:	f7fe fe7c 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 8008d2c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d2e:	f000 bdac 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008d32:	4b64      	ldr	r3, [pc, #400]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d3e:	d106      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8008d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d103      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8008d46:	4b60      	ldr	r3, [pc, #384]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d4a:	f000 bd9e 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008d4e:	4b5d      	ldr	r3, [pc, #372]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d54:	f003 0302 	and.w	r3, r3, #2
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d107      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8008d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d104      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8008d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d68:	f000 bd8f 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008d6c:	4b55      	ldr	r3, [pc, #340]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0320 	and.w	r3, r3, #32
 8008d74:	2b20      	cmp	r3, #32
 8008d76:	d11b      	bne.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8008d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7a:	2b04      	cmp	r3, #4
 8008d7c:	d118      	bne.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008d7e:	4b51      	ldr	r3, [pc, #324]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008d8a:	4b4e      	ldr	r3, [pc, #312]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	0e1b      	lsrs	r3, r3, #24
 8008d90:	f003 030f 	and.w	r3, r3, #15
 8008d94:	e006      	b.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8008d96:	4b4b      	ldr	r3, [pc, #300]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008d98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d9c:	041b      	lsls	r3, r3, #16
 8008d9e:	0e1b      	lsrs	r3, r3, #24
 8008da0:	f003 030f 	and.w	r3, r3, #15
 8008da4:	4a49      	ldr	r2, [pc, #292]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>)
 8008da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dac:	f000 bd6d 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8008db0:	2300      	movs	r3, #0
 8008db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008db4:	f000 bd69 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dbc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008dc0:	430b      	orrs	r3, r1
 8008dc2:	d162      	bne.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008dc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008dca:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008dce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dd6:	d104      	bne.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008dd8:	f7fe fe24 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 8008ddc:	6378      	str	r0, [r7, #52]	@ 0x34
 8008dde:	f000 bd54 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008de8:	d108      	bne.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dea:	f107 0318 	add.w	r3, r7, #24
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7ff f962 	bl	80080b8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008df8:	f000 bd47 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d104      	bne.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8008e02:	f7fe ff17 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 8008e06:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e08:	f000 bd3f 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008e12:	d118      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8008e14:	4b2b      	ldr	r3, [pc, #172]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d005      	beq.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8008e20:	4b28      	ldr	r3, [pc, #160]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	0f1b      	lsrs	r3, r3, #28
 8008e26:	f003 030f 	and.w	r3, r3, #15
 8008e2a:	e006      	b.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8008e2c:	4b25      	ldr	r3, [pc, #148]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008e2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008e32:	041b      	lsls	r3, r3, #16
 8008e34:	0f1b      	lsrs	r3, r3, #28
 8008e36:	f003 030f 	and.w	r3, r3, #15
 8008e3a:	4a24      	ldr	r2, [pc, #144]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>)
 8008e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e42:	f000 bd22 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008e46:	4b1f      	ldr	r3, [pc, #124]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e52:	d107      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8008e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e5a:	d103      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8008e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e60:	f000 bd13 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008e64:	4b17      	ldr	r3, [pc, #92]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e70:	d107      	bne.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8008e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e78:	d103      	bne.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8008e7a:	4b13      	ldr	r3, [pc, #76]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e7e:	f000 bd04 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e86:	f000 bd00 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008e8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e8e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008e92:	430b      	orrs	r3, r1
 8008e94:	d155      	bne.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008e96:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8008e98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e9c:	f003 0307 	and.w	r3, r3, #7
 8008ea0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	d848      	bhi.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8008eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eae:	bf00      	nop
 8008eb0:	08008ef5 	.word	0x08008ef5
 8008eb4:	08008ed1 	.word	0x08008ed1
 8008eb8:	08008ee3 	.word	0x08008ee3
 8008ebc:	08008eff 	.word	0x08008eff
 8008ec0:	08008f09 	.word	0x08008f09
 8008ec4:	46020c00 	.word	0x46020c00
 8008ec8:	00f42400 	.word	0x00f42400
 8008ecc:	080119c8 	.word	0x080119c8
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe ff89 	bl	8007dec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008edc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ede:	f000 bcd4 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ee2:	f107 030c 	add.w	r3, r7, #12
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff fa4c 	bl	8008384 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ef0:	f000 bccb 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008ef4:	f7fe fe9e 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 8008ef8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008efa:	f000 bcc6 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008efe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008f02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f04:	f000 bcc1 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008f08:	4ba6      	ldr	r3, [pc, #664]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d005      	beq.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8008f14:	4ba3      	ldr	r3, [pc, #652]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	0e1b      	lsrs	r3, r3, #24
 8008f1a:	f003 030f 	and.w	r3, r3, #15
 8008f1e:	e006      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8008f20:	4ba0      	ldr	r3, [pc, #640]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8008f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008f26:	041b      	lsls	r3, r3, #16
 8008f28:	0e1b      	lsrs	r3, r3, #24
 8008f2a:	f003 030f 	and.w	r3, r3, #15
 8008f2e:	4a9e      	ldr	r2, [pc, #632]	@ (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8008f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f36:	f000 bca8 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f3e:	f000 bca4 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8008f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f46:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8008f4a:	430b      	orrs	r3, r1
 8008f4c:	d15d      	bne.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8008f4e:	4b95      	ldr	r3, [pc, #596]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8008f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f54:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008f58:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f60:	d036      	beq.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f68:	d84b      	bhi.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f70:	d029      	beq.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8008f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f78:	d843      	bhi.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f80:	d013      	beq.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f88:	d83b      	bhi.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d015      	beq.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8008f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f96:	d134      	bne.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fe ff25 	bl	8007dec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fa6:	f000 bc70 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008faa:	f107 030c 	add.w	r3, r7, #12
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff f9e8 	bl	8008384 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fb8:	f000 bc67 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008fbc:	f7fe fe3a 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 8008fc0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008fc2:	f000 bc62 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008fc6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008fca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fcc:	f000 bc5d 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008fd0:	4b74      	ldr	r3, [pc, #464]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d005      	beq.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8008fdc:	4b71      	ldr	r3, [pc, #452]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	0e1b      	lsrs	r3, r3, #24
 8008fe2:	f003 030f 	and.w	r3, r3, #15
 8008fe6:	e006      	b.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8008fe8:	4b6e      	ldr	r3, [pc, #440]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8008fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008fee:	041b      	lsls	r3, r3, #16
 8008ff0:	0e1b      	lsrs	r3, r3, #24
 8008ff2:	f003 030f 	and.w	r3, r3, #15
 8008ff6:	4a6c      	ldr	r2, [pc, #432]	@ (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8008ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ffc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ffe:	f000 bc44 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8009002:	2300      	movs	r3, #0
 8009004:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009006:	f000 bc40 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800900a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800900e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009012:	430b      	orrs	r3, r1
 8009014:	d14a      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009016:	4b63      	ldr	r3, [pc, #396]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8009018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800901c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009020:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009024:	2b00      	cmp	r3, #0
 8009026:	d104      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009028:	f7fe fe1e 	bl	8007c68 <HAL_RCC_GetPCLK1Freq>
 800902c:	6378      	str	r0, [r7, #52]	@ 0x34
 800902e:	f000 bc2c 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009038:	d104      	bne.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800903a:	f7fe fcf3 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 800903e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009040:	f000 bc23 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009044:	4b57      	ldr	r3, [pc, #348]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800904c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009050:	d107      	bne.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8009052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009058:	d103      	bne.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800905a:	4b54      	ldr	r3, [pc, #336]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 800905c:	637b      	str	r3, [r7, #52]	@ 0x34
 800905e:	f000 bc14 	b.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009062:	4b50      	ldr	r3, [pc, #320]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 0320 	and.w	r3, r3, #32
 800906a:	2b20      	cmp	r3, #32
 800906c:	d11b      	bne.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800906e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009070:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009074:	d117      	bne.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009076:	4b4b      	ldr	r3, [pc, #300]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d005      	beq.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8009082:	4b48      	ldr	r3, [pc, #288]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	0e1b      	lsrs	r3, r3, #24
 8009088:	f003 030f 	and.w	r3, r3, #15
 800908c:	e006      	b.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800908e:	4b45      	ldr	r3, [pc, #276]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8009090:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009094:	041b      	lsls	r3, r3, #16
 8009096:	0e1b      	lsrs	r3, r3, #24
 8009098:	f003 030f 	and.w	r3, r3, #15
 800909c:	4a42      	ldr	r2, [pc, #264]	@ (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800909e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80090a4:	e3f1      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80090aa:	e3ee      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80090ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090b0:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80090b4:	430b      	orrs	r3, r1
 80090b6:	d147      	bne.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80090b8:	4b3a      	ldr	r3, [pc, #232]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 80090ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090be:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80090c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80090c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d103      	bne.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80090ca:	f7fe fdcd 	bl	8007c68 <HAL_RCC_GetPCLK1Freq>
 80090ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80090d0:	e3db      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80090d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090d8:	d103      	bne.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80090da:	f7fe fca3 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 80090de:	6378      	str	r0, [r7, #52]	@ 0x34
 80090e0:	e3d3      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80090e2:	4b30      	ldr	r3, [pc, #192]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090ee:	d106      	bne.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 80090f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090f6:	d102      	bne.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 80090f8:	4b2c      	ldr	r3, [pc, #176]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80090fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80090fc:	e3c5      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80090fe:	4b29      	ldr	r3, [pc, #164]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0320 	and.w	r3, r3, #32
 8009106:	2b20      	cmp	r3, #32
 8009108:	d11b      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800910a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009110:	d117      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009112:	4b24      	ldr	r3, [pc, #144]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800911a:	2b00      	cmp	r3, #0
 800911c:	d005      	beq.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 800911e:	4b21      	ldr	r3, [pc, #132]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	0e1b      	lsrs	r3, r3, #24
 8009124:	f003 030f 	and.w	r3, r3, #15
 8009128:	e006      	b.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800912a:	4b1e      	ldr	r3, [pc, #120]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 800912c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009130:	041b      	lsls	r3, r3, #16
 8009132:	0e1b      	lsrs	r3, r3, #24
 8009134:	f003 030f 	and.w	r3, r3, #15
 8009138:	4a1b      	ldr	r2, [pc, #108]	@ (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800913a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800913e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009140:	e3a3      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	637b      	str	r3, [r7, #52]	@ 0x34
 8009146:	e3a0      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800914c:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009150:	430b      	orrs	r3, r1
 8009152:	d14f      	bne.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009154:	4b13      	ldr	r3, [pc, #76]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8009156:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800915a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800915e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009162:	2bc0      	cmp	r3, #192	@ 0xc0
 8009164:	d02b      	beq.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8009166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009168:	2bc0      	cmp	r3, #192	@ 0xc0
 800916a:	d840      	bhi.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0xb9e>
 800916c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916e:	2b80      	cmp	r3, #128	@ 0x80
 8009170:	d00d      	beq.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0xb3e>
 8009172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009174:	2b80      	cmp	r3, #128	@ 0x80
 8009176:	d83a      	bhi.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0xb9e>
 8009178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0xb36>
 800917e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009180:	2b40      	cmp	r3, #64	@ 0x40
 8009182:	d018      	beq.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
 8009184:	e033      	b.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0xb9e>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009186:	f7fe fd97 	bl	8007cb8 <HAL_RCC_GetPCLK3Freq>
 800918a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800918c:	e37d      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800918e:	4b05      	ldr	r3, [pc, #20]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800919a:	d109      	bne.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        {
          frequency = HSI_VALUE;
 800919c:	4b03      	ldr	r3, [pc, #12]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 800919e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80091a0:	e373      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80091a2:	bf00      	nop
 80091a4:	46020c00 	.word	0x46020c00
 80091a8:	080119c8 	.word	0x080119c8
 80091ac:	00f42400 	.word	0x00f42400
          frequency = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091b4:	e369      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80091b6:	f7fe fc35 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 80091ba:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80091bc:	e365      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80091be:	4ba0      	ldr	r3, [pc, #640]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d005      	beq.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80091ca:	4b9d      	ldr	r3, [pc, #628]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	0f1b      	lsrs	r3, r3, #28
 80091d0:	f003 030f 	and.w	r3, r3, #15
 80091d4:	e006      	b.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80091d6:	4b9a      	ldr	r3, [pc, #616]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 80091d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80091dc:	041b      	lsls	r3, r3, #16
 80091de:	0f1b      	lsrs	r3, r3, #28
 80091e0:	f003 030f 	and.w	r3, r3, #15
 80091e4:	4a97      	ldr	r2, [pc, #604]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>)
 80091e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091ec:	e34d      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 80091ee:	2300      	movs	r3, #0
 80091f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091f2:	e34a      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80091f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091f8:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80091fc:	430b      	orrs	r3, r1
 80091fe:	d147      	bne.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009200:	4b8f      	ldr	r3, [pc, #572]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 8009202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009206:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800920a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800920c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920e:	2b00      	cmp	r3, #0
 8009210:	d103      	bne.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009212:	f7fe fd29 	bl	8007c68 <HAL_RCC_GetPCLK1Freq>
 8009216:	6378      	str	r0, [r7, #52]	@ 0x34
 8009218:	e337      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800921a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009220:	d103      	bne.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xbda>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009222:	f7fe fbff 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 8009226:	6378      	str	r0, [r7, #52]	@ 0x34
 8009228:	e32f      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800922a:	4b85      	ldr	r3, [pc, #532]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009236:	d106      	bne.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8009238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800923e:	d102      	bne.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
    {
      frequency = HSI_VALUE;
 8009240:	4b81      	ldr	r3, [pc, #516]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 8009242:	637b      	str	r3, [r7, #52]	@ 0x34
 8009244:	e321      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009246:	4b7e      	ldr	r3, [pc, #504]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 0320 	and.w	r3, r3, #32
 800924e:	2b20      	cmp	r3, #32
 8009250:	d11b      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 8009252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009254:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009258:	d117      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800925a:	4b79      	ldr	r3, [pc, #484]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009262:	2b00      	cmp	r3, #0
 8009264:	d005      	beq.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009266:	4b76      	ldr	r3, [pc, #472]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	0e1b      	lsrs	r3, r3, #24
 800926c:	f003 030f 	and.w	r3, r3, #15
 8009270:	e006      	b.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xc30>
 8009272:	4b73      	ldr	r3, [pc, #460]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 8009274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009278:	041b      	lsls	r3, r3, #16
 800927a:	0e1b      	lsrs	r3, r3, #24
 800927c:	f003 030f 	and.w	r3, r3, #15
 8009280:	4a70      	ldr	r2, [pc, #448]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>)
 8009282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009286:	637b      	str	r3, [r7, #52]	@ 0x34
 8009288:	e2ff      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800928a:	2300      	movs	r3, #0
 800928c:	637b      	str	r3, [r7, #52]	@ 0x34
 800928e:	e2fc      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009294:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009298:	430b      	orrs	r3, r1
 800929a:	d15b      	bne.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800929c:	4b68      	ldr	r3, [pc, #416]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 800929e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80092a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d117      	bne.n	80092de <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80092ae:	4b64      	ldr	r3, [pc, #400]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d005      	beq.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 80092ba:	4b61      	ldr	r3, [pc, #388]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	0e1b      	lsrs	r3, r3, #24
 80092c0:	f003 030f 	and.w	r3, r3, #15
 80092c4:	e006      	b.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80092c6:	4b5e      	ldr	r3, [pc, #376]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 80092c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092cc:	041b      	lsls	r3, r3, #16
 80092ce:	0e1b      	lsrs	r3, r3, #24
 80092d0:	f003 030f 	and.w	r3, r3, #15
 80092d4:	4a5b      	ldr	r2, [pc, #364]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>)
 80092d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092da:	637b      	str	r3, [r7, #52]	@ 0x34
 80092dc:	e2d5      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80092de:	4b58      	ldr	r3, [pc, #352]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 80092e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092ec:	d112      	bne.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
 80092ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092f4:	d10e      	bne.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80092f6:	4b52      	ldr	r3, [pc, #328]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 80092f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009300:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009304:	d102      	bne.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
      {
        frequency = LSI_VALUE / 128U;
 8009306:	23fa      	movs	r3, #250	@ 0xfa
 8009308:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800930a:	e2be      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800930c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009310:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009312:	e2ba      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009314:	4b4a      	ldr	r3, [pc, #296]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800931c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009320:	d106      	bne.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
 8009322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009328:	d102      	bne.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
    {
      frequency = HSI_VALUE;
 800932a:	4b47      	ldr	r3, [pc, #284]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800932c:	637b      	str	r3, [r7, #52]	@ 0x34
 800932e:	e2ac      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009330:	4b43      	ldr	r3, [pc, #268]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 8009332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b02      	cmp	r3, #2
 800933c:	d107      	bne.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0xcfe>
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009344:	d103      	bne.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0xcfe>
    {
      frequency = LSE_VALUE;
 8009346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800934a:	637b      	str	r3, [r7, #52]	@ 0x34
 800934c:	e29d      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	637b      	str	r3, [r7, #52]	@ 0x34
 8009352:	e29a      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009358:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800935c:	430b      	orrs	r3, r1
 800935e:	d15b      	bne.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009360:	4b37      	ldr	r3, [pc, #220]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 8009362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009366:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800936a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800936c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936e:	2b00      	cmp	r3, #0
 8009370:	d117      	bne.n	80093a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009372:	4b33      	ldr	r3, [pc, #204]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800937a:	2b00      	cmp	r3, #0
 800937c:	d005      	beq.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800937e:	4b30      	ldr	r3, [pc, #192]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	0e1b      	lsrs	r3, r3, #24
 8009384:	f003 030f 	and.w	r3, r3, #15
 8009388:	e006      	b.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 800938a:	4b2d      	ldr	r3, [pc, #180]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 800938c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009390:	041b      	lsls	r3, r3, #16
 8009392:	0e1b      	lsrs	r3, r3, #24
 8009394:	f003 030f 	and.w	r3, r3, #15
 8009398:	4a2a      	ldr	r2, [pc, #168]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>)
 800939a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800939e:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a0:	e273      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80093a2:	4b27      	ldr	r3, [pc, #156]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 80093a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093b0:	d112      	bne.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
 80093b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093b8:	d10e      	bne.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093ba:	4b21      	ldr	r3, [pc, #132]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 80093bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093c8:	d102      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd80>
      {
        frequency = LSI_VALUE / 128U;
 80093ca:	23fa      	movs	r3, #250	@ 0xfa
 80093cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093ce:	e25c      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80093d0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80093d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093d6:	e258      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80093d8:	4b19      	ldr	r3, [pc, #100]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093e4:	d106      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
 80093e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093ec:	d102      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
    {
      frequency = HSI_VALUE;
 80093ee:	4b16      	ldr	r3, [pc, #88]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 80093f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093f2:	e24a      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80093f4:	4b12      	ldr	r3, [pc, #72]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 80093f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093fa:	f003 0302 	and.w	r3, r3, #2
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d107      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8009402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009404:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009408:	d103      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
    {
      frequency = LSE_VALUE;
 800940a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800940e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009410:	e23b      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009412:	2300      	movs	r3, #0
 8009414:	637b      	str	r3, [r7, #52]	@ 0x34
 8009416:	e238      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800941c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009420:	430b      	orrs	r3, r1
 8009422:	d14e      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe72>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009424:	4b06      	ldr	r3, [pc, #24]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>)
 8009426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800942a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800942e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10a      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009436:	f7fe fc17 	bl	8007c68 <HAL_RCC_GetPCLK1Freq>
 800943a:	6378      	str	r0, [r7, #52]	@ 0x34
 800943c:	e225      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800943e:	bf00      	nop
 8009440:	46020c00 	.word	0x46020c00
 8009444:	080119c8 	.word	0x080119c8
 8009448:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800944c:	4b8b      	ldr	r3, [pc, #556]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800944e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009452:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800945a:	d112      	bne.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
 800945c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009462:	d10e      	bne.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009464:	4b85      	ldr	r3, [pc, #532]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8009466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800946a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800946e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009472:	d102      	bne.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
      {
        frequency = LSI_VALUE / 128U;
 8009474:	23fa      	movs	r3, #250	@ 0xfa
 8009476:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009478:	e207      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800947a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800947e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009480:	e203      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009482:	4b7e      	ldr	r3, [pc, #504]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800948a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800948e:	d106      	bne.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8009490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009492:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009496:	d102      	bne.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
    {
      frequency = HSI_VALUE;
 8009498:	4b79      	ldr	r3, [pc, #484]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>)
 800949a:	637b      	str	r3, [r7, #52]	@ 0x34
 800949c:	e1f5      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800949e:	4b77      	ldr	r3, [pc, #476]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80094a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094a4:	f003 0302 	and.w	r3, r3, #2
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d107      	bne.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xe6c>
 80094ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80094b2:	d103      	bne.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xe6c>
    {
      frequency = LSE_VALUE;
 80094b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ba:	e1e6      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80094bc:	2300      	movs	r3, #0
 80094be:	637b      	str	r3, [r7, #52]	@ 0x34
 80094c0:	e1e3      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80094c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094c6:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80094ca:	430b      	orrs	r3, r1
 80094cc:	d12d      	bne.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0xeda>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80094ce:	4b6b      	ldr	r3, [pc, #428]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80094d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094d4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80094d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80094da:	4b68      	ldr	r3, [pc, #416]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094e6:	d105      	bne.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 80094e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d102      	bne.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
    {
      frequency = HSE_VALUE;
 80094ee:	4b64      	ldr	r3, [pc, #400]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>)
 80094f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80094f2:	e1ca      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80094f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094fa:	d107      	bne.n	800950c <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009500:	4618      	mov	r0, r3
 8009502:	f7fe fc73 	bl	8007dec <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009508:	637b      	str	r3, [r7, #52]	@ 0x34
 800950a:	e1be      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800950c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009512:	d107      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0xed4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009514:	f107 0318 	add.w	r3, r7, #24
 8009518:	4618      	mov	r0, r3
 800951a:	f7fe fdcd 	bl	80080b8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	637b      	str	r3, [r7, #52]	@ 0x34
 8009522:	e1b2      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	637b      	str	r3, [r7, #52]	@ 0x34
 8009528:	e1af      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800952a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800952e:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009532:	430b      	orrs	r3, r1
 8009534:	d14d      	bne.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009536:	4b51      	ldr	r3, [pc, #324]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8009538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800953c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009540:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009544:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009548:	d028      	beq.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0xf4c>
 800954a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009550:	d83c      	bhi.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009558:	d013      	beq.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0xf32>
 800955a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009560:	d834      	bhi.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8009562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009564:	2b00      	cmp	r3, #0
 8009566:	d004      	beq.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
 8009568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800956e:	d004      	beq.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8009570:	e02c      	b.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009572:	f7fe fb8d 	bl	8007c90 <HAL_RCC_GetPCLK2Freq>
 8009576:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009578:	e187      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800957a:	f7fe fa53 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 800957e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009580:	e183      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009582:	4b3e      	ldr	r3, [pc, #248]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800958a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800958e:	d102      	bne.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0xf46>
        {
          frequency = HSI_VALUE;
 8009590:	4b3b      	ldr	r3, [pc, #236]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>)
 8009592:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009594:	e179      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800959a:	e176      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800959c:	4b37      	ldr	r3, [pc, #220]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d005      	beq.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 80095a8:	4b34      	ldr	r3, [pc, #208]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	0e1b      	lsrs	r3, r3, #24
 80095ae:	f003 030f 	and.w	r3, r3, #15
 80095b2:	e006      	b.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf72>
 80095b4:	4b31      	ldr	r3, [pc, #196]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80095b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80095ba:	041b      	lsls	r3, r3, #16
 80095bc:	0e1b      	lsrs	r3, r3, #24
 80095be:	f003 030f 	and.w	r3, r3, #15
 80095c2:	4a30      	ldr	r2, [pc, #192]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>)
 80095c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095ca:	e15e      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095d0:	e15b      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80095d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095d6:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80095da:	430b      	orrs	r3, r1
 80095dc:	d154      	bne.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80095de:	4b27      	ldr	r3, [pc, #156]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80095e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80095e8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80095ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095f0:	d028      	beq.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>
 80095f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095f8:	d83c      	bhi.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 80095fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009600:	d013      	beq.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
 8009602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009604:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009608:	d834      	bhi.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 800960a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960c:	2b00      	cmp	r3, #0
 800960e:	d004      	beq.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 8009610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009616:	d004      	beq.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0xfd2>
 8009618:	e02c      	b.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800961a:	f7fe fb25 	bl	8007c68 <HAL_RCC_GetPCLK1Freq>
 800961e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009620:	e133      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009622:	f7fe f9ff 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 8009626:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009628:	e12f      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800962a:	4b14      	ldr	r3, [pc, #80]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009636:	d102      	bne.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0xfee>
        {
          frequency = HSI_VALUE;
 8009638:	4b11      	ldr	r3, [pc, #68]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>)
 800963a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800963c:	e125      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800963e:	2300      	movs	r3, #0
 8009640:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009642:	e122      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009644:	4b0d      	ldr	r3, [pc, #52]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d005      	beq.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>
 8009650:	4b0a      	ldr	r3, [pc, #40]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	0e1b      	lsrs	r3, r3, #24
 8009656:	f003 030f 	and.w	r3, r3, #15
 800965a:	e006      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 800965c:	4b07      	ldr	r3, [pc, #28]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800965e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009662:	041b      	lsls	r3, r3, #16
 8009664:	0e1b      	lsrs	r3, r3, #24
 8009666:	f003 030f 	and.w	r3, r3, #15
 800966a:	4a06      	ldr	r2, [pc, #24]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>)
 800966c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009670:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009672:	e10a      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8009674:	2300      	movs	r3, #0
 8009676:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009678:	e107      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800967a:	bf00      	nop
 800967c:	46020c00 	.word	0x46020c00
 8009680:	00f42400 	.word	0x00f42400
 8009684:	080119c8 	.word	0x080119c8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800968c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009690:	430b      	orrs	r3, r1
 8009692:	d16d      	bne.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009694:	4b7f      	ldr	r3, [pc, #508]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800969a:	f003 0318 	and.w	r3, r3, #24
 800969e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80096a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a2:	2b18      	cmp	r3, #24
 80096a4:	d861      	bhi.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80096a6:	a201      	add	r2, pc, #4	@ (adr r2, 80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	08009711 	.word	0x08009711
 80096b0:	0800976b 	.word	0x0800976b
 80096b4:	0800976b 	.word	0x0800976b
 80096b8:	0800976b 	.word	0x0800976b
 80096bc:	0800976b 	.word	0x0800976b
 80096c0:	0800976b 	.word	0x0800976b
 80096c4:	0800976b 	.word	0x0800976b
 80096c8:	0800976b 	.word	0x0800976b
 80096cc:	08009719 	.word	0x08009719
 80096d0:	0800976b 	.word	0x0800976b
 80096d4:	0800976b 	.word	0x0800976b
 80096d8:	0800976b 	.word	0x0800976b
 80096dc:	0800976b 	.word	0x0800976b
 80096e0:	0800976b 	.word	0x0800976b
 80096e4:	0800976b 	.word	0x0800976b
 80096e8:	0800976b 	.word	0x0800976b
 80096ec:	08009721 	.word	0x08009721
 80096f0:	0800976b 	.word	0x0800976b
 80096f4:	0800976b 	.word	0x0800976b
 80096f8:	0800976b 	.word	0x0800976b
 80096fc:	0800976b 	.word	0x0800976b
 8009700:	0800976b 	.word	0x0800976b
 8009704:	0800976b 	.word	0x0800976b
 8009708:	0800976b 	.word	0x0800976b
 800970c:	0800973b 	.word	0x0800973b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009710:	f7fe fad2 	bl	8007cb8 <HAL_RCC_GetPCLK3Freq>
 8009714:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009716:	e0b8      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009718:	f7fe f984 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 800971c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800971e:	e0b4      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009720:	4b5c      	ldr	r3, [pc, #368]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800972c:	d102      	bne.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800972e:	4b5a      	ldr	r3, [pc, #360]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8009730:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009732:	e0aa      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8009734:	2300      	movs	r3, #0
 8009736:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009738:	e0a7      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800973a:	4b56      	ldr	r3, [pc, #344]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d005      	beq.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8009746:	4b53      	ldr	r3, [pc, #332]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	0e1b      	lsrs	r3, r3, #24
 800974c:	f003 030f 	and.w	r3, r3, #15
 8009750:	e006      	b.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8009752:	4b50      	ldr	r3, [pc, #320]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009754:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009758:	041b      	lsls	r3, r3, #16
 800975a:	0e1b      	lsrs	r3, r3, #24
 800975c:	f003 030f 	and.w	r3, r3, #15
 8009760:	4a4e      	ldr	r2, [pc, #312]	@ (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8009762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009766:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009768:	e08f      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800976a:	2300      	movs	r3, #0
 800976c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800976e:	e08c      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009774:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8009778:	430b      	orrs	r3, r1
 800977a:	d14c      	bne.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800977c:	4b45      	ldr	r3, [pc, #276]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800977e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009782:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009786:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800978e:	d013      	beq.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8009790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009792:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009796:	d83b      	bhi.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8009798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800979e:	d013      	beq.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 80097a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097a6:	d833      	bhi.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80097a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d014      	beq.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 80097ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097b4:	d014      	beq.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80097b6:	e02b      	b.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097b8:	f107 0318 	add.w	r3, r7, #24
 80097bc:	4618      	mov	r0, r3
 80097be:	f7fe fc7b 	bl	80080b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097c6:	e060      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fe fb0d 	bl	8007dec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80097d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097d6:	e058      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80097d8:	f7fe f924 	bl	8007a24 <HAL_RCC_GetSysClockFreq>
 80097dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80097de:	e054      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80097e0:	4b2c      	ldr	r3, [pc, #176]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d005      	beq.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 80097ec:	4b29      	ldr	r3, [pc, #164]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	0e1b      	lsrs	r3, r3, #24
 80097f2:	f003 030f 	and.w	r3, r3, #15
 80097f6:	e006      	b.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80097f8:	4b26      	ldr	r3, [pc, #152]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80097fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80097fe:	041b      	lsls	r3, r3, #16
 8009800:	0e1b      	lsrs	r3, r3, #24
 8009802:	f003 030f 	and.w	r3, r3, #15
 8009806:	4a25      	ldr	r2, [pc, #148]	@ (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8009808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800980c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800980e:	e03c      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8009810:	2300      	movs	r3, #0
 8009812:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009814:	e039      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800981a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800981e:	430b      	orrs	r3, r1
 8009820:	d131      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009822:	4b1c      	ldr	r3, [pc, #112]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009828:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800982c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800982e:	4b19      	ldr	r3, [pc, #100]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009834:	f003 0302 	and.w	r3, r3, #2
 8009838:	2b02      	cmp	r3, #2
 800983a:	d106      	bne.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 800983c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983e:	2b00      	cmp	r3, #0
 8009840:	d103      	bne.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8009842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009846:	637b      	str	r3, [r7, #52]	@ 0x34
 8009848:	e01f      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800984a:	4b12      	ldr	r3, [pc, #72]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800984c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009854:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009858:	d112      	bne.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800985a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009860:	d10e      	bne.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009862:	4b0c      	ldr	r3, [pc, #48]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800986c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009870:	d102      	bne.n	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8009872:	23fa      	movs	r3, #250	@ 0xfa
 8009874:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009876:	e008      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8009878:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800987c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800987e:	e004      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8009880:	2300      	movs	r3, #0
 8009882:	637b      	str	r3, [r7, #52]	@ 0x34
 8009884:	e001      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800988a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800988c:	4618      	mov	r0, r3
 800988e:	3738      	adds	r7, #56	@ 0x38
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	46020c00 	.word	0x46020c00
 8009898:	00f42400 	.word	0x00f42400
 800989c:	080119c8 	.word	0x080119c8

080098a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d101      	bne.n	80098b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e042      	b.n	8009938 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d106      	bne.n	80098ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f83b 	bl	8009940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2224      	movs	r2, #36	@ 0x24
 80098ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f022 0201 	bic.w	r2, r2, #1
 80098e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f8dc 	bl	8009aa0 <UART_SetConfig>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d101      	bne.n	80098f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e022      	b.n	8009938 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fa72 	bl	8009de4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685a      	ldr	r2, [r3, #4]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800990e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689a      	ldr	r2, [r3, #8]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800991e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f042 0201 	orr.w	r2, r2, #1
 800992e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 faf9 	bl	8009f28 <UART_CheckIdleState>
 8009936:	4603      	mov	r3, r0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b08a      	sub	sp, #40	@ 0x28
 8009958:	af02      	add	r7, sp, #8
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	603b      	str	r3, [r7, #0]
 8009960:	4613      	mov	r3, r2
 8009962:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800996a:	2b20      	cmp	r3, #32
 800996c:	f040 8092 	bne.w	8009a94 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d002      	beq.n	800997c <HAL_UART_Transmit+0x28>
 8009976:	88fb      	ldrh	r3, [r7, #6]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d101      	bne.n	8009980 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e08a      	b.n	8009a96 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009986:	2b01      	cmp	r3, #1
 8009988:	d101      	bne.n	800998e <HAL_UART_Transmit+0x3a>
 800998a:	2302      	movs	r3, #2
 800998c:	e083      	b.n	8009a96 <HAL_UART_Transmit+0x142>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099a0:	2b80      	cmp	r3, #128	@ 0x80
 80099a2:	d107      	bne.n	80099b4 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	689a      	ldr	r2, [r3, #8]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80099b2:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2221      	movs	r2, #33	@ 0x21
 80099c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099c4:	f7fb f92a 	bl	8004c1c <HAL_GetTick>
 80099c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	88fa      	ldrh	r2, [r7, #6]
 80099ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	88fa      	ldrh	r2, [r7, #6]
 80099d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099e2:	d108      	bne.n	80099f6 <HAL_UART_Transmit+0xa2>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d104      	bne.n	80099f6 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 80099ec:	2300      	movs	r3, #0
 80099ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	61bb      	str	r3, [r7, #24]
 80099f4:	e003      	b.n	80099fe <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099fa:	2300      	movs	r3, #0
 80099fc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8009a06:	e02c      	b.n	8009a62 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	2180      	movs	r1, #128	@ 0x80
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 fad3 	bl	8009fbe <UART_WaitOnFlagUntilTimeout>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e039      	b.n	8009a96 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10b      	bne.n	8009a40 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a36:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	3302      	adds	r3, #2
 8009a3c:	61bb      	str	r3, [r7, #24]
 8009a3e:	e007      	b.n	8009a50 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	781a      	ldrb	r2, [r3, #0]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1cc      	bne.n	8009a08 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	2200      	movs	r2, #0
 8009a76:	2140      	movs	r1, #64	@ 0x40
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f000 faa0 	bl	8009fbe <UART_WaitOnFlagUntilTimeout>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8009a84:	2303      	movs	r3, #3
 8009a86:	e006      	b.n	8009a96 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2220      	movs	r2, #32
 8009a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8009a90:	2300      	movs	r3, #0
 8009a92:	e000      	b.n	8009a96 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8009a94:	2302      	movs	r3, #2
  }
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3720      	adds	r7, #32
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009aa4:	b094      	sub	sp, #80	@ 0x50
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	4b7e      	ldr	r3, [pc, #504]	@ (8009cb0 <UART_SetConfig+0x210>)
 8009ab6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aba:	689a      	ldr	r2, [r3, #8]
 8009abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	431a      	orrs	r2, r3
 8009ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aca:	69db      	ldr	r3, [r3, #28]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4977      	ldr	r1, [pc, #476]	@ (8009cb4 <UART_SetConfig+0x214>)
 8009ad8:	4019      	ands	r1, r3
 8009ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ae0:	430b      	orrs	r3, r1
 8009ae2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af0:	68d9      	ldr	r1, [r3, #12]
 8009af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	ea40 0301 	orr.w	r3, r0, r1
 8009afa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	4b6a      	ldr	r3, [pc, #424]	@ (8009cb0 <UART_SetConfig+0x210>)
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d009      	beq.n	8009b20 <UART_SetConfig+0x80>
 8009b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	4b69      	ldr	r3, [pc, #420]	@ (8009cb8 <UART_SetConfig+0x218>)
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d004      	beq.n	8009b20 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b18:	6a1a      	ldr	r2, [r3, #32]
 8009b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009b2a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b34:	430b      	orrs	r3, r1
 8009b36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3e:	f023 000f 	bic.w	r0, r3, #15
 8009b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b44:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	ea40 0301 	orr.w	r3, r0, r1
 8009b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	4b59      	ldr	r3, [pc, #356]	@ (8009cbc <UART_SetConfig+0x21c>)
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d102      	bne.n	8009b60 <UART_SetConfig+0xc0>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b5e:	e029      	b.n	8009bb4 <UART_SetConfig+0x114>
 8009b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	4b56      	ldr	r3, [pc, #344]	@ (8009cc0 <UART_SetConfig+0x220>)
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d102      	bne.n	8009b70 <UART_SetConfig+0xd0>
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b6e:	e021      	b.n	8009bb4 <UART_SetConfig+0x114>
 8009b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	4b53      	ldr	r3, [pc, #332]	@ (8009cc4 <UART_SetConfig+0x224>)
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d102      	bne.n	8009b80 <UART_SetConfig+0xe0>
 8009b7a:	2304      	movs	r3, #4
 8009b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b7e:	e019      	b.n	8009bb4 <UART_SetConfig+0x114>
 8009b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	4b50      	ldr	r3, [pc, #320]	@ (8009cc8 <UART_SetConfig+0x228>)
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d102      	bne.n	8009b90 <UART_SetConfig+0xf0>
 8009b8a:	2308      	movs	r3, #8
 8009b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b8e:	e011      	b.n	8009bb4 <UART_SetConfig+0x114>
 8009b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	4b4d      	ldr	r3, [pc, #308]	@ (8009ccc <UART_SetConfig+0x22c>)
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d102      	bne.n	8009ba0 <UART_SetConfig+0x100>
 8009b9a:	2310      	movs	r3, #16
 8009b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b9e:	e009      	b.n	8009bb4 <UART_SetConfig+0x114>
 8009ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	4b42      	ldr	r3, [pc, #264]	@ (8009cb0 <UART_SetConfig+0x210>)
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d102      	bne.n	8009bb0 <UART_SetConfig+0x110>
 8009baa:	2320      	movs	r3, #32
 8009bac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bae:	e001      	b.n	8009bb4 <UART_SetConfig+0x114>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	4b3d      	ldr	r3, [pc, #244]	@ (8009cb0 <UART_SetConfig+0x210>)
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d005      	beq.n	8009bca <UART_SetConfig+0x12a>
 8009bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8009cb8 <UART_SetConfig+0x218>)
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	f040 8085 	bne.w	8009cd4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bcc:	2200      	movs	r2, #0
 8009bce:	623b      	str	r3, [r7, #32]
 8009bd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8009bd2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009bd6:	f7fe fd3b 	bl	8008650 <HAL_RCCEx_GetPeriphCLKFreq>
 8009bda:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f000 80e8 	beq.w	8009db4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be8:	4a39      	ldr	r2, [pc, #228]	@ (8009cd0 <UART_SetConfig+0x230>)
 8009bea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bf6:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	4413      	add	r3, r2
 8009c02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d305      	bcc.n	8009c14 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d903      	bls.n	8009c1c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009c1a:	e048      	b.n	8009cae <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c1e:	2200      	movs	r2, #0
 8009c20:	61bb      	str	r3, [r7, #24]
 8009c22:	61fa      	str	r2, [r7, #28]
 8009c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c28:	4a29      	ldr	r2, [pc, #164]	@ (8009cd0 <UART_SetConfig+0x230>)
 8009c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	2200      	movs	r2, #0
 8009c32:	613b      	str	r3, [r7, #16]
 8009c34:	617a      	str	r2, [r7, #20]
 8009c36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009c3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c3e:	f7f7 f807 	bl	8000c50 <__aeabi_uldivmod>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	4610      	mov	r0, r2
 8009c48:	4619      	mov	r1, r3
 8009c4a:	f04f 0200 	mov.w	r2, #0
 8009c4e:	f04f 0300 	mov.w	r3, #0
 8009c52:	020b      	lsls	r3, r1, #8
 8009c54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c58:	0202      	lsls	r2, r0, #8
 8009c5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c5c:	6849      	ldr	r1, [r1, #4]
 8009c5e:	0849      	lsrs	r1, r1, #1
 8009c60:	2000      	movs	r0, #0
 8009c62:	460c      	mov	r4, r1
 8009c64:	4605      	mov	r5, r0
 8009c66:	eb12 0804 	adds.w	r8, r2, r4
 8009c6a:	eb43 0905 	adc.w	r9, r3, r5
 8009c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	60bb      	str	r3, [r7, #8]
 8009c76:	60fa      	str	r2, [r7, #12]
 8009c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	4649      	mov	r1, r9
 8009c80:	f7f6 ffe6 	bl	8000c50 <__aeabi_uldivmod>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	4613      	mov	r3, r2
 8009c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c92:	d308      	bcc.n	8009ca6 <UART_SetConfig+0x206>
 8009c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c9a:	d204      	bcs.n	8009ca6 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8009c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009ca2:	60da      	str	r2, [r3, #12]
 8009ca4:	e003      	b.n	8009cae <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009cac:	e082      	b.n	8009db4 <UART_SetConfig+0x314>
 8009cae:	e081      	b.n	8009db4 <UART_SetConfig+0x314>
 8009cb0:	46002400 	.word	0x46002400
 8009cb4:	cfff69f3 	.word	0xcfff69f3
 8009cb8:	56002400 	.word	0x56002400
 8009cbc:	40013800 	.word	0x40013800
 8009cc0:	40004400 	.word	0x40004400
 8009cc4:	40004800 	.word	0x40004800
 8009cc8:	40004c00 	.word	0x40004c00
 8009ccc:	40005000 	.word	0x40005000
 8009cd0:	08011a88 	.word	0x08011a88
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd6:	69db      	ldr	r3, [r3, #28]
 8009cd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cdc:	d13c      	bne.n	8009d58 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	603b      	str	r3, [r7, #0]
 8009ce4:	607a      	str	r2, [r7, #4]
 8009ce6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cea:	f7fe fcb1 	bl	8008650 <HAL_RCCEx_GetPeriphCLKFreq>
 8009cee:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d05e      	beq.n	8009db4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cfa:	4a39      	ldr	r2, [pc, #228]	@ (8009de0 <UART_SetConfig+0x340>)
 8009cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d00:	461a      	mov	r2, r3
 8009d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d08:	005a      	lsls	r2, r3, #1
 8009d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	085b      	lsrs	r3, r3, #1
 8009d10:	441a      	add	r2, r3
 8009d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d1e:	2b0f      	cmp	r3, #15
 8009d20:	d916      	bls.n	8009d50 <UART_SetConfig+0x2b0>
 8009d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d28:	d212      	bcs.n	8009d50 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	f023 030f 	bic.w	r3, r3, #15
 8009d32:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d36:	085b      	lsrs	r3, r3, #1
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	f003 0307 	and.w	r3, r3, #7
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009d42:	4313      	orrs	r3, r2
 8009d44:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009d4c:	60da      	str	r2, [r3, #12]
 8009d4e:	e031      	b.n	8009db4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009d56:	e02d      	b.n	8009db4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009d58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	469a      	mov	sl, r3
 8009d5e:	4693      	mov	fp, r2
 8009d60:	4650      	mov	r0, sl
 8009d62:	4659      	mov	r1, fp
 8009d64:	f7fe fc74 	bl	8008650 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d68:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d021      	beq.n	8009db4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d74:	4a1a      	ldr	r2, [pc, #104]	@ (8009de0 <UART_SetConfig+0x340>)
 8009d76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	085b      	lsrs	r3, r3, #1
 8009d88:	441a      	add	r2, r3
 8009d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d96:	2b0f      	cmp	r3, #15
 8009d98:	d909      	bls.n	8009dae <UART_SetConfig+0x30e>
 8009d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009da0:	d205      	bcs.n	8009dae <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	60da      	str	r2, [r3, #12]
 8009dac:	e002      	b.n	8009db4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db6:	2201      	movs	r2, #1
 8009db8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8009dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dcc:	2200      	movs	r2, #0
 8009dce:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8009dd0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3750      	adds	r7, #80	@ 0x50
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dde:	bf00      	nop
 8009de0:	08011a88 	.word	0x08011a88

08009de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df0:	f003 0301 	and.w	r3, r3, #1
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00a      	beq.n	8009e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e12:	f003 0302 	and.w	r3, r3, #2
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	430a      	orrs	r2, r1
 8009e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e34:	f003 0304 	and.w	r3, r3, #4
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00a      	beq.n	8009e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e56:	f003 0308 	and.w	r3, r3, #8
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00a      	beq.n	8009e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	430a      	orrs	r2, r1
 8009e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e78:	f003 0310 	and.w	r3, r3, #16
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00a      	beq.n	8009e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	430a      	orrs	r2, r1
 8009e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e9a:	f003 0320 	and.w	r3, r3, #32
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00a      	beq.n	8009eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d01a      	beq.n	8009efa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	430a      	orrs	r2, r1
 8009ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ede:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ee2:	d10a      	bne.n	8009efa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00a      	beq.n	8009f1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	605a      	str	r2, [r3, #4]
  }
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af02      	add	r7, sp, #8
 8009f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f38:	f7fa fe70 	bl	8004c1c <HAL_GetTick>
 8009f3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 0308 	and.w	r3, r3, #8
 8009f48:	2b08      	cmp	r3, #8
 8009f4a:	d10e      	bne.n	8009f6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f82f 	bl	8009fbe <UART_WaitOnFlagUntilTimeout>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f66:	2303      	movs	r3, #3
 8009f68:	e025      	b.n	8009fb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0304 	and.w	r3, r3, #4
 8009f74:	2b04      	cmp	r3, #4
 8009f76:	d10e      	bne.n	8009f96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f819 	bl	8009fbe <UART_WaitOnFlagUntilTimeout>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e00f      	b.n	8009fb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2220      	movs	r2, #32
 8009f9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b09c      	sub	sp, #112	@ 0x70
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	60b9      	str	r1, [r7, #8]
 8009fc8:	603b      	str	r3, [r7, #0]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fce:	e0a9      	b.n	800a124 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fd6:	f000 80a5 	beq.w	800a124 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fda:	f7fa fe1f 	bl	8004c1c <HAL_GetTick>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d302      	bcc.n	8009ff0 <UART_WaitOnFlagUntilTimeout+0x32>
 8009fea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d140      	bne.n	800a072 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ff8:	e853 3f00 	ldrex	r3, [r3]
 8009ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a000:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a004:	667b      	str	r3, [r7, #100]	@ 0x64
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a00e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a010:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a012:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a014:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a016:	e841 2300 	strex	r3, r2, [r1]
 800a01a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a01c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1e6      	bne.n	8009ff0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3308      	adds	r3, #8
 800a028:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a034:	f023 0301 	bic.w	r3, r3, #1
 800a038:	663b      	str	r3, [r7, #96]	@ 0x60
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	3308      	adds	r3, #8
 800a040:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a042:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a044:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a048:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e5      	bne.n	800a022 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2220      	movs	r2, #32
 800a05a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2220      	movs	r2, #32
 800a062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800a06e:	2303      	movs	r3, #3
 800a070:	e069      	b.n	800a146 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 0304 	and.w	r3, r3, #4
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d051      	beq.n	800a124 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	69db      	ldr	r3, [r3, #28]
 800a086:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a08a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a08e:	d149      	bne.n	800a124 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a098:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a2:	e853 3f00 	ldrex	r3, [r3]
 800a0a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0aa:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a0ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0ba:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a0be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0c0:	e841 2300 	strex	r3, r2, [r1]
 800a0c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a0c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1e6      	bne.n	800a09a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3308      	adds	r3, #8
 800a0d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	e853 3f00 	ldrex	r3, [r3]
 800a0da:	613b      	str	r3, [r7, #16]
   return(result);
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	f023 0301 	bic.w	r3, r3, #1
 800a0e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3308      	adds	r3, #8
 800a0ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a0ec:	623a      	str	r2, [r7, #32]
 800a0ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f0:	69f9      	ldr	r1, [r7, #28]
 800a0f2:	6a3a      	ldr	r2, [r7, #32]
 800a0f4:	e841 2300 	strex	r3, r2, [r1]
 800a0f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1e5      	bne.n	800a0cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2220      	movs	r2, #32
 800a104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2220      	movs	r2, #32
 800a10c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2220      	movs	r2, #32
 800a114:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e010      	b.n	800a146 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	69da      	ldr	r2, [r3, #28]
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	4013      	ands	r3, r2
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	429a      	cmp	r2, r3
 800a132:	bf0c      	ite	eq
 800a134:	2301      	moveq	r3, #1
 800a136:	2300      	movne	r3, #0
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	461a      	mov	r2, r3
 800a13c:	79fb      	ldrb	r3, [r7, #7]
 800a13e:	429a      	cmp	r2, r3
 800a140:	f43f af46 	beq.w	8009fd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3770      	adds	r7, #112	@ 0x70
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
	...

0800a150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800a150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a188 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800a154:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800a156:	e003      	b.n	800a160 <LoopCopyDataInit>

0800a158 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800a158:	4b0c      	ldr	r3, [pc, #48]	@ (800a18c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800a15a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800a15c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800a15e:	3104      	adds	r1, #4

0800a160 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800a160:	480b      	ldr	r0, [pc, #44]	@ (800a190 <LoopForever+0xa>)
	ldr	r3, =_edata
 800a162:	4b0c      	ldr	r3, [pc, #48]	@ (800a194 <LoopForever+0xe>)
	adds	r2, r0, r1
 800a164:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800a166:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800a168:	d3f6      	bcc.n	800a158 <CopyDataInit>
	ldr	r2, =_sbss
 800a16a:	4a0b      	ldr	r2, [pc, #44]	@ (800a198 <LoopForever+0x12>)
	b	LoopFillZerobss
 800a16c:	e002      	b.n	800a174 <LoopFillZerobss>

0800a16e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800a16e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800a170:	f842 3b04 	str.w	r3, [r2], #4

0800a174 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800a174:	4b09      	ldr	r3, [pc, #36]	@ (800a19c <LoopForever+0x16>)
	cmp	r2, r3
 800a176:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800a178:	d3f9      	bcc.n	800a16e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a17a:	f7fa fc9f 	bl	8004abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a17e:	f003 ff55 	bl	800e02c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a182:	f002 fbb9 	bl	800c8f8 <main>

0800a186 <LoopForever>:

LoopForever:
    b LoopForever
 800a186:	e7fe      	b.n	800a186 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800a188:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800a18c:	08011ed0 	.word	0x08011ed0
	ldr	r0, =_sdata
 800a190:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800a194:	20000290 	.word	0x20000290
	ldr	r2, =_sbss
 800a198:	20000290 	.word	0x20000290
	ldr	r3, = _ebss
 800a19c:	20001170 	.word	0x20001170

0800a1a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a1a0:	e7fe      	b.n	800a1a0 <ADC1_IRQHandler>
	...

0800a1a4 <UART1_Init>:
#include "stm32u5xx.h"
#include "stm32u5xx_hal.h"

UART_HandleTypeDef huart1;

void UART1_Init(void) {
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b088      	sub	sp, #32
 800a1a8:	af00      	add	r7, sp, #0
    // Enable UART and GPIO clocks
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1aa:	4b2a      	ldr	r3, [pc, #168]	@ (800a254 <UART1_Init+0xb0>)
 800a1ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1b0:	4a28      	ldr	r2, [pc, #160]	@ (800a254 <UART1_Init+0xb0>)
 800a1b2:	f043 0301 	orr.w	r3, r3, #1
 800a1b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800a1ba:	4b26      	ldr	r3, [pc, #152]	@ (800a254 <UART1_Init+0xb0>)
 800a1bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	60bb      	str	r3, [r7, #8]
 800a1c6:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_USART1_CLK_ENABLE();
 800a1c8:	4b22      	ldr	r3, [pc, #136]	@ (800a254 <UART1_Init+0xb0>)
 800a1ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a1ce:	4a21      	ldr	r2, [pc, #132]	@ (800a254 <UART1_Init+0xb0>)
 800a1d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a1d4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800a1d8:	4b1e      	ldr	r3, [pc, #120]	@ (800a254 <UART1_Init+0xb0>)
 800a1da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a1de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1e2:	607b      	str	r3, [r7, #4]
 800a1e4:	687b      	ldr	r3, [r7, #4]

    // Configure GPIO pins for UART (PA9 TX, PA10 RX)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1e6:	f107 030c 	add.w	r3, r7, #12
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	605a      	str	r2, [r3, #4]
 800a1f0:	609a      	str	r2, [r3, #8]
 800a1f2:	60da      	str	r2, [r3, #12]
 800a1f4:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 800a1f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800a1fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a200:	2300      	movs	r3, #0
 800a202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a204:	2300      	movs	r3, #0
 800a206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a208:	2307      	movs	r3, #7
 800a20a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a20c:	f107 030c 	add.w	r3, r7, #12
 800a210:	4619      	mov	r1, r3
 800a212:	4811      	ldr	r0, [pc, #68]	@ (800a258 <UART1_Init+0xb4>)
 800a214:	f7fb f916 	bl	8005444 <HAL_GPIO_Init>

    // Configure UART
    huart1.Instance = USART1;
 800a218:	4b10      	ldr	r3, [pc, #64]	@ (800a25c <UART1_Init+0xb8>)
 800a21a:	4a11      	ldr	r2, [pc, #68]	@ (800a260 <UART1_Init+0xbc>)
 800a21c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 800a21e:	4b0f      	ldr	r3, [pc, #60]	@ (800a25c <UART1_Init+0xb8>)
 800a220:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800a224:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a226:	4b0d      	ldr	r3, [pc, #52]	@ (800a25c <UART1_Init+0xb8>)
 800a228:	2200      	movs	r2, #0
 800a22a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800a22c:	4b0b      	ldr	r3, [pc, #44]	@ (800a25c <UART1_Init+0xb8>)
 800a22e:	2200      	movs	r2, #0
 800a230:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800a232:	4b0a      	ldr	r3, [pc, #40]	@ (800a25c <UART1_Init+0xb8>)
 800a234:	2200      	movs	r2, #0
 800a236:	611a      	str	r2, [r3, #16]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a238:	4b08      	ldr	r3, [pc, #32]	@ (800a25c <UART1_Init+0xb8>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	619a      	str	r2, [r3, #24]
    huart1.Init.Mode = UART_MODE_TX_RX;
 800a23e:	4b07      	ldr	r3, [pc, #28]	@ (800a25c <UART1_Init+0xb8>)
 800a240:	220c      	movs	r2, #12
 800a242:	615a      	str	r2, [r3, #20]

    // Initialize UART
    HAL_UART_Init(&huart1);
 800a244:	4805      	ldr	r0, [pc, #20]	@ (800a25c <UART1_Init+0xb8>)
 800a246:	f7ff fb2b 	bl	80098a0 <HAL_UART_Init>
}
 800a24a:	bf00      	nop
 800a24c:	3720      	adds	r7, #32
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	46020c00 	.word	0x46020c00
 800a258:	42020000 	.word	0x42020000
 800a25c:	20000edc 	.word	0x20000edc
 800a260:	40013800 	.word	0x40013800

0800a264 <UART_SendString>:

void UART_SendChar(uint8_t c) {
    HAL_UART_Transmit(&huart1, &c, 1, HAL_MAX_DELAY);
}

void UART_SendString(char* str) {
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7f6 f803 	bl	8000278 <strlen>
 800a272:	4603      	mov	r3, r0
 800a274:	b29a      	uxth	r2, r3
 800a276:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a27a:	6879      	ldr	r1, [r7, #4]
 800a27c:	4803      	ldr	r0, [pc, #12]	@ (800a28c <UART_SendString+0x28>)
 800a27e:	f7ff fb69 	bl	8009954 <HAL_UART_Transmit>
}
 800a282:	bf00      	nop
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	20000edc 	.word	0x20000edc

0800a290 <Feature_Extraction_State_Machine_Translation>:
//serial setup end remove



void Feature_Extraction_State_Machine_Translation(float * feature_1,
		float * feature_2, float * sig_mag_scale) {
 800a290:	b580      	push	{r7, lr}
 800a292:	b0a8      	sub	sp, #160	@ 0xa0
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
	float acc_x_filter_lp, acc_y_filter_lp;
	float acc_x_filter_hp;
	float acc_y_filter_hp;
	float acc_x_filter_hp_prev, acc_y_filter_hp_prev;
	float acc_x_filter_lp_prev, acc_y_filter_lp_prev;
	float vel_x = 0;
 800a29c:	f04f 0300 	mov.w	r3, #0
 800a2a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	float vel_x_prev = 0;
 800a2a4:	f04f 0300 	mov.w	r3, #0
 800a2a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	float vel_y = 0;
 800a2ac:	f04f 0300 	mov.w	r3, #0
 800a2b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
	float vel_y_prev = 0;
 800a2b2:	f04f 0300 	mov.w	r3, #0
 800a2b6:	67bb      	str	r3, [r7, #120]	@ 0x78


	/*
	 * Define sample period
	 */
	sample_period = INTEGRATION_INTERVAL_DISP;
 800a2b8:	4bdb      	ldr	r3, [pc, #876]	@ (800a628 <Feature_Extraction_State_Machine_Translation+0x398>)
 800a2ba:	66fb      	str	r3, [r7, #108]	@ 0x6c

	/*
	 * Set velocity magnitude threshold value (in millimeters/sec) for recognition of motion state.
	 */

	velocity_mag_threshold = 40;
 800a2bc:	4bdb      	ldr	r3, [pc, #876]	@ (800a62c <Feature_Extraction_State_Machine_Translation+0x39c>)
 800a2be:	66bb      	str	r3, [r7, #104]	@ 0x68
	/*
	 * Set velocity difference threshold value (in millimeters/sec) for recognition of motion state
	 * termination by detection of no change between successive velocity samples.
	 */

	velocity_diff_threshold = 0.01;
 800a2c0:	4bdb      	ldr	r3, [pc, #876]	@ (800a630 <Feature_Extraction_State_Machine_Translation+0x3a0>)
 800a2c2:	667b      	str	r3, [r7, #100]	@ 0x64

	/*
	 * Compute high pass filter coefficients
	 */

	W_HP = 2 * 3.1416 * HIGH_PASS_FILTER_FREQUENCY_DISP;
 800a2c4:	4bdb      	ldr	r3, [pc, #876]	@ (800a634 <Feature_Extraction_State_Machine_Translation+0x3a4>)
 800a2c6:	663b      	str	r3, [r7, #96]	@ 0x60
	I_HP = 2/(W_HP * sample_period);
 800a2c8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800a2cc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800a2d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2d4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a2d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2dc:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	if (HP_FILTER_ENABLE_DISP == 1){
		iir_HP_0 = 1 - (1/(1 + I_HP));
 800a2e0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800a2e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2fc:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		iir_HP_1 = -iir_HP_0;
 800a300:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800a304:	eef1 7a67 	vneg.f32	s15, s15
 800a308:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		iir_HP_2 = (1/(1 + I_HP))*(1 - I_HP);
 800a30c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800a310:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a314:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a318:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a31c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a320:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a324:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800a328:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a32c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a330:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

	/*
	 * Compute low pass filter coefficients
	 */

	W_LP = 2 * 3.1416 * LOW_PASS_FILTER_FREQUENCY_DISP;
 800a334:	4bc0      	ldr	r3, [pc, #768]	@ (800a638 <Feature_Extraction_State_Machine_Translation+0x3a8>)
 800a336:	64fb      	str	r3, [r7, #76]	@ 0x4c
	I_LP = 2/(W_LP * sample_period);
 800a338:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a33c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800a340:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a344:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a34c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	if (LP_FILTER_ENABLE_DISP == 1){
		iir_LP_0 = 1/(1 + I_LP);
 800a350:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800a354:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a35c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a364:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		iir_LP_1 = iir_LP_0;
 800a368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a36a:	643b      	str	r3, [r7, #64]	@ 0x40
		iir_LP_2 = (1/(1 + I_LP))*(1 - I_LP);
 800a36c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800a370:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a374:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a378:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a37c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a380:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a384:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800a388:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a38c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a390:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		iir_LP_0 = 1;
		iir_LP_1 = 0;
		iir_LP_2 = 0;
	}

	printf("Start Motion Segment with Green LED Blink\n");
 800a394:	48a9      	ldr	r0, [pc, #676]	@ (800a63c <Feature_Extraction_State_Machine_Translation+0x3ac>)
 800a396:	f003 fe2f 	bl	800dff8 <puts>

	//HAL_Delay(2000);

	BSP_LED_Off(LED6);
 800a39a:	2000      	movs	r0, #0
 800a39c:	f7f6 fe54 	bl	8001048 <BSP_LED_Off>
	LED_Notification_Blink_Green(5);
 800a3a0:	2005      	movs	r0, #5
 800a3a2:	f001 faca 	bl	800b93a <LED_Notification_Blink_Green>
	BSP_LED_On(LED7);
 800a3a6:	2001      	movs	r0, #1
 800a3a8:	f7f6 fe30 	bl	800100c <BSP_LED_On>

	motion_state = 0;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	677b      	str	r3, [r7, #116]	@ 0x74
	acc_x = 0;
 800a3b0:	f04f 0300 	mov.w	r3, #0
 800a3b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	acc_y = 0;
 800a3b6:	f04f 0300 	mov.w	r3, #0
 800a3ba:	637b      	str	r3, [r7, #52]	@ 0x34
	acc_x_prev = 0;
 800a3bc:	f04f 0300 	mov.w	r3, #0
 800a3c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	acc_y_prev = 0;
 800a3c4:	f04f 0300 	mov.w	r3, #0
 800a3c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	acc_x_filter_lp_prev = 0;
 800a3cc:	f04f 0300 	mov.w	r3, #0
 800a3d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	acc_y_filter_lp_prev = 0;
 800a3d4:	f04f 0300 	mov.w	r3, #0
 800a3d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	acc_x_filter_hp_prev = 0;
 800a3dc:	f04f 0300 	mov.w	r3, #0
 800a3e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	acc_y_filter_hp_prev = 0;
 800a3e4:	f04f 0300 	mov.w	r3, #0
 800a3e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	vel_x = 0;
 800a3ec:	f04f 0300 	mov.w	r3, #0
 800a3f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	vel_x_prev = 0;
 800a3f4:	f04f 0300 	mov.w	r3, #0
 800a3f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	vel_y = 0;
 800a3fc:	f04f 0300 	mov.w	r3, #0
 800a400:	67fb      	str	r3, [r7, #124]	@ 0x7c
	vel_y_prev = 0;
 800a402:	f04f 0300 	mov.w	r3, #0
 800a406:	67bb      	str	r3, [r7, #120]	@ 0x78
		 * Introduce delay establishing integration interval
		 * This is summed with sensor data access delay to
		 * yield loop delay of 4 msec
		 */

		HAL_Delay(2);
 800a408:	2002      	movs	r0, #2
 800a40a:	f7fa fc13 	bl	8004c34 <HAL_Delay>

		result = 0;
 800a40e:	2300      	movs	r3, #0
 800a410:	673b      	str	r3, [r7, #112]	@ 0x70
		if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_ACCELERO, &axes) != BSP_ERROR_NONE) result--;
 800a412:	f107 0310 	add.w	r3, r7, #16
 800a416:	461a      	mov	r2, r3
 800a418:	2102      	movs	r1, #2
 800a41a:	2000      	movs	r0, #0
 800a41c:	f7f7 fc98 	bl	8001d50 <BSP_MOTION_SENSOR_GetAxes>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d002      	beq.n	800a42c <Feature_Extraction_State_Machine_Translation+0x19c>
 800a426:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a428:	3b01      	subs	r3, #1
 800a42a:	673b      	str	r3, [r7, #112]	@ 0x70
		if (result < 0){
 800a42c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a42e:	2b00      	cmp	r3, #0
 800a430:	da03      	bge.n	800a43a <Feature_Extraction_State_Machine_Translation+0x1aa>
			printf("Sampling Error %i\n", result);
 800a432:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800a434:	4882      	ldr	r0, [pc, #520]	@ (800a640 <Feature_Extraction_State_Machine_Translation+0x3b0>)
 800a436:	f003 fd6f 	bl	800df18 <iprintf>



		/* Setting for integration interval */

		integration_interval = INTEGRATION_INTERVAL_DISP;
 800a43a:	4b7b      	ldr	r3, [pc, #492]	@ (800a628 <Feature_Extraction_State_Machine_Translation+0x398>)
 800a43c:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Convert acceleration to millimeter/sec/sec units sing 1 milli-g = (9.81 m/s/s)/1000 */

		acc_x = 9.81*(float)(axes.xval);
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	ee07 3a90 	vmov	s15, r3
 800a444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a448:	ee17 0a90 	vmov	r0, s15
 800a44c:	f7f6 f880 	bl	8000550 <__aeabi_f2d>
 800a450:	a373      	add	r3, pc, #460	@ (adr r3, 800a620 <Feature_Extraction_State_Machine_Translation+0x390>)
 800a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a456:	f7f6 f8d3 	bl	8000600 <__aeabi_dmul>
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	4610      	mov	r0, r2
 800a460:	4619      	mov	r1, r3
 800a462:	f7f6 fba5 	bl	8000bb0 <__aeabi_d2f>
 800a466:	4603      	mov	r3, r0
 800a468:	63bb      	str	r3, [r7, #56]	@ 0x38
		acc_y = 9.81*(float)(axes.yval);
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	ee07 3a90 	vmov	s15, r3
 800a470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a474:	ee17 0a90 	vmov	r0, s15
 800a478:	f7f6 f86a 	bl	8000550 <__aeabi_f2d>
 800a47c:	a368      	add	r3, pc, #416	@ (adr r3, 800a620 <Feature_Extraction_State_Machine_Translation+0x390>)
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	f7f6 f8bd 	bl	8000600 <__aeabi_dmul>
 800a486:	4602      	mov	r2, r0
 800a488:	460b      	mov	r3, r1
 800a48a:	4610      	mov	r0, r2
 800a48c:	4619      	mov	r1, r3
 800a48e:	f7f6 fb8f 	bl	8000bb0 <__aeabi_d2f>
 800a492:	4603      	mov	r3, r0
 800a494:	637b      	str	r3, [r7, #52]	@ 0x34


		/* Apply Low Pass filter to acceleration */
		acc_x_filter_lp  = iir_LP_0 * acc_x + iir_LP_1 * acc_x_prev - iir_LP_2 * acc_x_filter_lp_prev;
 800a496:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800a49a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800a49e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4a2:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800a4a6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800a4aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4b2:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800a4b6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800a4ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4c2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		acc_y_filter_lp  = iir_LP_0 * acc_y + iir_LP_1 * acc_y_prev - iir_LP_2 * acc_y_filter_lp_prev;
 800a4c6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800a4ca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a4ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4d2:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800a4d6:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800a4da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4de:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4e2:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800a4e6:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800a4ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4f2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		/* Apply High Pass filter to signal of Low Pass filter to acceleration */
		acc_x_filter_hp = iir_HP_0 * acc_x_filter_lp  + iir_HP_1 * acc_x_filter_lp_prev - iir_HP_2 * acc_x_filter_hp_prev;
 800a4f6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800a4fa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a4fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a502:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800a506:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800a50a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a50e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a512:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800a516:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800a51a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a51e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a522:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		acc_y_filter_hp = iir_HP_0 * acc_y_filter_lp  + iir_HP_1 * acc_y_filter_lp_prev - iir_HP_2 * acc_y_filter_hp_prev;
 800a526:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800a52a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800a52e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a532:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800a536:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800a53a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a53e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a542:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800a546:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800a54a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a54e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a552:	edc7 7a08 	vstr	s15, [r7, #32]

		acc_x_prev = acc_x;
 800a556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a558:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		acc_y_prev = acc_y;
 800a55c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a55e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

		/*
		 * Compute velocity by integration
		 */

		vel_x = vel_x + (acc_x_filter_hp + acc_x_filter_hp_prev) * integration_interval/2;
 800a562:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800a566:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800a56a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a56e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a572:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a576:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a57a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a57e:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 800a582:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a586:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
		vel_y = vel_y + (acc_y_filter_hp + acc_y_filter_hp_prev) * integration_interval/2;
 800a58a:	ed97 7a08 	vldr	s14, [r7, #32]
 800a58e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800a592:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a596:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a59a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a59e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a5a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5a6:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800a5aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5ae:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

		acc_x_filter_lp_prev = acc_x_filter_lp;
 800a5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		acc_y_filter_lp_prev = acc_y_filter_lp;
 800a5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

		acc_x_filter_hp_prev = acc_x_filter_hp;
 800a5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		acc_y_filter_hp_prev = acc_y_filter_hp;
 800a5c4:	6a3b      	ldr	r3, [r7, #32]
 800a5c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

		/*
		 * Detect motion and assign velocities to features
		 */

		vel_mag = sqrt((vel_x)*(vel_x) + (vel_y)*(vel_y));
 800a5ca:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800a5ce:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a5d2:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800a5d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a5da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5de:	ee17 0a90 	vmov	r0, s15
 800a5e2:	f7f5 ffb5 	bl	8000550 <__aeabi_f2d>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	ec43 2b10 	vmov	d0, r2, r3
 800a5ee:	f005 fffb 	bl	80105e8 <sqrt>
 800a5f2:	ec53 2b10 	vmov	r2, r3, d0
 800a5f6:	4610      	mov	r0, r2
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	f7f6 fad9 	bl	8000bb0 <__aeabi_d2f>
 800a5fe:	4603      	mov	r3, r0
 800a600:	61fb      	str	r3, [r7, #28]

		if (motion_state == 0 && vel_mag > velocity_mag_threshold){
 800a602:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a604:	2b00      	cmp	r3, #0
 800a606:	d12c      	bne.n	800a662 <Feature_Extraction_State_Machine_Translation+0x3d2>
 800a608:	ed97 7a07 	vldr	s14, [r7, #28]
 800a60c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800a610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a618:	dd23      	ble.n	800a662 <Feature_Extraction_State_Machine_Translation+0x3d2>
 800a61a:	e013      	b.n	800a644 <Feature_Extraction_State_Machine_Translation+0x3b4>
 800a61c:	f3af 8000 	nop.w
 800a620:	51eb851f 	.word	0x51eb851f
 800a624:	40239eb8 	.word	0x40239eb8
 800a628:	3b83126f 	.word	0x3b83126f
 800a62c:	42200000 	.word	0x42200000
 800a630:	3c23d70a 	.word	0x3c23d70a
 800a634:	41490ff9 	.word	0x41490ff9
 800a638:	41fb53f8 	.word	0x41fb53f8
 800a63c:	08011438 	.word	0x08011438
 800a640:	08011464 	.word	0x08011464
			motion_state = 1;
 800a644:	2301      	movs	r3, #1
 800a646:	677b      	str	r3, [r7, #116]	@ 0x74
			BSP_LED_Off(LED7);
 800a648:	2001      	movs	r0, #1
 800a64a:	f7f6 fcfd 	bl	8001048 <BSP_LED_Off>
			*feature_1 = vel_x;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a654:	601a      	str	r2, [r3, #0]
			*feature_2 = vel_y;
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a65a:	601a      	str	r2, [r3, #0]

			*sig_mag_scale = vel_mag;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	69fa      	ldr	r2, [r7, #28]
 800a660:	601a      	str	r2, [r3, #0]

		/*
		 * Detect termination of motion
		 */

		if (motion_state == 1 && abs(vel_x_prev - vel_x) < velocity_diff_threshold &&
 800a662:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a664:	2b01      	cmp	r3, #1
 800a666:	d136      	bne.n	800a6d6 <Feature_Extraction_State_Machine_Translation+0x446>
 800a668:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800a66c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800a670:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a678:	ee17 3a90 	vmov	r3, s15
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	bfb8      	it	lt
 800a680:	425b      	neglt	r3, r3
 800a682:	ee07 3a90 	vmov	s15, r3
 800a686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a68a:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800a68e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a696:	dd1e      	ble.n	800a6d6 <Feature_Extraction_State_Machine_Translation+0x446>
				abs(vel_y_prev - vel_y) < velocity_diff_threshold){
 800a698:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800a69c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800a6a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a6a8:	ee17 3a90 	vmov	r3, s15
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	bfb8      	it	lt
 800a6b0:	425b      	neglt	r3, r3
 800a6b2:	ee07 3a90 	vmov	s15, r3
 800a6b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if (motion_state == 1 && abs(vel_x_prev - vel_x) < velocity_diff_threshold &&
 800a6ba:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800a6be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c6:	dd06      	ble.n	800a6d6 <Feature_Extraction_State_Machine_Translation+0x446>

			BSP_LED_Off(LED7);
 800a6c8:	2001      	movs	r0, #1
 800a6ca:	f7f6 fcbd 	bl	8001048 <BSP_LED_Off>
			LED_Notification_Blink_Red(5);
 800a6ce:	2005      	movs	r0, #5
 800a6d0:	f001 f952 	bl	800b978 <LED_Notification_Blink_Red>
			break;
 800a6d4:	e006      	b.n	800a6e4 <Feature_Extraction_State_Machine_Translation+0x454>
		}

		vel_x_prev = vel_x;
 800a6d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a6da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		vel_y_prev = vel_y;
 800a6de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a6e0:	67bb      	str	r3, [r7, #120]	@ 0x78
		HAL_Delay(2);
 800a6e2:	e691      	b.n	800a408 <Feature_Extraction_State_Machine_Translation+0x178>
	}
	return;
 800a6e4:	bf00      	nop
}
 800a6e6:	37a0      	adds	r7, #160	@ 0xa0
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <TrainOrientation_SM_Translation>:

void TrainOrientation_SM_Translation(ANN *net) {
 800a6ec:	b590      	push	{r4, r7, lr}
 800a6ee:	f6ad 3d4c 	subw	sp, sp, #2892	@ 0xb4c
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800a6f8:	f6a3 3344 	subw	r3, r3, #2884	@ 0xb44
 800a6fc:	6018      	str	r0, [r3, #0]
	int i, j, k, m, n, r, error, net_error;
	float feature_1, feature_2, sig_mag_scale;

	float Z_Threshold;

	Z_Threshold = 1.2;
 800a6fe:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800a702:	f5a3 632b 	sub.w	r3, r3, #2736	@ 0xab0
 800a706:	4a98      	ldr	r2, [pc, #608]	@ (800a968 <TrainOrientation_SM_Translation+0x27c>)
 800a708:	601a      	str	r2, [r3, #0]

	printf("\n\n\nTraining Start in 2 seconds ..");
 800a70a:	4898      	ldr	r0, [pc, #608]	@ (800a96c <TrainOrientation_SM_Translation+0x280>)
 800a70c:	f003 fc04 	bl	800df18 <iprintf>
	BSP_LED_Off(LED6);
 800a710:	2000      	movs	r0, #0
 800a712:	f7f6 fc99 	bl	8001048 <BSP_LED_Off>
	BSP_LED_Off(LED7);
 800a716:	2001      	movs	r0, #1
 800a718:	f7f6 fc96 	bl	8001048 <BSP_LED_Off>
	HAL_Delay(2000);
 800a71c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800a720:	f7fa fa88 	bl	8004c34 <HAL_Delay>

	/*
	 * Maximum of 8 cycles
	 */
	num_train_data_cycles = 1;
 800a724:	2301      	movs	r3, #1
 800a726:	f8c7 3b28 	str.w	r3, [r7, #2856]	@ 0xb28

	for (k = 0; k < num_train_data_cycles; k++) {
 800a72a:	2300      	movs	r3, #0
 800a72c:	f8c7 3b3c 	str.w	r3, [r7, #2876]	@ 0xb3c
 800a730:	e15e      	b.n	800a9f0 <TrainOrientation_SM_Translation+0x304>
		for (i = 0; i < 6; i++) {
 800a732:	2300      	movs	r3, #0
 800a734:	f8c7 3b44 	str.w	r3, [r7, #2884]	@ 0xb44
 800a738:	e150      	b.n	800a9dc <TrainOrientation_SM_Translation+0x2f0>

			LED_Notification_Blink_Red(3);
 800a73a:	2003      	movs	r0, #3
 800a73c:	f001 f91c 	bl	800b978 <LED_Notification_Blink_Red>
			LED_Notification_Blink_Green(3);
 800a740:	2003      	movs	r0, #3
 800a742:	f001 f8fa 	bl	800b93a <LED_Notification_Blink_Green>
			LED_Notification_Blink_Red(3);
 800a746:	2003      	movs	r0, #3
 800a748:	f001 f916 	bl	800b978 <LED_Notification_Blink_Red>
			BSP_LED_On(LED6);
 800a74c:	2000      	movs	r0, #0
 800a74e:	f7f6 fc5d 	bl	800100c <BSP_LED_On>

			switch (i) {
 800a752:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	@ 0xb44
 800a756:	2b05      	cmp	r3, #5
 800a758:	d826      	bhi.n	800a7a8 <TrainOrientation_SM_Translation+0xbc>
 800a75a:	a201      	add	r2, pc, #4	@ (adr r2, 800a760 <TrainOrientation_SM_Translation+0x74>)
 800a75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a760:	0800a779 	.word	0x0800a779
 800a764:	0800a781 	.word	0x0800a781
 800a768:	0800a789 	.word	0x0800a789
 800a76c:	0800a791 	.word	0x0800a791
 800a770:	0800a799 	.word	0x0800a799
 800a774:	0800a7a1 	.word	0x0800a7a1

			case 0:
				printf("\nTrain Start Game Orientation\n");
 800a778:	487d      	ldr	r0, [pc, #500]	@ (800a970 <TrainOrientation_SM_Translation+0x284>)
 800a77a:	f003 fc3d 	bl	800dff8 <puts>
				break;
 800a77e:	e013      	b.n	800a7a8 <TrainOrientation_SM_Translation+0xbc>

			case 1:
				printf("\n\nTrain Pause Game Orientation\n");
 800a780:	487c      	ldr	r0, [pc, #496]	@ (800a974 <TrainOrientation_SM_Translation+0x288>)
 800a782:	f003 fc39 	bl	800dff8 <puts>
				break;
 800a786:	e00f      	b.n	800a7a8 <TrainOrientation_SM_Translation+0xbc>

			case 2:
				printf("\n\nTrain Stop Game Orientation\n");
 800a788:	487b      	ldr	r0, [pc, #492]	@ (800a978 <TrainOrientation_SM_Translation+0x28c>)
 800a78a:	f003 fc35 	bl	800dff8 <puts>
				break;
 800a78e:	e00b      	b.n	800a7a8 <TrainOrientation_SM_Translation+0xbc>

			case 3:
				printf("\n\nTrain  Square Orientation\n");
 800a790:	487a      	ldr	r0, [pc, #488]	@ (800a97c <TrainOrientation_SM_Translation+0x290>)
 800a792:	f003 fc31 	bl	800dff8 <puts>
				break;
 800a796:	e007      	b.n	800a7a8 <TrainOrientation_SM_Translation+0xbc>

			case 4:
				printf("\n\nTrain Triangle Orientation\n");
 800a798:	4879      	ldr	r0, [pc, #484]	@ (800a980 <TrainOrientation_SM_Translation+0x294>)
 800a79a:	f003 fc2d 	bl	800dff8 <puts>
				break;
 800a79e:	e003      	b.n	800a7a8 <TrainOrientation_SM_Translation+0xbc>

			case 5:
				printf("\n\nTrain Line Orientation\n");
 800a7a0:	4878      	ldr	r0, [pc, #480]	@ (800a984 <TrainOrientation_SM_Translation+0x298>)
 800a7a2:	f003 fc29 	bl	800dff8 <puts>
				break;
 800a7a6:	bf00      	nop
			}


			/* Motions include 5 segments and 10 associated features */

			n = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f8c7 3b34 	str.w	r3, [r7, #2868]	@ 0xb34
			while (n < NUM_FEATURES){
 800a7ae:	e050      	b.n	800a852 <TrainOrientation_SM_Translation+0x166>
				Feature_Extraction_State_Machine_Translation(&feature_1, &feature_2, &sig_mag_scale);
 800a7b0:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800a7b4:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800a7b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7ff fd67 	bl	800a290 <Feature_Extraction_State_Machine_Translation>
				feature_array[n] = feature_1;
 800a7c2:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800a7c6:	f6a3 23a4 	subw	r3, r3, #2724	@ 0xaa4
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800a7d0:	f6a3 219c 	subw	r1, r3, #2716	@ 0xa9c
 800a7d4:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	440b      	add	r3, r1
 800a7dc:	601a      	str	r2, [r3, #0]
				n = n + 1;
 800a7de:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	f8c7 3b34 	str.w	r3, [r7, #2868]	@ 0xb34
				printf("Features %0.1f\t: ", feature_array[n]);
 800a7e8:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800a7ec:	f6a3 229c 	subw	r2, r3, #2716	@ 0xa9c
 800a7f0:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7f5 fea8 	bl	8000550 <__aeabi_f2d>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	4860      	ldr	r0, [pc, #384]	@ (800a988 <TrainOrientation_SM_Translation+0x29c>)
 800a806:	f003 fb87 	bl	800df18 <iprintf>
				feature_array[n] = feature_2;
 800a80a:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800a80e:	f6a3 23a8 	subw	r3, r3, #2728	@ 0xaa8
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800a818:	f6a3 219c 	subw	r1, r3, #2716	@ 0xa9c
 800a81c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	440b      	add	r3, r1
 800a824:	601a      	str	r2, [r3, #0]
				printf("Features %0.1f\t: ", feature_array[n]);
 800a826:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800a82a:	f6a3 229c 	subw	r2, r3, #2716	@ 0xa9c
 800a82e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4618      	mov	r0, r3
 800a83a:	f7f5 fe89 	bl	8000550 <__aeabi_f2d>
 800a83e:	4602      	mov	r2, r0
 800a840:	460b      	mov	r3, r1
 800a842:	4851      	ldr	r0, [pc, #324]	@ (800a988 <TrainOrientation_SM_Translation+0x29c>)
 800a844:	f003 fb68 	bl	800df18 <iprintf>
				n = n + 1;
 800a848:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800a84c:	3301      	adds	r3, #1
 800a84e:	f8c7 3b34 	str.w	r3, [r7, #2868]	@ 0xb34
			while (n < NUM_FEATURES){
 800a852:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800a856:	2b09      	cmp	r3, #9
 800a858:	ddaa      	ble.n	800a7b0 <TrainOrientation_SM_Translation+0xc4>
			}

			printf("\n");
 800a85a:	200a      	movs	r0, #10
 800a85c:	f003 fb6e 	bl	800df3c <putchar>


			for (n = 0; n < NUM_FEATURES; n++){
 800a860:	2300      	movs	r3, #0
 800a862:	f8c7 3b34 	str.w	r3, [r7, #2868]	@ 0xb34
 800a866:	e016      	b.n	800a896 <TrainOrientation_SM_Translation+0x1aa>
				sig_xyz[n] = feature_array[n];
 800a868:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800a86c:	f6a3 229c 	subw	r2, r3, #2716	@ 0xa9c
 800a870:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4413      	add	r3, r2
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800a87e:	f6a3 214c 	subw	r1, r3, #2636	@ 0xa4c
 800a882:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	440b      	add	r3, r1
 800a88a:	601a      	str	r2, [r3, #0]
			for (n = 0; n < NUM_FEATURES; n++){
 800a88c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800a890:	3301      	adds	r3, #1
 800a892:	f8c7 3b34 	str.w	r3, [r7, #2868]	@ 0xb34
 800a896:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800a89a:	2b09      	cmp	r3, #9
 800a89c:	dde4      	ble.n	800a868 <TrainOrientation_SM_Translation+0x17c>
			}


			motion_softmax(net->topology[0], sig_xyz, sig_xyz_norm);
 800a89e:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800a8a2:	f6a3 3344 	subw	r3, r3, #2884	@ 0xb44
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 800a8b2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	f000 ffe8 	bl	800b88c <motion_softmax>

			for (n = 0; n < NUM_FEATURES; n++){
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f8c7 3b34 	str.w	r3, [r7, #2868]	@ 0xb34
 800a8c2:	e025      	b.n	800a910 <TrainOrientation_SM_Translation+0x224>
				training_dataset[i][k][n] = sig_xyz_norm[n];
 800a8c4:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800a8c8:	f6a3 2274 	subw	r2, r3, #2676	@ 0xa74
 800a8cc:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	4413      	add	r3, r2
 800a8d4:	6818      	ldr	r0, [r3, #0]
 800a8d6:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800a8da:	f6a3 2424 	subw	r4, r3, #2596	@ 0xa24
 800a8de:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 800a8e2:	f8d7 1b44 	ldr.w	r1, [r7, #2884]	@ 0xb44
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	0092      	lsls	r2, r2, #2
 800a8ea:	441a      	add	r2, r3
 800a8ec:	0053      	lsls	r3, r2, #1
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	440b      	add	r3, r1
 800a8f6:	011b      	lsls	r3, r3, #4
 800a8f8:	441a      	add	r2, r3
 800a8fa:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800a8fe:	4413      	add	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	4423      	add	r3, r4
 800a904:	6018      	str	r0, [r3, #0]
			for (n = 0; n < NUM_FEATURES; n++){
 800a906:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800a90a:	3301      	adds	r3, #1
 800a90c:	f8c7 3b34 	str.w	r3, [r7, #2868]	@ 0xb34
 800a910:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800a914:	2b09      	cmp	r3, #9
 800a916:	ddd5      	ble.n	800a8c4 <TrainOrientation_SM_Translation+0x1d8>
			}

			printf("\n Softmax Input \t");
 800a918:	481c      	ldr	r0, [pc, #112]	@ (800a98c <TrainOrientation_SM_Translation+0x2a0>)
 800a91a:	f003 fafd 	bl	800df18 <iprintf>

			for (r = 0; r < NUM_FEATURES; r++) {
 800a91e:	2300      	movs	r3, #0
 800a920:	f8c7 3b30 	str.w	r3, [r7, #2864]	@ 0xb30
 800a924:	e015      	b.n	800a952 <TrainOrientation_SM_Translation+0x266>
				printf("\t%0.1f", sig_xyz[r]);
 800a926:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800a92a:	f6a3 224c 	subw	r2, r3, #2636	@ 0xa4c
 800a92e:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4618      	mov	r0, r3
 800a93a:	f7f5 fe09 	bl	8000550 <__aeabi_f2d>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	4813      	ldr	r0, [pc, #76]	@ (800a990 <TrainOrientation_SM_Translation+0x2a4>)
 800a944:	f003 fae8 	bl	800df18 <iprintf>
			for (r = 0; r < NUM_FEATURES; r++) {
 800a948:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 800a94c:	3301      	adds	r3, #1
 800a94e:	f8c7 3b30 	str.w	r3, [r7, #2864]	@ 0xb30
 800a952:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 800a956:	2b09      	cmp	r3, #9
 800a958:	dde5      	ble.n	800a926 <TrainOrientation_SM_Translation+0x23a>
			}
			printf("\n Softmax Output\t");
 800a95a:	480e      	ldr	r0, [pc, #56]	@ (800a994 <TrainOrientation_SM_Translation+0x2a8>)
 800a95c:	f003 fadc 	bl	800df18 <iprintf>

			for (r = 0; r < NUM_FEATURES; r++) {
 800a960:	2300      	movs	r3, #0
 800a962:	f8c7 3b30 	str.w	r3, [r7, #2864]	@ 0xb30
 800a966:	e02d      	b.n	800a9c4 <TrainOrientation_SM_Translation+0x2d8>
 800a968:	3f99999a 	.word	0x3f99999a
 800a96c:	08011478 	.word	0x08011478
 800a970:	0801149c 	.word	0x0801149c
 800a974:	080114bc 	.word	0x080114bc
 800a978:	080114dc 	.word	0x080114dc
 800a97c:	080114fc 	.word	0x080114fc
 800a980:	08011518 	.word	0x08011518
 800a984:	08011538 	.word	0x08011538
 800a988:	08011554 	.word	0x08011554
 800a98c:	08011568 	.word	0x08011568
 800a990:	0801157c 	.word	0x0801157c
 800a994:	08011584 	.word	0x08011584
				printf("\t%0.1f", sig_xyz_norm[r]);
 800a998:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800a99c:	f6a3 2274 	subw	r2, r3, #2676	@ 0xa74
 800a9a0:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4413      	add	r3, r2
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7f5 fdd0 	bl	8000550 <__aeabi_f2d>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	48b1      	ldr	r0, [pc, #708]	@ (800ac7c <TrainOrientation_SM_Translation+0x590>)
 800a9b6:	f003 faaf 	bl	800df18 <iprintf>
			for (r = 0; r < NUM_FEATURES; r++) {
 800a9ba:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 800a9be:	3301      	adds	r3, #1
 800a9c0:	f8c7 3b30 	str.w	r3, [r7, #2864]	@ 0xb30
 800a9c4:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 800a9c8:	2b09      	cmp	r3, #9
 800a9ca:	dde5      	ble.n	800a998 <TrainOrientation_SM_Translation+0x2ac>

			}
			printf("\n\n");
 800a9cc:	48ac      	ldr	r0, [pc, #688]	@ (800ac80 <TrainOrientation_SM_Translation+0x594>)
 800a9ce:	f003 fb13 	bl	800dff8 <puts>
		for (i = 0; i < 6; i++) {
 800a9d2:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	@ 0xb44
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	f8c7 3b44 	str.w	r3, [r7, #2884]	@ 0xb44
 800a9dc:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	@ 0xb44
 800a9e0:	2b05      	cmp	r3, #5
 800a9e2:	f77f aeaa 	ble.w	800a73a <TrainOrientation_SM_Translation+0x4e>
	for (k = 0; k < num_train_data_cycles; k++) {
 800a9e6:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	f8c7 3b3c 	str.w	r3, [r7, #2876]	@ 0xb3c
 800a9f0:	f8d7 2b3c 	ldr.w	r2, [r7, #2876]	@ 0xb3c
 800a9f4:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	@ 0xb28
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	f6ff ae9a 	blt.w	800a732 <TrainOrientation_SM_Translation+0x46>

	/*
	 * Enter NN training
	 */

	float Motion_1[6] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
 800a9fe:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aa02:	f6a3 23c8 	subw	r3, r3, #2760	@ 0xac8
 800aa06:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aa10:	f6a3 23c8 	subw	r3, r3, #2760	@ 0xac8
 800aa14:	f04f 0200 	mov.w	r2, #0
 800aa18:	605a      	str	r2, [r3, #4]
 800aa1a:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aa1e:	f6a3 23c8 	subw	r3, r3, #2760	@ 0xac8
 800aa22:	f04f 0200 	mov.w	r2, #0
 800aa26:	609a      	str	r2, [r3, #8]
 800aa28:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aa2c:	f6a3 23c8 	subw	r3, r3, #2760	@ 0xac8
 800aa30:	f04f 0200 	mov.w	r2, #0
 800aa34:	60da      	str	r2, [r3, #12]
 800aa36:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aa3a:	f6a3 23c8 	subw	r3, r3, #2760	@ 0xac8
 800aa3e:	f04f 0200 	mov.w	r2, #0
 800aa42:	611a      	str	r2, [r3, #16]
 800aa44:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aa48:	f6a3 23c8 	subw	r3, r3, #2760	@ 0xac8
 800aa4c:	f04f 0200 	mov.w	r2, #0
 800aa50:	615a      	str	r2, [r3, #20]
	float Motion_2[6] = { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 };
 800aa52:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aa56:	f5a3 632e 	sub.w	r3, r3, #2784	@ 0xae0
 800aa5a:	f04f 0200 	mov.w	r2, #0
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aa64:	f5a3 632e 	sub.w	r3, r3, #2784	@ 0xae0
 800aa68:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800aa6c:	605a      	str	r2, [r3, #4]
 800aa6e:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aa72:	f5a3 632e 	sub.w	r3, r3, #2784	@ 0xae0
 800aa76:	f04f 0200 	mov.w	r2, #0
 800aa7a:	609a      	str	r2, [r3, #8]
 800aa7c:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aa80:	f5a3 632e 	sub.w	r3, r3, #2784	@ 0xae0
 800aa84:	f04f 0200 	mov.w	r2, #0
 800aa88:	60da      	str	r2, [r3, #12]
 800aa8a:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aa8e:	f5a3 632e 	sub.w	r3, r3, #2784	@ 0xae0
 800aa92:	f04f 0200 	mov.w	r2, #0
 800aa96:	611a      	str	r2, [r3, #16]
 800aa98:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aa9c:	f5a3 632e 	sub.w	r3, r3, #2784	@ 0xae0
 800aaa0:	f04f 0200 	mov.w	r2, #0
 800aaa4:	615a      	str	r2, [r3, #20]
	float Motion_3[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 };
 800aaa6:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aaaa:	f6a3 23f8 	subw	r3, r3, #2808	@ 0xaf8
 800aaae:	f04f 0200 	mov.w	r2, #0
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aab8:	f6a3 23f8 	subw	r3, r3, #2808	@ 0xaf8
 800aabc:	f04f 0200 	mov.w	r2, #0
 800aac0:	605a      	str	r2, [r3, #4]
 800aac2:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aac6:	f6a3 23f8 	subw	r3, r3, #2808	@ 0xaf8
 800aaca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800aace:	609a      	str	r2, [r3, #8]
 800aad0:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aad4:	f6a3 23f8 	subw	r3, r3, #2808	@ 0xaf8
 800aad8:	f04f 0200 	mov.w	r2, #0
 800aadc:	60da      	str	r2, [r3, #12]
 800aade:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aae2:	f6a3 23f8 	subw	r3, r3, #2808	@ 0xaf8
 800aae6:	f04f 0200 	mov.w	r2, #0
 800aaea:	611a      	str	r2, [r3, #16]
 800aaec:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aaf0:	f6a3 23f8 	subw	r3, r3, #2808	@ 0xaf8
 800aaf4:	f04f 0200 	mov.w	r2, #0
 800aaf8:	615a      	str	r2, [r3, #20]
	float Motion_4[6] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 };
 800aafa:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aafe:	f5a3 6331 	sub.w	r3, r3, #2832	@ 0xb10
 800ab02:	f04f 0200 	mov.w	r2, #0
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ab0c:	f5a3 6331 	sub.w	r3, r3, #2832	@ 0xb10
 800ab10:	f04f 0200 	mov.w	r2, #0
 800ab14:	605a      	str	r2, [r3, #4]
 800ab16:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ab1a:	f5a3 6331 	sub.w	r3, r3, #2832	@ 0xb10
 800ab1e:	f04f 0200 	mov.w	r2, #0
 800ab22:	609a      	str	r2, [r3, #8]
 800ab24:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ab28:	f5a3 6331 	sub.w	r3, r3, #2832	@ 0xb10
 800ab2c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ab30:	60da      	str	r2, [r3, #12]
 800ab32:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ab36:	f5a3 6331 	sub.w	r3, r3, #2832	@ 0xb10
 800ab3a:	f04f 0200 	mov.w	r2, #0
 800ab3e:	611a      	str	r2, [r3, #16]
 800ab40:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ab44:	f5a3 6331 	sub.w	r3, r3, #2832	@ 0xb10
 800ab48:	f04f 0200 	mov.w	r2, #0
 800ab4c:	615a      	str	r2, [r3, #20]
	float Motion_5[6] = { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 };
 800ab4e:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ab52:	f6a3 3328 	subw	r3, r3, #2856	@ 0xb28
 800ab56:	f04f 0200 	mov.w	r2, #0
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ab60:	f6a3 3328 	subw	r3, r3, #2856	@ 0xb28
 800ab64:	f04f 0200 	mov.w	r2, #0
 800ab68:	605a      	str	r2, [r3, #4]
 800ab6a:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ab6e:	f6a3 3328 	subw	r3, r3, #2856	@ 0xb28
 800ab72:	f04f 0200 	mov.w	r2, #0
 800ab76:	609a      	str	r2, [r3, #8]
 800ab78:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ab7c:	f6a3 3328 	subw	r3, r3, #2856	@ 0xb28
 800ab80:	f04f 0200 	mov.w	r2, #0
 800ab84:	60da      	str	r2, [r3, #12]
 800ab86:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ab8a:	f6a3 3328 	subw	r3, r3, #2856	@ 0xb28
 800ab8e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ab92:	611a      	str	r2, [r3, #16]
 800ab94:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ab98:	f6a3 3328 	subw	r3, r3, #2856	@ 0xb28
 800ab9c:	f04f 0200 	mov.w	r2, #0
 800aba0:	615a      	str	r2, [r3, #20]
	float Motion_6[6] = { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };
 800aba2:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800aba6:	f5a3 6334 	sub.w	r3, r3, #2880	@ 0xb40
 800abaa:	f04f 0200 	mov.w	r2, #0
 800abae:	601a      	str	r2, [r3, #0]
 800abb0:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800abb4:	f5a3 6334 	sub.w	r3, r3, #2880	@ 0xb40
 800abb8:	f04f 0200 	mov.w	r2, #0
 800abbc:	605a      	str	r2, [r3, #4]
 800abbe:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800abc2:	f5a3 6334 	sub.w	r3, r3, #2880	@ 0xb40
 800abc6:	f04f 0200 	mov.w	r2, #0
 800abca:	609a      	str	r2, [r3, #8]
 800abcc:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800abd0:	f5a3 6334 	sub.w	r3, r3, #2880	@ 0xb40
 800abd4:	f04f 0200 	mov.w	r2, #0
 800abd8:	60da      	str	r2, [r3, #12]
 800abda:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800abde:	f5a3 6334 	sub.w	r3, r3, #2880	@ 0xb40
 800abe2:	f04f 0200 	mov.w	r2, #0
 800abe6:	611a      	str	r2, [r3, #16]
 800abe8:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800abec:	f5a3 6334 	sub.w	r3, r3, #2880	@ 0xb40
 800abf0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800abf4:	615a      	str	r2, [r3, #20]

	printf("\n\nTraining Start\n");
 800abf6:	4823      	ldr	r0, [pc, #140]	@ (800ac84 <TrainOrientation_SM_Translation+0x598>)
 800abf8:	f003 f9fe 	bl	800dff8 <puts>

	training_cycles = TRAINING_CYCLES;
 800abfc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800ac00:	f8c7 3b24 	str.w	r3, [r7, #2852]	@ 0xb24

	for (k = 0; k < num_train_data_cycles; k++) {
 800ac04:	2300      	movs	r3, #0
 800ac06:	f8c7 3b3c 	str.w	r3, [r7, #2876]	@ 0xb3c
 800ac0a:	e15c      	b.n	800aec6 <TrainOrientation_SM_Translation+0x7da>

		i = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f8c7 3b44 	str.w	r3, [r7, #2884]	@ 0xb44
		while (i < training_cycles) {
 800ac12:	e14c      	b.n	800aeae <TrainOrientation_SM_Translation+0x7c2>
			for (j = 0; j < 6; j++) {
 800ac14:	2300      	movs	r3, #0
 800ac16:	f8c7 3b40 	str.w	r3, [r7, #2880]	@ 0xb40
 800ac1a:	e143      	b.n	800aea4 <TrainOrientation_SM_Translation+0x7b8>

				if ((i % 20 == 0 && i < 100) || i % 100 == 0) {
 800ac1c:	f8d7 1b44 	ldr.w	r1, [r7, #2884]	@ 0xb44
 800ac20:	4b19      	ldr	r3, [pc, #100]	@ (800ac88 <TrainOrientation_SM_Translation+0x59c>)
 800ac22:	fb83 2301 	smull	r2, r3, r3, r1
 800ac26:	10da      	asrs	r2, r3, #3
 800ac28:	17cb      	asrs	r3, r1, #31
 800ac2a:	1ad2      	subs	r2, r2, r3
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4413      	add	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	1aca      	subs	r2, r1, r3
 800ac36:	2a00      	cmp	r2, #0
 800ac38:	d103      	bne.n	800ac42 <TrainOrientation_SM_Translation+0x556>
 800ac3a:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	@ 0xb44
 800ac3e:	2b63      	cmp	r3, #99	@ 0x63
 800ac40:	dd0d      	ble.n	800ac5e <TrainOrientation_SM_Translation+0x572>
 800ac42:	f8d7 2b44 	ldr.w	r2, [r7, #2884]	@ 0xb44
 800ac46:	4b11      	ldr	r3, [pc, #68]	@ (800ac8c <TrainOrientation_SM_Translation+0x5a0>)
 800ac48:	fb83 1302 	smull	r1, r3, r3, r2
 800ac4c:	1159      	asrs	r1, r3, #5
 800ac4e:	17d3      	asrs	r3, r2, #31
 800ac50:	1acb      	subs	r3, r1, r3
 800ac52:	2164      	movs	r1, #100	@ 0x64
 800ac54:	fb01 f303 	mul.w	r3, r1, r3
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d15d      	bne.n	800ad1a <TrainOrientation_SM_Translation+0x62e>
					printf("\n\nTraining Epochs: %i\n", i);
 800ac5e:	f8d7 1b44 	ldr.w	r1, [r7, #2884]	@ 0xb44
 800ac62:	480b      	ldr	r0, [pc, #44]	@ (800ac90 <TrainOrientation_SM_Translation+0x5a4>)
 800ac64:	f003 f958 	bl	800df18 <iprintf>

					LED_Code_Blink_Green(0);
 800ac68:	2000      	movs	r0, #0
 800ac6a:	f000 fb5f 	bl	800b32c <LED_Code_Blink_Green>

					net_error = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	f8c7 3b2c 	str.w	r3, [r7, #2860]	@ 0xb2c
					for (m = 0; m < 6; m++) {
 800ac74:	2300      	movs	r3, #0
 800ac76:	f8c7 3b38 	str.w	r3, [r7, #2872]	@ 0xb38
 800ac7a:	e040      	b.n	800acfe <TrainOrientation_SM_Translation+0x612>
 800ac7c:	0801157c 	.word	0x0801157c
 800ac80:	08011598 	.word	0x08011598
 800ac84:	0801159c 	.word	0x0801159c
 800ac88:	66666667 	.word	0x66666667
 800ac8c:	51eb851f 	.word	0x51eb851f
 800ac90:	080115b0 	.word	0x080115b0
						run_ann(net, training_dataset[m][k]);
 800ac94:	f507 7092 	add.w	r0, r7, #292	@ 0x124
 800ac98:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	0092      	lsls	r2, r2, #2
 800aca0:	441a      	add	r2, r3
 800aca2:	00d3      	lsls	r3, r2, #3
 800aca4:	461a      	mov	r2, r3
 800aca6:	f8d7 1b38 	ldr.w	r1, [r7, #2872]	@ 0xb38
 800acaa:	460b      	mov	r3, r1
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	440b      	add	r3, r1
 800acb0:	019b      	lsls	r3, r3, #6
 800acb2:	4413      	add	r3, r2
 800acb4:	18c2      	adds	r2, r0, r3
 800acb6:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800acba:	f6a3 3344 	subw	r3, r3, #2884	@ 0xb44
 800acbe:	4611      	mov	r1, r2
 800acc0:	6818      	ldr	r0, [r3, #0]
 800acc2:	f001 fc93 	bl	800c5ec <run_ann>
						printOutput_ANN_Threshold(net, m, &error, &Z_Threshold);
 800acc6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800acca:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800acce:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 800acd2:	f6a1 3044 	subw	r0, r1, #2884	@ 0xb44
 800acd6:	f8d7 1b38 	ldr.w	r1, [r7, #2872]	@ 0xb38
 800acda:	6800      	ldr	r0, [r0, #0]
 800acdc:	f000 fb78 	bl	800b3d0 <printOutput_ANN_Threshold>
						if (error == 1) {
 800ace0:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ace4:	f5a3 632a 	sub.w	r3, r3, #2720	@ 0xaa0
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b01      	cmp	r3, #1
 800acec:	d102      	bne.n	800acf4 <TrainOrientation_SM_Translation+0x608>
							net_error = 1;
 800acee:	2301      	movs	r3, #1
 800acf0:	f8c7 3b2c 	str.w	r3, [r7, #2860]	@ 0xb2c
					for (m = 0; m < 6; m++) {
 800acf4:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	@ 0xb38
 800acf8:	3301      	adds	r3, #1
 800acfa:	f8c7 3b38 	str.w	r3, [r7, #2872]	@ 0xb38
 800acfe:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	@ 0xb38
 800ad02:	2b05      	cmp	r3, #5
 800ad04:	ddc6      	ble.n	800ac94 <TrainOrientation_SM_Translation+0x5a8>
						}
					}
					printf("\nError State: %i\n", net_error);
 800ad06:	f8d7 1b2c 	ldr.w	r1, [r7, #2860]	@ 0xb2c
 800ad0a:	487f      	ldr	r0, [pc, #508]	@ (800af08 <TrainOrientation_SM_Translation+0x81c>)
 800ad0c:	f003 f904 	bl	800df18 <iprintf>

					if (net_error == 0) {
 800ad10:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f000 80f2 	beq.w	800aefe <TrainOrientation_SM_Translation+0x812>
						return;
					}

				}

				switch (j) {
 800ad1a:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	@ 0xb40
 800ad1e:	2b05      	cmp	r3, #5
 800ad20:	f200 80b2 	bhi.w	800ae88 <TrainOrientation_SM_Translation+0x79c>
 800ad24:	a201      	add	r2, pc, #4	@ (adr r2, 800ad2c <TrainOrientation_SM_Translation+0x640>)
 800ad26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2a:	bf00      	nop
 800ad2c:	0800ad45 	.word	0x0800ad45
 800ad30:	0800ad7b 	.word	0x0800ad7b
 800ad34:	0800adb1 	.word	0x0800adb1
 800ad38:	0800ade7 	.word	0x0800ade7
 800ad3c:	0800ae1d 	.word	0x0800ae1d
 800ad40:	0800ae53 	.word	0x0800ae53

				case 0:
					train_ann(net, training_dataset[j][k], Motion_1);
 800ad44:	f507 7092 	add.w	r0, r7, #292	@ 0x124
 800ad48:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	0092      	lsls	r2, r2, #2
 800ad50:	441a      	add	r2, r3
 800ad52:	00d3      	lsls	r3, r2, #3
 800ad54:	461a      	mov	r2, r3
 800ad56:	f8d7 1b40 	ldr.w	r1, [r7, #2880]	@ 0xb40
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	440b      	add	r3, r1
 800ad60:	019b      	lsls	r3, r3, #6
 800ad62:	4413      	add	r3, r2
 800ad64:	18c1      	adds	r1, r0, r3
 800ad66:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800ad6a:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ad6e:	f6a3 3344 	subw	r3, r3, #2884	@ 0xb44
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	f001 fad8 	bl	800c328 <train_ann>
					break;
 800ad78:	e087      	b.n	800ae8a <TrainOrientation_SM_Translation+0x79e>
				case 1:
					train_ann(net, training_dataset[j][k], Motion_2);
 800ad7a:	f507 7092 	add.w	r0, r7, #292	@ 0x124
 800ad7e:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 800ad82:	461a      	mov	r2, r3
 800ad84:	0092      	lsls	r2, r2, #2
 800ad86:	441a      	add	r2, r3
 800ad88:	00d3      	lsls	r3, r2, #3
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	f8d7 1b40 	ldr.w	r1, [r7, #2880]	@ 0xb40
 800ad90:	460b      	mov	r3, r1
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	440b      	add	r3, r1
 800ad96:	019b      	lsls	r3, r3, #6
 800ad98:	4413      	add	r3, r2
 800ad9a:	18c1      	adds	r1, r0, r3
 800ad9c:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800ada0:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ada4:	f6a3 3344 	subw	r3, r3, #2884	@ 0xb44
 800ada8:	6818      	ldr	r0, [r3, #0]
 800adaa:	f001 fabd 	bl	800c328 <train_ann>
					break;
 800adae:	e06c      	b.n	800ae8a <TrainOrientation_SM_Translation+0x79e>
				case 2:
					train_ann(net, training_dataset[j][k], Motion_3);
 800adb0:	f507 7092 	add.w	r0, r7, #292	@ 0x124
 800adb4:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 800adb8:	461a      	mov	r2, r3
 800adba:	0092      	lsls	r2, r2, #2
 800adbc:	441a      	add	r2, r3
 800adbe:	00d3      	lsls	r3, r2, #3
 800adc0:	461a      	mov	r2, r3
 800adc2:	f8d7 1b40 	ldr.w	r1, [r7, #2880]	@ 0xb40
 800adc6:	460b      	mov	r3, r1
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	440b      	add	r3, r1
 800adcc:	019b      	lsls	r3, r3, #6
 800adce:	4413      	add	r3, r2
 800add0:	18c1      	adds	r1, r0, r3
 800add2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800add6:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800adda:	f6a3 3344 	subw	r3, r3, #2884	@ 0xb44
 800adde:	6818      	ldr	r0, [r3, #0]
 800ade0:	f001 faa2 	bl	800c328 <train_ann>
					break;
 800ade4:	e051      	b.n	800ae8a <TrainOrientation_SM_Translation+0x79e>
				case 3:
					train_ann(net, training_dataset[j][k], Motion_4);
 800ade6:	f507 7092 	add.w	r0, r7, #292	@ 0x124
 800adea:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 800adee:	461a      	mov	r2, r3
 800adf0:	0092      	lsls	r2, r2, #2
 800adf2:	441a      	add	r2, r3
 800adf4:	00d3      	lsls	r3, r2, #3
 800adf6:	461a      	mov	r2, r3
 800adf8:	f8d7 1b40 	ldr.w	r1, [r7, #2880]	@ 0xb40
 800adfc:	460b      	mov	r3, r1
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	440b      	add	r3, r1
 800ae02:	019b      	lsls	r3, r3, #6
 800ae04:	4413      	add	r3, r2
 800ae06:	18c1      	adds	r1, r0, r3
 800ae08:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800ae0c:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ae10:	f6a3 3344 	subw	r3, r3, #2884	@ 0xb44
 800ae14:	6818      	ldr	r0, [r3, #0]
 800ae16:	f001 fa87 	bl	800c328 <train_ann>
					break;
 800ae1a:	e036      	b.n	800ae8a <TrainOrientation_SM_Translation+0x79e>
				case 4:
					train_ann(net, training_dataset[j][k], Motion_5);
 800ae1c:	f507 7092 	add.w	r0, r7, #292	@ 0x124
 800ae20:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 800ae24:	461a      	mov	r2, r3
 800ae26:	0092      	lsls	r2, r2, #2
 800ae28:	441a      	add	r2, r3
 800ae2a:	00d3      	lsls	r3, r2, #3
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	f8d7 1b40 	ldr.w	r1, [r7, #2880]	@ 0xb40
 800ae32:	460b      	mov	r3, r1
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	440b      	add	r3, r1
 800ae38:	019b      	lsls	r3, r3, #6
 800ae3a:	4413      	add	r3, r2
 800ae3c:	18c1      	adds	r1, r0, r3
 800ae3e:	f107 0220 	add.w	r2, r7, #32
 800ae42:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ae46:	f6a3 3344 	subw	r3, r3, #2884	@ 0xb44
 800ae4a:	6818      	ldr	r0, [r3, #0]
 800ae4c:	f001 fa6c 	bl	800c328 <train_ann>
					break;
 800ae50:	e01b      	b.n	800ae8a <TrainOrientation_SM_Translation+0x79e>
				case 5:
					train_ann(net, training_dataset[j][k], Motion_6);
 800ae52:	f507 7092 	add.w	r0, r7, #292	@ 0x124
 800ae56:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	0092      	lsls	r2, r2, #2
 800ae5e:	441a      	add	r2, r3
 800ae60:	00d3      	lsls	r3, r2, #3
 800ae62:	461a      	mov	r2, r3
 800ae64:	f8d7 1b40 	ldr.w	r1, [r7, #2880]	@ 0xb40
 800ae68:	460b      	mov	r3, r1
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	440b      	add	r3, r1
 800ae6e:	019b      	lsls	r3, r3, #6
 800ae70:	4413      	add	r3, r2
 800ae72:	18c1      	adds	r1, r0, r3
 800ae74:	f107 0208 	add.w	r2, r7, #8
 800ae78:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800ae7c:	f6a3 3344 	subw	r3, r3, #2884	@ 0xb44
 800ae80:	6818      	ldr	r0, [r3, #0]
 800ae82:	f001 fa51 	bl	800c328 <train_ann>
					break;
 800ae86:	e000      	b.n	800ae8a <TrainOrientation_SM_Translation+0x79e>
				default:
					break;
 800ae88:	bf00      	nop
				}
				i++;
 800ae8a:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	@ 0xb44
 800ae8e:	3301      	adds	r3, #1
 800ae90:	f8c7 3b44 	str.w	r3, [r7, #2884]	@ 0xb44
				HAL_Delay(5);
 800ae94:	2005      	movs	r0, #5
 800ae96:	f7f9 fecd 	bl	8004c34 <HAL_Delay>
			for (j = 0; j < 6; j++) {
 800ae9a:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	@ 0xb40
 800ae9e:	3301      	adds	r3, #1
 800aea0:	f8c7 3b40 	str.w	r3, [r7, #2880]	@ 0xb40
 800aea4:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	@ 0xb40
 800aea8:	2b05      	cmp	r3, #5
 800aeaa:	f77f aeb7 	ble.w	800ac1c <TrainOrientation_SM_Translation+0x530>
		while (i < training_cycles) {
 800aeae:	f8d7 2b44 	ldr.w	r2, [r7, #2884]	@ 0xb44
 800aeb2:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	@ 0xb24
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	f6ff aeac 	blt.w	800ac14 <TrainOrientation_SM_Translation+0x528>
	for (k = 0; k < num_train_data_cycles; k++) {
 800aebc:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 800aec0:	3301      	adds	r3, #1
 800aec2:	f8c7 3b3c 	str.w	r3, [r7, #2876]	@ 0xb3c
 800aec6:	f8d7 2b3c 	ldr.w	r2, [r7, #2876]	@ 0xb3c
 800aeca:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	@ 0xb28
 800aece:	429a      	cmp	r2, r3
 800aed0:	f6ff ae9c 	blt.w	800ac0c <TrainOrientation_SM_Translation+0x520>
		}

	}


	if (net_error == 0){
 800aed4:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d106      	bne.n	800aeea <TrainOrientation_SM_Translation+0x7fe>
		LED_Code_Blink_Green(0);
 800aedc:	2000      	movs	r0, #0
 800aede:	f000 fa25 	bl	800b32c <LED_Code_Blink_Green>
		LED_Code_Blink_Green(0);
 800aee2:	2000      	movs	r0, #0
 800aee4:	f000 fa22 	bl	800b32c <LED_Code_Blink_Green>
 800aee8:	e005      	b.n	800aef6 <TrainOrientation_SM_Translation+0x80a>
	} else {
		LED_Code_Blink_Red(1);
 800aeea:	2001      	movs	r0, #1
 800aeec:	f000 f9cc 	bl	800b288 <LED_Code_Blink_Red>
		LED_Code_Blink_Red(1);
 800aef0:	2001      	movs	r0, #1
 800aef2:	f000 f9c9 	bl	800b288 <LED_Code_Blink_Red>
	}

	printf("\n\nTraining Complete, Now Start Test Motions\n");
 800aef6:	4805      	ldr	r0, [pc, #20]	@ (800af0c <TrainOrientation_SM_Translation+0x820>)
 800aef8:	f003 f87e 	bl	800dff8 <puts>
	return;
 800aefc:	e000      	b.n	800af00 <TrainOrientation_SM_Translation+0x814>
						return;
 800aefe:	bf00      	nop
}
 800af00:	f607 374c 	addw	r7, r7, #2892	@ 0xb4c
 800af04:	46bd      	mov	sp, r7
 800af06:	bd90      	pop	{r4, r7, pc}
 800af08:	080115c8 	.word	0x080115c8
 800af0c:	080115dc 	.word	0x080115dc

0800af10 <Test_ANN_SM_Translation>:

void Test_ANN_SM_Translation(ANN *net, int32_t *loc) {
 800af10:	b580      	push	{r7, lr}
 800af12:	b0aa      	sub	sp, #168	@ 0xa8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
	float feature_array[NUM_FEATURES];
	int i, n, r;
	int error;
	float Z_Threshold;

	Z_Threshold = 1.2;
 800af1a:	4bc5      	ldr	r3, [pc, #788]	@ (800b230 <Test_ANN_SM_Translation+0x320>)
 800af1c:	60fb      	str	r3, [r7, #12]

	BSP_LED_Off(LED6);
 800af1e:	2000      	movs	r0, #0
 800af20:	f7f6 f892 	bl	8001048 <BSP_LED_Off>
	BSP_LED_Off(LED7);
 800af24:	2001      	movs	r0, #1
 800af26:	f7f6 f88f 	bl	8001048 <BSP_LED_Off>

	LED_Notification_Blink_Red(3);
 800af2a:	2003      	movs	r0, #3
 800af2c:	f000 fd24 	bl	800b978 <LED_Notification_Blink_Red>
	LED_Notification_Blink_Green(3);
 800af30:	2003      	movs	r0, #3
 800af32:	f000 fd02 	bl	800b93a <LED_Notification_Blink_Green>
	LED_Notification_Blink_Red(3);
 800af36:	2003      	movs	r0, #3
 800af38:	f000 fd1e 	bl	800b978 <LED_Notification_Blink_Red>
	BSP_LED_On(LED6);
 800af3c:	2000      	movs	r0, #0
 800af3e:	f7f6 f865 	bl	800100c <BSP_LED_On>
//	LED_Notification_Blink_Green(3);
//	//HAL_Delay(5000);  // Wait 5 seconds for motion execution
//	//dont' need rand since the game is "randomly" sending down shapes anyways :)


	n = 0;
 800af42:	2300      	movs	r3, #0
 800af44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	while (n < NUM_FEATURES){
 800af48:	e040      	b.n	800afcc <Test_ANN_SM_Translation+0xbc>
		Feature_Extraction_State_Machine_Translation(&feature_1, &feature_2, &sig_mag_scale);
 800af4a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800af4e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800af52:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800af56:	4618      	mov	r0, r3
 800af58:	f7ff f99a 	bl	800a290 <Feature_Extraction_State_Machine_Translation>
		feature_array[n] = feature_1;
 800af5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	33a8      	adds	r3, #168	@ 0xa8
 800af66:	443b      	add	r3, r7
 800af68:	3b94      	subs	r3, #148	@ 0x94
 800af6a:	601a      	str	r2, [r3, #0]
		n = n + 1;
 800af6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af70:	3301      	adds	r3, #1
 800af72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		printf("Features %0.1f\t: ", feature_array[n]);
 800af76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	33a8      	adds	r3, #168	@ 0xa8
 800af7e:	443b      	add	r3, r7
 800af80:	3b94      	subs	r3, #148	@ 0x94
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4618      	mov	r0, r3
 800af86:	f7f5 fae3 	bl	8000550 <__aeabi_f2d>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	48a9      	ldr	r0, [pc, #676]	@ (800b234 <Test_ANN_SM_Translation+0x324>)
 800af90:	f002 ffc2 	bl	800df18 <iprintf>
		feature_array[n] = feature_2;
 800af94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	33a8      	adds	r3, #168	@ 0xa8
 800af9e:	443b      	add	r3, r7
 800afa0:	3b94      	subs	r3, #148	@ 0x94
 800afa2:	601a      	str	r2, [r3, #0]
		printf("Features %0.1f\t: ", feature_array[n]);
 800afa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	33a8      	adds	r3, #168	@ 0xa8
 800afac:	443b      	add	r3, r7
 800afae:	3b94      	subs	r3, #148	@ 0x94
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7f5 facc 	bl	8000550 <__aeabi_f2d>
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	489d      	ldr	r0, [pc, #628]	@ (800b234 <Test_ANN_SM_Translation+0x324>)
 800afbe:	f002 ffab 	bl	800df18 <iprintf>
		n = n + 1;
 800afc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800afc6:	3301      	adds	r3, #1
 800afc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	while (n < NUM_FEATURES){
 800afcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800afd0:	2b09      	cmp	r3, #9
 800afd2:	ddba      	ble.n	800af4a <Test_ANN_SM_Translation+0x3a>
	}

	printf("\n");
 800afd4:	200a      	movs	r0, #10
 800afd6:	f002 ffb1 	bl	800df3c <putchar>

	for (n = 0; n < NUM_FEATURES; n++){
 800afda:	2300      	movs	r3, #0
 800afdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800afe0:	e012      	b.n	800b008 <Test_ANN_SM_Translation+0xf8>
		sig_xyz[n] = feature_array[n];
 800afe2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	33a8      	adds	r3, #168	@ 0xa8
 800afea:	443b      	add	r3, r7
 800afec:	3b94      	subs	r3, #148	@ 0x94
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	33a8      	adds	r3, #168	@ 0xa8
 800aff8:	443b      	add	r3, r7
 800affa:	3b60      	subs	r3, #96	@ 0x60
 800affc:	601a      	str	r2, [r3, #0]
	for (n = 0; n < NUM_FEATURES; n++){
 800affe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b002:	3301      	adds	r3, #1
 800b004:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b008:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b00c:	2b09      	cmp	r3, #9
 800b00e:	dde8      	ble.n	800afe2 <Test_ANN_SM_Translation+0xd2>
	}

	motion_softmax(net->topology[0], sig_xyz, sig_xyz_norm);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4618      	mov	r0, r3
 800b018:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800b01c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b020:	4619      	mov	r1, r3
 800b022:	f000 fc33 	bl	800b88c <motion_softmax>

	printf("\n Softmax Input \t");
 800b026:	4884      	ldr	r0, [pc, #528]	@ (800b238 <Test_ANN_SM_Translation+0x328>)
 800b028:	f002 ff76 	bl	800df18 <iprintf>

	for (r = 0; r < NUM_FEATURES; r++) {
 800b02c:	2300      	movs	r3, #0
 800b02e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b032:	e013      	b.n	800b05c <Test_ANN_SM_Translation+0x14c>
		printf("\t%0.1f", sig_xyz[r]);
 800b034:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	33a8      	adds	r3, #168	@ 0xa8
 800b03c:	443b      	add	r3, r7
 800b03e:	3b60      	subs	r3, #96	@ 0x60
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4618      	mov	r0, r3
 800b044:	f7f5 fa84 	bl	8000550 <__aeabi_f2d>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	487b      	ldr	r0, [pc, #492]	@ (800b23c <Test_ANN_SM_Translation+0x32c>)
 800b04e:	f002 ff63 	bl	800df18 <iprintf>
	for (r = 0; r < NUM_FEATURES; r++) {
 800b052:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b056:	3301      	adds	r3, #1
 800b058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b05c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b060:	2b09      	cmp	r3, #9
 800b062:	dde7      	ble.n	800b034 <Test_ANN_SM_Translation+0x124>
	}
	printf("\n Softmax Output\t");
 800b064:	4876      	ldr	r0, [pc, #472]	@ (800b240 <Test_ANN_SM_Translation+0x330>)
 800b066:	f002 ff57 	bl	800df18 <iprintf>

	for (r = 0; r < NUM_FEATURES; r++) {
 800b06a:	2300      	movs	r3, #0
 800b06c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b070:	e013      	b.n	800b09a <Test_ANN_SM_Translation+0x18a>
		printf("\t%0.3f", sig_xyz_norm[r]);
 800b072:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	33a8      	adds	r3, #168	@ 0xa8
 800b07a:	443b      	add	r3, r7
 800b07c:	3b38      	subs	r3, #56	@ 0x38
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4618      	mov	r0, r3
 800b082:	f7f5 fa65 	bl	8000550 <__aeabi_f2d>
 800b086:	4602      	mov	r2, r0
 800b088:	460b      	mov	r3, r1
 800b08a:	486e      	ldr	r0, [pc, #440]	@ (800b244 <Test_ANN_SM_Translation+0x334>)
 800b08c:	f002 ff44 	bl	800df18 <iprintf>
	for (r = 0; r < NUM_FEATURES; r++) {
 800b090:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b094:	3301      	adds	r3, #1
 800b096:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b09a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b09e:	2b09      	cmp	r3, #9
 800b0a0:	dde7      	ble.n	800b072 <Test_ANN_SM_Translation+0x162>

	}
	printf("\n\n");
 800b0a2:	4869      	ldr	r0, [pc, #420]	@ (800b248 <Test_ANN_SM_Translation+0x338>)
 800b0a4:	f002 ffa8 	bl	800dff8 <puts>

	run_ann(net, sig_xyz_norm);
 800b0a8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f001 fa9c 	bl	800c5ec <run_ann>


	point = 0.0;
 800b0b4:	f04f 0300 	mov.w	r3, #0
 800b0b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b0c2:	e032      	b.n	800b12a <Test_ANN_SM_Translation+0x21a>
		if (net->output[i] > point && net->output[i] > 0.1) {
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	69da      	ldr	r2, [r3, #28]
 800b0c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	4413      	add	r3, r2
 800b0d0:	edd3 7a00 	vldr	s15, [r3]
 800b0d4:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800b0d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e0:	d51e      	bpl.n	800b120 <Test_ANN_SM_Translation+0x210>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	69da      	ldr	r2, [r3, #28]
 800b0e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7f5 fa2d 	bl	8000550 <__aeabi_f2d>
 800b0f6:	a34c      	add	r3, pc, #304	@ (adr r3, 800b228 <Test_ANN_SM_Translation+0x318>)
 800b0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fc:	f7f5 fd10 	bl	8000b20 <__aeabi_dcmpgt>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00c      	beq.n	800b120 <Test_ANN_SM_Translation+0x210>
			point = net->output[i];
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	69da      	ldr	r2, [r3, #28]
 800b10a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4413      	add	r3, r2
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			*loc = i;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800b11e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800b120:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b124:	3301      	adds	r3, #1
 800b126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	68da      	ldr	r2, [r3, #12]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b136:	3b01      	subs	r3, #1
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	4413      	add	r3, r2
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b142:	429a      	cmp	r2, r3
 800b144:	d8be      	bhi.n	800b0c4 <Test_ANN_SM_Translation+0x1b4>
		}
	}

	printOutput_ANN_Threshold(net, *loc, &error, &Z_Threshold);
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	6819      	ldr	r1, [r3, #0]
 800b14a:	f107 030c 	add.w	r3, r7, #12
 800b14e:	f107 0210 	add.w	r2, r7, #16
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f93c 	bl	800b3d0 <printOutput_ANN_Threshold>


	if (error == 1){
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d103      	bne.n	800b166 <Test_ANN_SM_Translation+0x256>
		*loc = -1;
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b164:	601a      	str	r2, [r3, #0]
	}

	switch (*loc) {
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	3301      	adds	r3, #1
 800b16c:	2b06      	cmp	r3, #6
 800b16e:	d83f      	bhi.n	800b1f0 <Test_ANN_SM_Translation+0x2e0>
 800b170:	a201      	add	r2, pc, #4	@ (adr r2, 800b178 <Test_ANN_SM_Translation+0x268>)
 800b172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b176:	bf00      	nop
 800b178:	0800b1e9 	.word	0x0800b1e9
 800b17c:	0800b195 	.word	0x0800b195
 800b180:	0800b1a3 	.word	0x0800b1a3
 800b184:	0800b1b1 	.word	0x0800b1b1
 800b188:	0800b1bf 	.word	0x0800b1bf
 800b18c:	0800b1cd 	.word	0x0800b1cd
 800b190:	0800b1db 	.word	0x0800b1db
	case 0:
		//printf("\n\rNeural Network Classification - Motion 1");
		printf("\n\rStart game action registered"); //5 moves right
 800b194:	482d      	ldr	r0, [pc, #180]	@ (800b24c <Test_ANN_SM_Translation+0x33c>)
 800b196:	f002 febf 	bl	800df18 <iprintf>
		UART_SendString("1!");
 800b19a:	482d      	ldr	r0, [pc, #180]	@ (800b250 <Test_ANN_SM_Translation+0x340>)
 800b19c:	f7ff f862 	bl	800a264 <UART_SendString>
		break;
 800b1a0:	e02a      	b.n	800b1f8 <Test_ANN_SM_Translation+0x2e8>
	case 1:
		//printf("\n\rNeural Network Classification - Motion 2");
		printf("\n\rPause game action registered"); //5 moves left
 800b1a2:	482c      	ldr	r0, [pc, #176]	@ (800b254 <Test_ANN_SM_Translation+0x344>)
 800b1a4:	f002 feb8 	bl	800df18 <iprintf>
		UART_SendString("2!");
 800b1a8:	482b      	ldr	r0, [pc, #172]	@ (800b258 <Test_ANN_SM_Translation+0x348>)
 800b1aa:	f7ff f85b 	bl	800a264 <UART_SendString>
		break;
 800b1ae:	e023      	b.n	800b1f8 <Test_ANN_SM_Translation+0x2e8>
	case 2:
		//printf("\n\rNeural Network Classification - Motion 3");
		printf("\n\rStop game action registered"); //5 moves right left right left right
 800b1b0:	482a      	ldr	r0, [pc, #168]	@ (800b25c <Test_ANN_SM_Translation+0x34c>)
 800b1b2:	f002 feb1 	bl	800df18 <iprintf>
		UART_SendString("3!");
 800b1b6:	482a      	ldr	r0, [pc, #168]	@ (800b260 <Test_ANN_SM_Translation+0x350>)
 800b1b8:	f7ff f854 	bl	800a264 <UART_SendString>
		break;
 800b1bc:	e01c      	b.n	800b1f8 <Test_ANN_SM_Translation+0x2e8>
	case 3:
		//printf("\n\rNeural Network Classification - Motion 4");
		printf("\n\rSquare shape registered"); //start at upper left and trace our circle. trace out top side twice
 800b1be:	4829      	ldr	r0, [pc, #164]	@ (800b264 <Test_ANN_SM_Translation+0x354>)
 800b1c0:	f002 feaa 	bl	800df18 <iprintf>
		UART_SendString("4!");
 800b1c4:	4828      	ldr	r0, [pc, #160]	@ (800b268 <Test_ANN_SM_Translation+0x358>)
 800b1c6:	f7ff f84d 	bl	800a264 <UART_SendString>
		//serial.print
		break;
 800b1ca:	e015      	b.n	800b1f8 <Test_ANN_SM_Translation+0x2e8>
	case 4:
		//printf("\n\rNeural Network Classification - Motion 5");
		printf("\n\rLine registered"); // move right move left move right move left move right
 800b1cc:	4827      	ldr	r0, [pc, #156]	@ (800b26c <Test_ANN_SM_Translation+0x35c>)
 800b1ce:	f002 fea3 	bl	800df18 <iprintf>
		UART_SendString("5!");
 800b1d2:	4827      	ldr	r0, [pc, #156]	@ (800b270 <Test_ANN_SM_Translation+0x360>)
 800b1d4:	f7ff f846 	bl	800a264 <UART_SendString>
		break;
 800b1d8:	e00e      	b.n	800b1f8 <Test_ANN_SM_Translation+0x2e8>
	case 5:
		printf("\n\r");
 800b1da:	4826      	ldr	r0, [pc, #152]	@ (800b274 <Test_ANN_SM_Translation+0x364>)
 800b1dc:	f002 fe9c 	bl	800df18 <iprintf>
		UART_SendString("6!");
 800b1e0:	4825      	ldr	r0, [pc, #148]	@ (800b278 <Test_ANN_SM_Translation+0x368>)
 800b1e2:	f7ff f83f 	bl	800a264 <UART_SendString>
		break;
 800b1e6:	e007      	b.n	800b1f8 <Test_ANN_SM_Translation+0x2e8>
	case -1:
		printf("\n\rNeural Network Classification - ERROR");
 800b1e8:	4824      	ldr	r0, [pc, #144]	@ (800b27c <Test_ANN_SM_Translation+0x36c>)
 800b1ea:	f002 fe95 	bl	800df18 <iprintf>
		break;
 800b1ee:	e003      	b.n	800b1f8 <Test_ANN_SM_Translation+0x2e8>
	default:
		printf("\n\rNeural Network Classification - NULL");
 800b1f0:	4823      	ldr	r0, [pc, #140]	@ (800b280 <Test_ANN_SM_Translation+0x370>)
 800b1f2:	f002 fe91 	bl	800df18 <iprintf>
		break;
 800b1f6:	bf00      	nop
	}

	printf("\n\n\n");
 800b1f8:	4822      	ldr	r0, [pc, #136]	@ (800b284 <Test_ANN_SM_Translation+0x374>)
 800b1fa:	f002 fefd 	bl	800dff8 <puts>

	if (*loc == -1){
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b206:	d103      	bne.n	800b210 <Test_ANN_SM_Translation+0x300>
		LED_Code_Blink_Red(0);
 800b208:	2000      	movs	r0, #0
 800b20a:	f000 f83d 	bl	800b288 <LED_Code_Blink_Red>
	} else {
		LED_Code_Blink_Green(*loc + 1);
	}

}
 800b20e:	e005      	b.n	800b21c <Test_ANN_SM_Translation+0x30c>
		LED_Code_Blink_Green(*loc + 1);
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3301      	adds	r3, #1
 800b216:	4618      	mov	r0, r3
 800b218:	f000 f888 	bl	800b32c <LED_Code_Blink_Green>
}
 800b21c:	bf00      	nop
 800b21e:	37a8      	adds	r7, #168	@ 0xa8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	f3af 8000 	nop.w
 800b228:	9999999a 	.word	0x9999999a
 800b22c:	3fb99999 	.word	0x3fb99999
 800b230:	3f99999a 	.word	0x3f99999a
 800b234:	08011554 	.word	0x08011554
 800b238:	08011568 	.word	0x08011568
 800b23c:	0801157c 	.word	0x0801157c
 800b240:	08011584 	.word	0x08011584
 800b244:	08011608 	.word	0x08011608
 800b248:	08011598 	.word	0x08011598
 800b24c:	08011610 	.word	0x08011610
 800b250:	08011630 	.word	0x08011630
 800b254:	08011634 	.word	0x08011634
 800b258:	08011654 	.word	0x08011654
 800b25c:	08011658 	.word	0x08011658
 800b260:	08011678 	.word	0x08011678
 800b264:	0801167c 	.word	0x0801167c
 800b268:	08011698 	.word	0x08011698
 800b26c:	0801169c 	.word	0x0801169c
 800b270:	080116b0 	.word	0x080116b0
 800b274:	080116b4 	.word	0x080116b4
 800b278:	080116b8 	.word	0x080116b8
 800b27c:	080116bc 	.word	0x080116bc
 800b280:	080116e4 	.word	0x080116e4
 800b284:	0801170c 	.word	0x0801170c

0800b288 <LED_Code_Blink_Red>:





void LED_Code_Blink_Red(int count) {
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
	int i;

	/*
	 * Alert signal of rapid blinks indicating code to be shown
	 */
	for (i = 0; i < 7; i++) {
 800b290:	2300      	movs	r3, #0
 800b292:	60fb      	str	r3, [r7, #12]
 800b294:	e00e      	b.n	800b2b4 <LED_Code_Blink_Red+0x2c>
		BSP_LED_On(LED6);
 800b296:	2000      	movs	r0, #0
 800b298:	f7f5 feb8 	bl	800100c <BSP_LED_On>

		HAL_Delay(20);
 800b29c:	2014      	movs	r0, #20
 800b29e:	f7f9 fcc9 	bl	8004c34 <HAL_Delay>
		BSP_LED_Off(LED6);
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	f7f5 fed0 	bl	8001048 <BSP_LED_Off>

		HAL_Delay(50);
 800b2a8:	2032      	movs	r0, #50	@ 0x32
 800b2aa:	f7f9 fcc3 	bl	8004c34 <HAL_Delay>
	for (i = 0; i < 7; i++) {
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b06      	cmp	r3, #6
 800b2b8:	dded      	ble.n	800b296 <LED_Code_Blink_Red+0xe>

	/*
	 * Code indicated by number of slow blinks
	 */

	if (count != 0) {
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d01b      	beq.n	800b2f8 <LED_Code_Blink_Red+0x70>
		HAL_Delay(1000);
 800b2c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b2c4:	f7f9 fcb6 	bl	8004c34 <HAL_Delay>
		for (i = 0; i < count; i++) {
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	e010      	b.n	800b2f0 <LED_Code_Blink_Red+0x68>
			BSP_LED_On(LED6);
 800b2ce:	2000      	movs	r0, #0
 800b2d0:	f7f5 fe9c 	bl	800100c <BSP_LED_On>

			HAL_Delay(500);
 800b2d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b2d8:	f7f9 fcac 	bl	8004c34 <HAL_Delay>
			BSP_LED_Off(LED6);
 800b2dc:	2000      	movs	r0, #0
 800b2de:	f7f5 feb3 	bl	8001048 <BSP_LED_Off>

			HAL_Delay(500);
 800b2e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b2e6:	f7f9 fca5 	bl	8004c34 <HAL_Delay>
		for (i = 0; i < count; i++) {
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	60fb      	str	r3, [r7, #12]
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	dbea      	blt.n	800b2ce <LED_Code_Blink_Red+0x46>
	}

	/*
	 * Alert signal of rapid blinks indicating end of code
	 */
	for (i = 0; i < 7; i++) {
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	60fb      	str	r3, [r7, #12]
 800b2fc:	e00e      	b.n	800b31c <LED_Code_Blink_Red+0x94>
		BSP_LED_On(LED6);
 800b2fe:	2000      	movs	r0, #0
 800b300:	f7f5 fe84 	bl	800100c <BSP_LED_On>

		HAL_Delay(20);
 800b304:	2014      	movs	r0, #20
 800b306:	f7f9 fc95 	bl	8004c34 <HAL_Delay>
		BSP_LED_Off(LED6);
 800b30a:	2000      	movs	r0, #0
 800b30c:	f7f5 fe9c 	bl	8001048 <BSP_LED_Off>

		HAL_Delay(30);
 800b310:	201e      	movs	r0, #30
 800b312:	f7f9 fc8f 	bl	8004c34 <HAL_Delay>
	for (i = 0; i < 7; i++) {
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3301      	adds	r3, #1
 800b31a:	60fb      	str	r3, [r7, #12]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2b06      	cmp	r3, #6
 800b320:	dded      	ble.n	800b2fe <LED_Code_Blink_Red+0x76>
	}

}
 800b322:	bf00      	nop
 800b324:	bf00      	nop
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <LED_Code_Blink_Green>:

void LED_Code_Blink_Green(int count) {
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
	int i;

	/*
	 * Alert signal of rapid blinks indicating code to be shown
	 */
	for (i = 0; i < 7; i++) {
 800b334:	2300      	movs	r3, #0
 800b336:	60fb      	str	r3, [r7, #12]
 800b338:	e00e      	b.n	800b358 <LED_Code_Blink_Green+0x2c>

		BSP_LED_On(LED7);
 800b33a:	2001      	movs	r0, #1
 800b33c:	f7f5 fe66 	bl	800100c <BSP_LED_On>
		HAL_Delay(20);
 800b340:	2014      	movs	r0, #20
 800b342:	f7f9 fc77 	bl	8004c34 <HAL_Delay>

		BSP_LED_Off(LED7);
 800b346:	2001      	movs	r0, #1
 800b348:	f7f5 fe7e 	bl	8001048 <BSP_LED_Off>
		HAL_Delay(50);
 800b34c:	2032      	movs	r0, #50	@ 0x32
 800b34e:	f7f9 fc71 	bl	8004c34 <HAL_Delay>
	for (i = 0; i < 7; i++) {
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	3301      	adds	r3, #1
 800b356:	60fb      	str	r3, [r7, #12]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b06      	cmp	r3, #6
 800b35c:	dded      	ble.n	800b33a <LED_Code_Blink_Green+0xe>

	/*
	 * Code indicated by number of slow blinks
	 */

	if (count != 0) {
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d01b      	beq.n	800b39c <LED_Code_Blink_Green+0x70>
		HAL_Delay(1000);
 800b364:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b368:	f7f9 fc64 	bl	8004c34 <HAL_Delay>
		for (i = 0; i < count; i++) {
 800b36c:	2300      	movs	r3, #0
 800b36e:	60fb      	str	r3, [r7, #12]
 800b370:	e010      	b.n	800b394 <LED_Code_Blink_Green+0x68>

			BSP_LED_On(LED7);
 800b372:	2001      	movs	r0, #1
 800b374:	f7f5 fe4a 	bl	800100c <BSP_LED_On>
			HAL_Delay(500);
 800b378:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b37c:	f7f9 fc5a 	bl	8004c34 <HAL_Delay>

			BSP_LED_Off(LED7);
 800b380:	2001      	movs	r0, #1
 800b382:	f7f5 fe61 	bl	8001048 <BSP_LED_Off>
			HAL_Delay(500);
 800b386:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b38a:	f7f9 fc53 	bl	8004c34 <HAL_Delay>
		for (i = 0; i < count; i++) {
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	3301      	adds	r3, #1
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	429a      	cmp	r2, r3
 800b39a:	dbea      	blt.n	800b372 <LED_Code_Blink_Green+0x46>
	}

	/*
	 * Alert signal of rapid blinks indicating end of code
	 */
	for (i = 0; i < 7; i++) {
 800b39c:	2300      	movs	r3, #0
 800b39e:	60fb      	str	r3, [r7, #12]
 800b3a0:	e00e      	b.n	800b3c0 <LED_Code_Blink_Green+0x94>

		BSP_LED_On(LED7);
 800b3a2:	2001      	movs	r0, #1
 800b3a4:	f7f5 fe32 	bl	800100c <BSP_LED_On>
		HAL_Delay(20);
 800b3a8:	2014      	movs	r0, #20
 800b3aa:	f7f9 fc43 	bl	8004c34 <HAL_Delay>

		BSP_LED_Off(LED7);
 800b3ae:	2001      	movs	r0, #1
 800b3b0:	f7f5 fe4a 	bl	8001048 <BSP_LED_Off>
		HAL_Delay(30);
 800b3b4:	201e      	movs	r0, #30
 800b3b6:	f7f9 fc3d 	bl	8004c34 <HAL_Delay>
	for (i = 0; i < 7; i++) {
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	60fb      	str	r3, [r7, #12]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2b06      	cmp	r3, #6
 800b3c4:	dded      	ble.n	800b3a2 <LED_Code_Blink_Green+0x76>
	}

}
 800b3c6:	bf00      	nop
 800b3c8:	bf00      	nop
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <printOutput_ANN_Threshold>:

void printOutput_ANN_Threshold(ANN *net, int input_state, int * error, float * Z_Threshold) {
 800b3d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b3d4:	b092      	sub	sp, #72	@ 0x48
 800b3d6:	af04      	add	r7, sp, #16
 800b3d8:	60f8      	str	r0, [r7, #12]
 800b3da:	60b9      	str	r1, [r7, #8]
 800b3dc:	607a      	str	r2, [r7, #4]
 800b3de:	603b      	str	r3, [r7, #0]

	int i, loc, count;
	float point = 0.0;
 800b3e0:	f04f 0300 	mov.w	r3, #0
 800b3e4:	62bb      	str	r3, [r7, #40]	@ 0x28

	/*
	 * Initialize error state
	 */

	*error = 0;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	601a      	str	r2, [r3, #0]
	loc = -1;
 800b3ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3f0:	633b      	str	r3, [r7, #48]	@ 0x30
	count = 0;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	mean_output = 0;
 800b3f6:	f04f 0300 	mov.w	r3, #0
 800b3fa:	623b      	str	r3, [r7, #32]
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b400:	e03b      	b.n	800b47a <printOutput_ANN_Threshold+0xaa>
		mean_output = mean_output + (net->output[i]);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	69da      	ldr	r2, [r3, #28]
 800b406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	edd3 7a00 	vldr	s15, [r3]
 800b410:	ed97 7a08 	vldr	s14, [r7, #32]
 800b414:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b418:	edc7 7a08 	vstr	s15, [r7, #32]
		if (net->output[i] > point && net->output[i] > 0.1) {
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	69da      	ldr	r2, [r3, #28]
 800b420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	edd3 7a00 	vldr	s15, [r3]
 800b42a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b42e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b436:	d51a      	bpl.n	800b46e <printOutput_ANN_Threshold+0x9e>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	69da      	ldr	r2, [r3, #28]
 800b43c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4413      	add	r3, r2
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4618      	mov	r0, r3
 800b446:	f7f5 f883 	bl	8000550 <__aeabi_f2d>
 800b44a:	f20f 4338 	addw	r3, pc, #1080	@ 0x438
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	f7f5 fb65 	bl	8000b20 <__aeabi_dcmpgt>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d008      	beq.n	800b46e <printOutput_ANN_Threshold+0x9e>
			point = net->output[i];
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	69da      	ldr	r2, [r3, #28]
 800b460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4413      	add	r3, r2
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	62bb      	str	r3, [r7, #40]	@ 0x28
			loc = i;
 800b46a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b46c:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		count++;
 800b46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b470:	3301      	adds	r3, #1
 800b472:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800b474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b476:	3301      	adds	r3, #1
 800b478:	637b      	str	r3, [r7, #52]	@ 0x34
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	68da      	ldr	r2, [r3, #12]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	691b      	ldr	r3, [r3, #16]
 800b482:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b486:	3b01      	subs	r3, #1
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4413      	add	r3, r2
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b490:	429a      	cmp	r2, r3
 800b492:	d8b6      	bhi.n	800b402 <printOutput_ANN_Threshold+0x32>
	}

	next_max = 0;
 800b494:	f04f 0300 	mov.w	r3, #0
 800b498:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800b49a:	2300      	movs	r3, #0
 800b49c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b49e:	e02e      	b.n	800b4fe <printOutput_ANN_Threshold+0x12e>
		if (i == loc) {
 800b4a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d026      	beq.n	800b4f6 <printOutput_ANN_Threshold+0x126>
			continue;
		}
		if (net->output[i] > next_max && net->output[i] > 0.1) {
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	69da      	ldr	r2, [r3, #28]
 800b4ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	edd3 7a00 	vldr	s15, [r3]
 800b4b6:	ed97 7a06 	vldr	s14, [r7, #24]
 800b4ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c2:	d519      	bpl.n	800b4f8 <printOutput_ANN_Threshold+0x128>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	69da      	ldr	r2, [r3, #28]
 800b4c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	4413      	add	r3, r2
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7f5 f83d 	bl	8000550 <__aeabi_f2d>
 800b4d6:	a3eb      	add	r3, pc, #940	@ (adr r3, 800b884 <printOutput_ANN_Threshold+0x4b4>)
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	f7f5 fb20 	bl	8000b20 <__aeabi_dcmpgt>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d008      	beq.n	800b4f8 <printOutput_ANN_Threshold+0x128>
			next_max = net->output[i];
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	69da      	ldr	r2, [r3, #28]
 800b4ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	61bb      	str	r3, [r7, #24]
 800b4f4:	e000      	b.n	800b4f8 <printOutput_ANN_Threshold+0x128>
			continue;
 800b4f6:	bf00      	nop
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800b4f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	68da      	ldr	r2, [r3, #12]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b50a:	3b01      	subs	r3, #1
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4413      	add	r3, r2
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b514:	429a      	cmp	r2, r3
 800b516:	d8c3      	bhi.n	800b4a0 <printOutput_ANN_Threshold+0xd0>
		}
	}

	mean_output = (mean_output) / (count);
 800b518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51a:	ee07 3a90 	vmov	s15, r3
 800b51e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b522:	edd7 6a08 	vldr	s13, [r7, #32]
 800b526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b52a:	edc7 7a08 	vstr	s15, [r7, #32]

	count = 0;
 800b52e:	2300      	movs	r3, #0
 800b530:	62fb      	str	r3, [r7, #44]	@ 0x2c
	mean_output_rem = 0;
 800b532:	f04f 0300 	mov.w	r3, #0
 800b536:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800b538:	2300      	movs	r3, #0
 800b53a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b53c:	e018      	b.n	800b570 <printOutput_ANN_Threshold+0x1a0>
		mean_output_rem = mean_output_rem + (net->output[i]);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	69da      	ldr	r2, [r3, #28]
 800b542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	4413      	add	r3, r2
 800b548:	edd3 7a00 	vldr	s15, [r3]
 800b54c:	ed97 7a07 	vldr	s14, [r7, #28]
 800b550:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b554:	edc7 7a07 	vstr	s15, [r7, #28]
		if (i == loc) {
 800b558:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d003      	beq.n	800b568 <printOutput_ANN_Threshold+0x198>
			continue;
		}
		count++;
 800b560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b562:	3301      	adds	r3, #1
 800b564:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b566:	e000      	b.n	800b56a <printOutput_ANN_Threshold+0x19a>
			continue;
 800b568:	bf00      	nop
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800b56a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b56c:	3301      	adds	r3, #1
 800b56e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	68da      	ldr	r2, [r3, #12]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b57c:	3b01      	subs	r3, #1
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	4413      	add	r3, r2
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b586:	429a      	cmp	r2, r3
 800b588:	d8d9      	bhi.n	800b53e <printOutput_ANN_Threshold+0x16e>
	}

	mean_output_rem = (mean_output_rem) / (count);
 800b58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b58c:	ee07 3a90 	vmov	s15, r3
 800b590:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b594:	edd7 6a07 	vldr	s13, [r7, #28]
 800b598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b59c:	edc7 7a07 	vstr	s15, [r7, #28]

	rms_output = 0;
 800b5a0:	f04f 0300 	mov.w	r3, #0
 800b5a4:	627b      	str	r3, [r7, #36]	@ 0x24

	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5aa:	e02c      	b.n	800b606 <printOutput_ANN_Threshold+0x236>
		rms_output = rms_output + pow((net->output[i] - mean_output), 2);
 800b5ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b5ae:	f7f4 ffcf 	bl	8000550 <__aeabi_f2d>
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	460d      	mov	r5, r1
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	69da      	ldr	r2, [r3, #28]
 800b5ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	4413      	add	r3, r2
 800b5c0:	ed93 7a00 	vldr	s14, [r3]
 800b5c4:	edd7 7a08 	vldr	s15, [r7, #32]
 800b5c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5cc:	ee17 0a90 	vmov	r0, s15
 800b5d0:	f7f4 ffbe 	bl	8000550 <__aeabi_f2d>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	ed9f 1b9d 	vldr	d1, [pc, #628]	@ 800b850 <printOutput_ANN_Threshold+0x480>
 800b5dc:	ec43 2b10 	vmov	d0, r2, r3
 800b5e0:	f004 ff92 	bl	8010508 <pow>
 800b5e4:	ec53 2b10 	vmov	r2, r3, d0
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	f7f4 fe52 	bl	8000294 <__adddf3>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	4610      	mov	r0, r2
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	f7f5 fada 	bl	8000bb0 <__aeabi_d2f>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800b600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b602:	3301      	adds	r3, #1
 800b604:	637b      	str	r3, [r7, #52]	@ 0x34
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	68da      	ldr	r2, [r3, #12]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b612:	3b01      	subs	r3, #1
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4413      	add	r3, r2
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d8c5      	bhi.n	800b5ac <printOutput_ANN_Threshold+0x1dc>
	}

	rms_output = sqrt(rms_output / count);
 800b620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b622:	ee07 3a90 	vmov	s15, r3
 800b626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b62a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b62e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b632:	ee16 0a90 	vmov	r0, s13
 800b636:	f7f4 ff8b 	bl	8000550 <__aeabi_f2d>
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	ec43 2b10 	vmov	d0, r2, r3
 800b642:	f004 ffd1 	bl	80105e8 <sqrt>
 800b646:	ec53 2b10 	vmov	r2, r3, d0
 800b64a:	4610      	mov	r0, r2
 800b64c:	4619      	mov	r1, r3
 800b64e:	f7f5 faaf 	bl	8000bb0 <__aeabi_d2f>
 800b652:	4603      	mov	r3, r0
 800b654:	627b      	str	r3, [r7, #36]	@ 0x24
	if (rms_output != 0) {
 800b656:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b65a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b662:	d00c      	beq.n	800b67e <printOutput_ANN_Threshold+0x2ae>
		classification_metric = (point - mean_output) / rms_output;
 800b664:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b668:	edd7 7a08 	vldr	s15, [r7, #32]
 800b66c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b670:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b678:	edc7 7a05 	vstr	s15, [r7, #20]
 800b67c:	e002      	b.n	800b684 <printOutput_ANN_Threshold+0x2b4>
	} else {
		classification_metric = 0;
 800b67e:	f04f 0300 	mov.w	r3, #0
 800b682:	617b      	str	r3, [r7, #20]
	}

	if (loc != input_state) {
 800b684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d00e      	beq.n	800b6aa <printOutput_ANN_Threshold+0x2da>
		rms_output = 0;
 800b68c:	f04f 0300 	mov.w	r3, #0
 800b690:	627b      	str	r3, [r7, #36]	@ 0x24
		classification_metric = 0;
 800b692:	f04f 0300 	mov.w	r3, #0
 800b696:	617b      	str	r3, [r7, #20]
		point = 0;
 800b698:	f04f 0300 	mov.w	r3, #0
 800b69c:	62bb      	str	r3, [r7, #40]	@ 0x28
		mean_output = 0;
 800b69e:	f04f 0300 	mov.w	r3, #0
 800b6a2:	623b      	str	r3, [r7, #32]
		mean_output_rem = 0;
 800b6a4:	f04f 0300 	mov.w	r3, #0
 800b6a8:	61fb      	str	r3, [r7, #28]
	}
	if (loc > -1){
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	db03      	blt.n	800b6b8 <printOutput_ANN_Threshold+0x2e8>
		printf("State: %i",loc);
 800b6b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b6b2:	486b      	ldr	r0, [pc, #428]	@ (800b860 <printOutput_ANN_Threshold+0x490>)
 800b6b4:	f002 fc30 	bl	800df18 <iprintf>
	}
	if (loc == -1){
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6be:	d102      	bne.n	800b6c6 <printOutput_ANN_Threshold+0x2f6>
		printf("State:  ");
 800b6c0:	4868      	ldr	r0, [pc, #416]	@ (800b864 <printOutput_ANN_Threshold+0x494>)
 800b6c2:	f002 fc29 	bl	800df18 <iprintf>
	}

	if (mean_output >= 0){
 800b6c6:	edd7 7a08 	vldr	s15, [r7, #32]
 800b6ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d2:	db18      	blt.n	800b706 <printOutput_ANN_Threshold+0x336>
		printf(" Max: %0.1f Mean:  %0.1f Z: %0.1f ", loc, point, mean_output, classification_metric);
 800b6d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6d6:	f7f4 ff3b 	bl	8000550 <__aeabi_f2d>
 800b6da:	4680      	mov	r8, r0
 800b6dc:	4689      	mov	r9, r1
 800b6de:	6a38      	ldr	r0, [r7, #32]
 800b6e0:	f7f4 ff36 	bl	8000550 <__aeabi_f2d>
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	460d      	mov	r5, r1
 800b6e8:	6978      	ldr	r0, [r7, #20]
 800b6ea:	f7f4 ff31 	bl	8000550 <__aeabi_f2d>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6f6:	e9cd 4500 	strd	r4, r5, [sp]
 800b6fa:	4642      	mov	r2, r8
 800b6fc:	464b      	mov	r3, r9
 800b6fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b700:	4859      	ldr	r0, [pc, #356]	@ (800b868 <printOutput_ANN_Threshold+0x498>)
 800b702:	f002 fc09 	bl	800df18 <iprintf>
	}
	if (mean_output < 0){
 800b706:	edd7 7a08 	vldr	s15, [r7, #32]
 800b70a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b712:	d518      	bpl.n	800b746 <printOutput_ANN_Threshold+0x376>
		printf(" Max: %0.1f Mean: %0.1f Z: %0.1f ", loc, point, mean_output, classification_metric);
 800b714:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b716:	f7f4 ff1b 	bl	8000550 <__aeabi_f2d>
 800b71a:	4680      	mov	r8, r0
 800b71c:	4689      	mov	r9, r1
 800b71e:	6a38      	ldr	r0, [r7, #32]
 800b720:	f7f4 ff16 	bl	8000550 <__aeabi_f2d>
 800b724:	4604      	mov	r4, r0
 800b726:	460d      	mov	r5, r1
 800b728:	6978      	ldr	r0, [r7, #20]
 800b72a:	f7f4 ff11 	bl	8000550 <__aeabi_f2d>
 800b72e:	4602      	mov	r2, r0
 800b730:	460b      	mov	r3, r1
 800b732:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b736:	e9cd 4500 	strd	r4, r5, [sp]
 800b73a:	4642      	mov	r2, r8
 800b73c:	464b      	mov	r3, r9
 800b73e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b740:	484a      	ldr	r0, [pc, #296]	@ (800b86c <printOutput_ANN_Threshold+0x49c>)
 800b742:	f002 fbe9 	bl	800df18 <iprintf>
	}

	printf("Outputs: ");
 800b746:	484a      	ldr	r0, [pc, #296]	@ (800b870 <printOutput_ANN_Threshold+0x4a0>)
 800b748:	f002 fbe6 	bl	800df18 <iprintf>
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800b74c:	2300      	movs	r3, #0
 800b74e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b750:	e036      	b.n	800b7c0 <printOutput_ANN_Threshold+0x3f0>
		if (net->output[i] >= 0){
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	69da      	ldr	r2, [r3, #28]
 800b756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	4413      	add	r3, r2
 800b75c:	edd3 7a00 	vldr	s15, [r3]
 800b760:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b768:	db0d      	blt.n	800b786 <printOutput_ANN_Threshold+0x3b6>
			printf("  %0.1f", net->output[i]);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	69da      	ldr	r2, [r3, #28]
 800b76e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4618      	mov	r0, r3
 800b778:	f7f4 feea 	bl	8000550 <__aeabi_f2d>
 800b77c:	4602      	mov	r2, r0
 800b77e:	460b      	mov	r3, r1
 800b780:	483c      	ldr	r0, [pc, #240]	@ (800b874 <printOutput_ANN_Threshold+0x4a4>)
 800b782:	f002 fbc9 	bl	800df18 <iprintf>
		}
		if (net->output[i] < 0){
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	69da      	ldr	r2, [r3, #28]
 800b78a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	4413      	add	r3, r2
 800b790:	edd3 7a00 	vldr	s15, [r3]
 800b794:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b79c:	d50d      	bpl.n	800b7ba <printOutput_ANN_Threshold+0x3ea>
			printf(" %0.1f", net->output[i]);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	69da      	ldr	r2, [r3, #28]
 800b7a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	4413      	add	r3, r2
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7f4 fed0 	bl	8000550 <__aeabi_f2d>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	4830      	ldr	r0, [pc, #192]	@ (800b878 <printOutput_ANN_Threshold+0x4a8>)
 800b7b6:	f002 fbaf 	bl	800df18 <iprintf>
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800b7ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7bc:	3301      	adds	r3, #1
 800b7be:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	68da      	ldr	r2, [r3, #12]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	691b      	ldr	r3, [r3, #16]
 800b7c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	4413      	add	r3, r2
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d8bb      	bhi.n	800b752 <printOutput_ANN_Threshold+0x382>
		}
	}

	if (loc != input_state) {
 800b7da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d005      	beq.n	800b7ee <printOutput_ANN_Threshold+0x41e>
		*error = 1;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	601a      	str	r2, [r3, #0]
		printf("\t Classification Error");
 800b7e8:	4824      	ldr	r0, [pc, #144]	@ (800b87c <printOutput_ANN_Threshold+0x4ac>)
 800b7ea:	f002 fb95 	bl	800df18 <iprintf>
	}

	if (loc == input_state
 800b7ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d121      	bne.n	800b83a <printOutput_ANN_Threshold+0x46a>
			&& ( classification_metric < *Z_Threshold
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	edd3 7a00 	vldr	s15, [r3]
 800b7fc:	ed97 7a05 	vldr	s14, [r7, #20]
 800b800:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b808:	d411      	bmi.n	800b82e <printOutput_ANN_Threshold+0x45e>
					|| point/next_max < CLASSIFICATION_DISC_THRESHOLD)) {
 800b80a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b80e:	edd7 7a06 	vldr	s15, [r7, #24]
 800b812:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b816:	ee16 0a90 	vmov	r0, s13
 800b81a:	f7f4 fe99 	bl	8000550 <__aeabi_f2d>
 800b81e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b858 <printOutput_ANN_Threshold+0x488>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	f7f5 f95e 	bl	8000ae4 <__aeabi_dcmplt>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d005      	beq.n	800b83a <printOutput_ANN_Threshold+0x46a>
		*error = 1;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2201      	movs	r2, #1
 800b832:	601a      	str	r2, [r3, #0]
		printf("\t Classification Accuracy Limit");
 800b834:	4812      	ldr	r0, [pc, #72]	@ (800b880 <printOutput_ANN_Threshold+0x4b0>)
 800b836:	f002 fb6f 	bl	800df18 <iprintf>
	}

	printf("\n");
 800b83a:	200a      	movs	r0, #10
 800b83c:	f002 fb7e 	bl	800df3c <putchar>
}
 800b840:	bf00      	nop
 800b842:	3738      	adds	r7, #56	@ 0x38
 800b844:	46bd      	mov	sp, r7
 800b846:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b84a:	bf00      	nop
 800b84c:	f3af 8000 	nop.w
 800b850:	00000000 	.word	0x00000000
 800b854:	40000000 	.word	0x40000000
 800b858:	cccccccd 	.word	0xcccccccd
 800b85c:	3ff0cccc 	.word	0x3ff0cccc
 800b860:	08011710 	.word	0x08011710
 800b864:	0801171c 	.word	0x0801171c
 800b868:	08011728 	.word	0x08011728
 800b86c:	0801174c 	.word	0x0801174c
 800b870:	08011770 	.word	0x08011770
 800b874:	0801177c 	.word	0x0801177c
 800b878:	08011784 	.word	0x08011784
 800b87c:	0801178c 	.word	0x0801178c
 800b880:	080117a4 	.word	0x080117a4
 800b884:	9999999a 	.word	0x9999999a
 800b888:	3fb99999 	.word	0x3fb99999

0800b88c <motion_softmax>:



void motion_softmax(int n, float *x, float *y) {
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b086      	sub	sp, #24
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
	float norm;
	int32_t i;

	norm = 0;
 800b898:	f04f 0300 	mov.w	r3, #0
 800b89c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < n; i++){
 800b89e:	2300      	movs	r3, #0
 800b8a0:	613b      	str	r3, [r7, #16]
 800b8a2:	e016      	b.n	800b8d2 <motion_softmax+0x46>
		norm = norm + x[i] * x[i];
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	ed93 7a00 	vldr	s14, [r3]
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	edd3 7a00 	vldr	s15, [r3]
 800b8bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8c0:	ed97 7a05 	vldr	s14, [r7, #20]
 800b8c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8c8:	edc7 7a05 	vstr	s15, [r7, #20]
	for (i = 0; i < n; i++){
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	613b      	str	r3, [r7, #16]
 800b8d2:	693a      	ldr	r2, [r7, #16]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	dbe4      	blt.n	800b8a4 <motion_softmax+0x18>
	}
	norm = sqrt(norm);
 800b8da:	6978      	ldr	r0, [r7, #20]
 800b8dc:	f7f4 fe38 	bl	8000550 <__aeabi_f2d>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	ec43 2b10 	vmov	d0, r2, r3
 800b8e8:	f004 fe7e 	bl	80105e8 <sqrt>
 800b8ec:	ec53 2b10 	vmov	r2, r3, d0
 800b8f0:	4610      	mov	r0, r2
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	f7f5 f95c 	bl	8000bb0 <__aeabi_d2f>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	617b      	str	r3, [r7, #20]
	for (i = 0; i < n; i++){
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	613b      	str	r3, [r7, #16]
 800b900:	e012      	b.n	800b928 <motion_softmax+0x9c>
		y[i] = x[i]/norm;
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	4413      	add	r3, r2
 800b90a:	edd3 6a00 	vldr	s13, [r3]
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	4413      	add	r3, r2
 800b916:	ed97 7a05 	vldr	s14, [r7, #20]
 800b91a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b91e:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < n; i++){
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	3301      	adds	r3, #1
 800b926:	613b      	str	r3, [r7, #16]
 800b928:	693a      	ldr	r2, [r7, #16]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	dbe8      	blt.n	800b902 <motion_softmax+0x76>
	}
}
 800b930:	bf00      	nop
 800b932:	bf00      	nop
 800b934:	3718      	adds	r7, #24
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <LED_Notification_Blink_Green>:


void LED_Notification_Blink_Green(int count) {
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b084      	sub	sp, #16
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]

	/*
	 * Rapid blink notification
	 */

	for (i = 0; i < count; i++) {
 800b942:	2300      	movs	r3, #0
 800b944:	60fb      	str	r3, [r7, #12]
 800b946:	e00e      	b.n	800b966 <LED_Notification_Blink_Green+0x2c>

		BSP_LED_On(LED7);
 800b948:	2001      	movs	r0, #1
 800b94a:	f7f5 fb5f 	bl	800100c <BSP_LED_On>
		HAL_Delay(20);
 800b94e:	2014      	movs	r0, #20
 800b950:	f7f9 f970 	bl	8004c34 <HAL_Delay>

		BSP_LED_Off(LED7);
 800b954:	2001      	movs	r0, #1
 800b956:	f7f5 fb77 	bl	8001048 <BSP_LED_Off>
		HAL_Delay(50);
 800b95a:	2032      	movs	r0, #50	@ 0x32
 800b95c:	f7f9 f96a 	bl	8004c34 <HAL_Delay>
	for (i = 0; i < count; i++) {
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	3301      	adds	r3, #1
 800b964:	60fb      	str	r3, [r7, #12]
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	dbec      	blt.n	800b948 <LED_Notification_Blink_Green+0xe>
	}
}
 800b96e:	bf00      	nop
 800b970:	bf00      	nop
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <LED_Notification_Blink_Red>:

void LED_Notification_Blink_Red(int count) {
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]

	/*
	 * Rapid blink notification
	 */

	for (i = 0; i < count; i++) {
 800b980:	2300      	movs	r3, #0
 800b982:	60fb      	str	r3, [r7, #12]
 800b984:	e00e      	b.n	800b9a4 <LED_Notification_Blink_Red+0x2c>
		BSP_LED_On(LED6);
 800b986:	2000      	movs	r0, #0
 800b988:	f7f5 fb40 	bl	800100c <BSP_LED_On>

		HAL_Delay(20);
 800b98c:	2014      	movs	r0, #20
 800b98e:	f7f9 f951 	bl	8004c34 <HAL_Delay>
		BSP_LED_Off(LED6);
 800b992:	2000      	movs	r0, #0
 800b994:	f7f5 fb58 	bl	8001048 <BSP_LED_Off>

		HAL_Delay(50);
 800b998:	2032      	movs	r0, #50	@ 0x32
 800b99a:	f7f9 f94b 	bl	8004c34 <HAL_Delay>
	for (i = 0; i < count; i++) {
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	60fb      	str	r3, [r7, #12]
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	dbec      	blt.n	800b986 <LED_Notification_Blink_Red+0xe>
	}
}
 800b9ac:	bf00      	nop
 800b9ae:	bf00      	nop
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <BP_ANN>:

void BP_ANN(ANN *net, float *input, float *output, float *weights, float *velocity, float *bias, float *delta, int depth){
 800b9b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ba:	ed2d 8b02 	vpush	{d8}
 800b9be:	b0af      	sub	sp, #188	@ 0xbc
 800b9c0:	af04      	add	r7, sp, #16
 800b9c2:	6578      	str	r0, [r7, #84]	@ 0x54
 800b9c4:	6539      	str	r1, [r7, #80]	@ 0x50
 800b9c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b9c8:	64bb      	str	r3, [r7, #72]	@ 0x48
	unsigned int i,j;
	unsigned int DIM[2] = {net->topology[net->n_layers - depth], net->topology[net->n_layers - depth - 1]};
 800b9ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9cc:	68d9      	ldr	r1, [r3, #12]
 800b9ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9d0:	691a      	ldr	r2, [r3, #16]
 800b9d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	440b      	add	r3, r1
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b9e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9e2:	68d9      	ldr	r1, [r3, #12]
 800b9e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9e6:	691a      	ldr	r2, [r3, #16]
 800b9e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9ec:	1ad3      	subs	r3, r2, r3
 800b9ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	440b      	add	r3, r1
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	663b      	str	r3, [r7, #96]	@ 0x60

	if(depth == 1){
 800b9fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	f040 8185 	bne.w	800bd10 <BP_ANN+0x35a>
 800ba06:	466b      	mov	r3, sp
 800ba08:	461d      	mov	r5, r3
		for(i = 0; i < DIM[0]; i++){
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ba10:	e0c4      	b.n	800bb9c <BP_ANN+0x1e6>
			net->output[i] = 0.0;
 800ba12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba14:	69da      	ldr	r2, [r3, #28]
 800ba16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	f04f 0200 	mov.w	r2, #0
 800ba22:	601a      	str	r2, [r3, #0]
			for(j = 0; j < DIM[1]; j++){
 800ba24:	2300      	movs	r3, #0
 800ba26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ba2a:	e02c      	b.n	800ba86 <BP_ANN+0xd0>
				net->output[i] += weights[(DIM[1]*i)+j]*input[j];
 800ba2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba2e:	69da      	ldr	r2, [r3, #28]
 800ba30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	4413      	add	r3, r2
 800ba38:	ed93 7a00 	vldr	s14, [r3]
 800ba3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800ba42:	fb03 f202 	mul.w	r2, r3, r2
 800ba46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ba4a:	4413      	add	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba50:	4413      	add	r3, r2
 800ba52:	edd3 6a00 	vldr	s13, [r3]
 800ba56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ba5e:	4413      	add	r3, r2
 800ba60:	edd3 7a00 	vldr	s15, [r3]
 800ba64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba6a:	69da      	ldr	r2, [r3, #28]
 800ba6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	4413      	add	r3, r2
 800ba74:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba78:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 800ba7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ba80:	3301      	adds	r3, #1
 800ba82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ba86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba88:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d3cd      	bcc.n	800ba2c <BP_ANN+0x76>
			}
			net->output[i] = net->output[i] + bias[i];
 800ba90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba92:	69da      	ldr	r2, [r3, #28]
 800ba94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4413      	add	r3, r2
 800ba9c:	ed93 7a00 	vldr	s14, [r3]
 800baa0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800baaa:	4413      	add	r3, r2
 800baac:	edd3 7a00 	vldr	s15, [r3]
 800bab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bab2:	69da      	ldr	r2, [r3, #28]
 800bab4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	4413      	add	r3, r2
 800babc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bac0:	edc3 7a00 	vstr	s15, [r3]
			delta[i] = (output[i]-net->output_activation_function(net->output[i])) * net->output_activation_derivative(net->output[i]);
 800bac4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bacc:	4413      	add	r3, r2
 800bace:	ed93 8a00 	vldr	s16, [r3]
 800bad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bad4:	6a1b      	ldr	r3, [r3, #32]
 800bad6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bad8:	69d1      	ldr	r1, [r2, #28]
 800bada:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bade:	0092      	lsls	r2, r2, #2
 800bae0:	440a      	add	r2, r1
 800bae2:	edd2 7a00 	vldr	s15, [r2]
 800bae6:	eeb0 0a67 	vmov.f32	s0, s15
 800baea:	4798      	blx	r3
 800baec:	eef0 7a40 	vmov.f32	s15, s0
 800baf0:	ee38 8a67 	vsub.f32	s16, s16, s15
 800baf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800baf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baf8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bafa:	69d1      	ldr	r1, [r2, #28]
 800bafc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bb00:	0092      	lsls	r2, r2, #2
 800bb02:	440a      	add	r2, r1
 800bb04:	edd2 7a00 	vldr	s15, [r2]
 800bb08:	eeb0 0a67 	vmov.f32	s0, s15
 800bb0c:	4798      	blx	r3
 800bb0e:	eef0 7a40 	vmov.f32	s15, s0
 800bb12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bb1c:	4413      	add	r3, r2
 800bb1e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800bb22:	edc3 7a00 	vstr	s15, [r3]
			net->output[i] = net->output_activation_function(net->output[i]);
 800bb26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bb2c:	69d1      	ldr	r1, [r2, #28]
 800bb2e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bb32:	0092      	lsls	r2, r2, #2
 800bb34:	440a      	add	r2, r1
 800bb36:	edd2 7a00 	vldr	s15, [r2]
 800bb3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bb3c:	69d1      	ldr	r1, [r2, #28]
 800bb3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bb42:	0092      	lsls	r2, r2, #2
 800bb44:	188c      	adds	r4, r1, r2
 800bb46:	eeb0 0a67 	vmov.f32	s0, s15
 800bb4a:	4798      	blx	r3
 800bb4c:	eef0 7a40 	vmov.f32	s15, s0
 800bb50:	edc4 7a00 	vstr	s15, [r4]
			bias[i] = bias[i] + delta[i]*net->beta;
 800bb54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bb5e:	4413      	add	r3, r2
 800bb60:	ed93 7a00 	vldr	s14, [r3]
 800bb64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bb6e:	4413      	add	r3, r2
 800bb70:	edd3 6a00 	vldr	s13, [r3]
 800bb74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb76:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800bb7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bb88:	4413      	add	r3, r2
 800bb8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb8e:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 800bb92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb96:	3301      	adds	r3, #1
 800bb98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bb9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb9e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bba2:	429a      	cmp	r2, r3
 800bba4:	f4ff af35 	bcc.w	800ba12 <BP_ANN+0x5c>
		}

		float dEdW[DIM[0]*DIM[1]];
 800bba8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bbaa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bbac:	fb02 f103 	mul.w	r1, r2, r3
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	468a      	mov	sl, r1
 800bbba:	469b      	mov	fp, r3
 800bbbc:	f04f 0200 	mov.w	r2, #0
 800bbc0:	f04f 0300 	mov.w	r3, #0
 800bbc4:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800bbc8:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800bbcc:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	4688      	mov	r8, r1
 800bbd4:	4699      	mov	r9, r3
 800bbd6:	f04f 0200 	mov.w	r2, #0
 800bbda:	f04f 0300 	mov.w	r3, #0
 800bbde:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800bbe2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800bbe6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800bbea:	008b      	lsls	r3, r1, #2
 800bbec:	3307      	adds	r3, #7
 800bbee:	08db      	lsrs	r3, r3, #3
 800bbf0:	00db      	lsls	r3, r3, #3
 800bbf2:	ebad 0d03 	sub.w	sp, sp, r3
 800bbf6:	ab04      	add	r3, sp, #16
 800bbf8:	3303      	adds	r3, #3
 800bbfa:	089b      	lsrs	r3, r3, #2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	667b      	str	r3, [r7, #100]	@ 0x64
		for(i = 0; i < DIM[0]; i++){
 800bc00:	2300      	movs	r3, #0
 800bc02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bc06:	e030      	b.n	800bc6a <BP_ANN+0x2b4>
			for(j = 0; j < DIM[1]; j++){
 800bc08:	2300      	movs	r3, #0
 800bc0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bc0e:	e022      	b.n	800bc56 <BP_ANN+0x2a0>
				dEdW[(DIM[1]*i)+j] = delta[i]*input[j];
 800bc10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bc1a:	4413      	add	r3, r2
 800bc1c:	ed93 7a00 	vldr	s14, [r3]
 800bc20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc28:	4413      	add	r3, r2
 800bc2a:	edd3 7a00 	vldr	s15, [r3]
 800bc2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc30:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bc34:	fb03 f202 	mul.w	r2, r3, r2
 800bc38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc3c:	4413      	add	r3, r2
 800bc3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc42:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	4413      	add	r3, r2
 800bc48:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 800bc4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc50:	3301      	adds	r3, #1
 800bc52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bc56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc58:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d3d7      	bcc.n	800bc10 <BP_ANN+0x25a>
		for(i = 0; i < DIM[0]; i++){
 800bc60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc64:	3301      	adds	r3, #1
 800bc66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bc6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc6c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d3c9      	bcc.n	800bc08 <BP_ANN+0x252>
			}
		}
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 800bc74:	2300      	movs	r3, #0
 800bc76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bc7a:	e03f      	b.n	800bcfc <BP_ANN+0x346>
			velocity[i] = dEdW[i]*net->eta - velocity[i]*net->alpha;
 800bc7c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bc7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	4413      	add	r3, r2
 800bc86:	ed93 7a00 	vldr	s14, [r3]
 800bc8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc8c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800bc90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800bc9e:	4413      	add	r3, r2
 800bca0:	edd3 6a00 	vldr	s13, [r3]
 800bca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bca6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800bcaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bcae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800bcb8:	4413      	add	r3, r2
 800bcba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcbe:	edc3 7a00 	vstr	s15, [r3]
			weights[i] = weights[i] + velocity[i];
 800bcc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bcca:	4413      	add	r3, r2
 800bccc:	ed93 7a00 	vldr	s14, [r3]
 800bcd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800bcda:	4413      	add	r3, r2
 800bcdc:	edd3 7a00 	vldr	s15, [r3]
 800bce0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bce8:	4413      	add	r3, r2
 800bcea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcee:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 800bcf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bcfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcfe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bd00:	fb02 f303 	mul.w	r3, r2, r3
 800bd04:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d3b7      	bcc.n	800bc7c <BP_ANN+0x2c6>
 800bd0c:	46ad      	mov	sp, r5
 800bd0e:	e305      	b.n	800c31c <BP_ANN+0x966>
		}
		return;
	}
	else{
 800bd10:	466b      	mov	r3, sp
 800bd12:	461e      	mov	r6, r3
		float a[DIM[0]];
 800bd14:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800bd16:	460b      	mov	r3, r1
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bd1e:	2300      	movs	r3, #0
 800bd20:	460c      	mov	r4, r1
 800bd22:	461d      	mov	r5, r3
 800bd24:	f04f 0200 	mov.w	r2, #0
 800bd28:	f04f 0300 	mov.w	r3, #0
 800bd2c:	016b      	lsls	r3, r5, #5
 800bd2e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800bd32:	0162      	lsls	r2, r4, #5
 800bd34:	2300      	movs	r3, #0
 800bd36:	6439      	str	r1, [r7, #64]	@ 0x40
 800bd38:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd3a:	f04f 0200 	mov.w	r2, #0
 800bd3e:	f04f 0300 	mov.w	r3, #0
 800bd42:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800bd46:	4628      	mov	r0, r5
 800bd48:	0143      	lsls	r3, r0, #5
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bd50:	4620      	mov	r0, r4
 800bd52:	0142      	lsls	r2, r0, #5
 800bd54:	008b      	lsls	r3, r1, #2
 800bd56:	3307      	adds	r3, #7
 800bd58:	08db      	lsrs	r3, r3, #3
 800bd5a:	00db      	lsls	r3, r3, #3
 800bd5c:	ebad 0d03 	sub.w	sp, sp, r3
 800bd60:	ab04      	add	r3, sp, #16
 800bd62:	3303      	adds	r3, #3
 800bd64:	089b      	lsrs	r3, r3, #2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		float d[DIM[0]];
 800bd6c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800bd6e:	460b      	mov	r3, r1
 800bd70:	3b01      	subs	r3, #1
 800bd72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bd76:	2300      	movs	r3, #0
 800bd78:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd7c:	f04f 0200 	mov.w	r2, #0
 800bd80:	f04f 0300 	mov.w	r3, #0
 800bd84:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800bd88:	4628      	mov	r0, r5
 800bd8a:	0143      	lsls	r3, r0, #5
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bd92:	4620      	mov	r0, r4
 800bd94:	0142      	lsls	r2, r0, #5
 800bd96:	2300      	movs	r3, #0
 800bd98:	6339      	str	r1, [r7, #48]	@ 0x30
 800bd9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd9c:	f04f 0200 	mov.w	r2, #0
 800bda0:	f04f 0300 	mov.w	r3, #0
 800bda4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800bda8:	4628      	mov	r0, r5
 800bdaa:	0143      	lsls	r3, r0, #5
 800bdac:	4620      	mov	r0, r4
 800bdae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	0142      	lsls	r2, r0, #5
 800bdb6:	008b      	lsls	r3, r1, #2
 800bdb8:	3307      	adds	r3, #7
 800bdba:	08db      	lsrs	r3, r3, #3
 800bdbc:	00db      	lsls	r3, r3, #3
 800bdbe:	ebad 0d03 	sub.w	sp, sp, r3
 800bdc2:	ab04      	add	r3, sp, #16
 800bdc4:	3303      	adds	r3, #3
 800bdc6:	089b      	lsrs	r3, r3, #2
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

		for(i = 0; i < DIM[0]; i++){
 800bdce:	2300      	movs	r3, #0
 800bdd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bdd4:	e08b      	b.n	800beee <BP_ANN+0x538>
			a[i] = 0.0;
 800bdd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bdda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	441a      	add	r2, r3
 800bde2:	f04f 0300 	mov.w	r3, #0
 800bde6:	6013      	str	r3, [r2, #0]
			for(j = 0; j < DIM[1]; j++){
 800bde8:	2300      	movs	r3, #0
 800bdea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bdee:	e02c      	b.n	800be4a <BP_ANN+0x494>
				a[i] += weights[(DIM[1]*i)+j]*input[j];
 800bdf0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bdf4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	4413      	add	r3, r2
 800bdfc:	ed93 7a00 	vldr	s14, [r3]
 800be00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800be02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800be06:	fb03 f202 	mul.w	r2, r3, r2
 800be0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be0e:	4413      	add	r3, r2
 800be10:	009a      	lsls	r2, r3, #2
 800be12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be14:	4413      	add	r3, r2
 800be16:	edd3 6a00 	vldr	s13, [r3]
 800be1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be1e:	009a      	lsls	r2, r3, #2
 800be20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be22:	4413      	add	r3, r2
 800be24:	edd3 7a00 	vldr	s15, [r3]
 800be28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800be34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	4413      	add	r3, r2
 800be3c:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 800be40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be44:	3301      	adds	r3, #1
 800be46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800be4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800be4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be50:	4293      	cmp	r3, r2
 800be52:	d3cd      	bcc.n	800bdf0 <BP_ANN+0x43a>
			}
			a[i] += bias[i];
 800be54:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800be58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	4413      	add	r3, r2
 800be60:	ed93 7a00 	vldr	s14, [r3]
 800be64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800be68:	009a      	lsls	r2, r3, #2
 800be6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be6e:	4413      	add	r3, r2
 800be70:	edd3 7a00 	vldr	s15, [r3]
 800be74:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be78:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800be7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4413      	add	r3, r2
 800be84:	edc3 7a00 	vstr	s15, [r3]
			d[i] = net->hidden_activation_derivative(a[i]);
 800be88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800be8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800be90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4413      	add	r3, r2
 800be98:	edd3 7a00 	vldr	s15, [r3]
 800be9c:	eeb0 0a67 	vmov.f32	s0, s15
 800bea0:	4788      	blx	r1
 800bea2:	eef0 7a40 	vmov.f32	s15, s0
 800bea6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800beaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	4413      	add	r3, r2
 800beb2:	edc3 7a00 	vstr	s15, [r3]
			a[i] = net->hidden_activation_function(a[i]);
 800beb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800beb8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800beba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4413      	add	r3, r2
 800bec6:	edd3 7a00 	vldr	s15, [r3]
 800beca:	eeb0 0a67 	vmov.f32	s0, s15
 800bece:	4788      	blx	r1
 800bed0:	eef0 7a40 	vmov.f32	s15, s0
 800bed4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bed8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	4413      	add	r3, r2
 800bee0:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 800bee4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bee8:	3301      	adds	r3, #1
 800beea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800beee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bef0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bef4:	4293      	cmp	r3, r2
 800bef6:	f4ff af6e 	bcc.w	800bdd6 <BP_ANN+0x420>
		}

		unsigned int DIM1 = net->topology[net->n_layers - depth + 1];
 800befa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800befc:	68d9      	ldr	r1, [r3, #12]
 800befe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf00:	691a      	ldr	r2, [r3, #16]
 800bf02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	3301      	adds	r3, #1
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	440b      	add	r3, r1
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

		float prev_delta[DIM1];
 800bf14:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800bf18:	460b      	mov	r3, r1
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bf20:	2300      	movs	r3, #0
 800bf22:	62b9      	str	r1, [r7, #40]	@ 0x28
 800bf24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf26:	f04f 0200 	mov.w	r2, #0
 800bf2a:	f04f 0300 	mov.w	r3, #0
 800bf2e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800bf32:	4628      	mov	r0, r5
 800bf34:	0143      	lsls	r3, r0, #5
 800bf36:	4620      	mov	r0, r4
 800bf38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	0142      	lsls	r2, r0, #5
 800bf40:	2300      	movs	r3, #0
 800bf42:	6239      	str	r1, [r7, #32]
 800bf44:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf46:	f04f 0200 	mov.w	r2, #0
 800bf4a:	f04f 0300 	mov.w	r3, #0
 800bf4e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800bf52:	4628      	mov	r0, r5
 800bf54:	0143      	lsls	r3, r0, #5
 800bf56:	4620      	mov	r0, r4
 800bf58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	0142      	lsls	r2, r0, #5
 800bf60:	008b      	lsls	r3, r1, #2
 800bf62:	3307      	adds	r3, #7
 800bf64:	08db      	lsrs	r3, r3, #3
 800bf66:	00db      	lsls	r3, r3, #3
 800bf68:	ebad 0d03 	sub.w	sp, sp, r3
 800bf6c:	ab04      	add	r3, sp, #16
 800bf6e:	3303      	adds	r3, #3
 800bf70:	089b      	lsrs	r3, r3, #2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		unsigned int weight_iter = DIM[0] * DIM[1];
 800bf78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf7a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bf7c:	fb02 f303 	mul.w	r3, r2, r3
 800bf80:	67fb      	str	r3, [r7, #124]	@ 0x7c

		float next_weights_T[DIM[0]*DIM1];
 800bf82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf84:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800bf88:	fb02 f103 	mul.w	r1, r2, r3
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bf92:	2300      	movs	r3, #0
 800bf94:	61b9      	str	r1, [r7, #24]
 800bf96:	61fb      	str	r3, [r7, #28]
 800bf98:	f04f 0200 	mov.w	r2, #0
 800bf9c:	f04f 0300 	mov.w	r3, #0
 800bfa0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	0143      	lsls	r3, r0, #5
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bfae:	4620      	mov	r0, r4
 800bfb0:	0142      	lsls	r2, r0, #5
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	6139      	str	r1, [r7, #16]
 800bfb6:	617b      	str	r3, [r7, #20]
 800bfb8:	f04f 0200 	mov.w	r2, #0
 800bfbc:	f04f 0300 	mov.w	r3, #0
 800bfc0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	0143      	lsls	r3, r0, #5
 800bfc8:	4620      	mov	r0, r4
 800bfca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bfce:	4620      	mov	r0, r4
 800bfd0:	0142      	lsls	r2, r0, #5
 800bfd2:	008b      	lsls	r3, r1, #2
 800bfd4:	3307      	adds	r3, #7
 800bfd6:	08db      	lsrs	r3, r3, #3
 800bfd8:	00db      	lsls	r3, r3, #3
 800bfda:	ebad 0d03 	sub.w	sp, sp, r3
 800bfde:	ab04      	add	r3, sp, #16
 800bfe0:	3303      	adds	r3, #3
 800bfe2:	089b      	lsrs	r3, r3, #2
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	677b      	str	r3, [r7, #116]	@ 0x74
		unsigned int iter = 0;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for(i = 0; i < DIM[0]; i++){
 800bfee:	2300      	movs	r3, #0
 800bff0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bff4:	e02c      	b.n	800c050 <BP_ANN+0x69a>
			for(j = 0; j < DIM1; j++){
 800bff6:	2300      	movs	r3, #0
 800bff8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bffc:	e01d      	b.n	800c03a <BP_ANN+0x684>
				next_weights_T[iter] = weights[(DIM[0]*j)+i+weight_iter];
 800bffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c000:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800c004:	fb03 f202 	mul.w	r2, r3, r2
 800c008:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c00c:	441a      	add	r2, r3
 800c00e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c010:	4413      	add	r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c016:	4413      	add	r3, r2
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c01c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	440b      	add	r3, r1
 800c024:	601a      	str	r2, [r3, #0]
				iter++;
 800c026:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c02a:	3301      	adds	r3, #1
 800c02c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			for(j = 0; j < DIM1; j++){
 800c030:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c034:	3301      	adds	r3, #1
 800c036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c03a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800c03e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c042:	429a      	cmp	r2, r3
 800c044:	d3db      	bcc.n	800bffe <BP_ANN+0x648>
		for(i = 0; i < DIM[0]; i++){
 800c046:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c04a:	3301      	adds	r3, #1
 800c04c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c052:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c056:	429a      	cmp	r2, r3
 800c058:	d3cd      	bcc.n	800bff6 <BP_ANN+0x640>
			}
		}

		BP_ANN(net, a, output, &weights[weight_iter], &velocity[weight_iter], &bias[DIM[0]], prev_delta, depth-1);
 800c05a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c060:	18d0      	adds	r0, r2, r3
 800c062:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c06a:	4413      	add	r3, r2
 800c06c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c06e:	0092      	lsls	r2, r2, #2
 800c070:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800c074:	440a      	add	r2, r1
 800c076:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800c07a:	3901      	subs	r1, #1
 800c07c:	9103      	str	r1, [sp, #12]
 800c07e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800c082:	9102      	str	r1, [sp, #8]
 800c084:	9201      	str	r2, [sp, #4]
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	4603      	mov	r3, r0
 800c08a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c08c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800c090:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c092:	f7ff fc90 	bl	800b9b6 <BP_ANN>

		for(i = 0; i < DIM[0]; i++){
 800c096:	2300      	movs	r3, #0
 800c098:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c09c:	e07f      	b.n	800c19e <BP_ANN+0x7e8>
			delta[i] = 0;
 800c09e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c0a8:	4413      	add	r3, r2
 800c0aa:	f04f 0200 	mov.w	r2, #0
 800c0ae:	601a      	str	r2, [r3, #0]
			for(j = 0; j < DIM1; j++){
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c0b6:	e02e      	b.n	800c116 <BP_ANN+0x760>
				delta[i] += next_weights_T[(DIM1*i)+j]*prev_delta[j];
 800c0b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c0c2:	4413      	add	r3, r2
 800c0c4:	ed93 7a00 	vldr	s14, [r3]
 800c0c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c0cc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c0d0:	fb03 f202 	mul.w	r2, r3, r2
 800c0d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c0d8:	4413      	add	r3, r2
 800c0da:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	4413      	add	r3, r2
 800c0e0:	edd3 6a00 	vldr	s13, [r3]
 800c0e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c0e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	4413      	add	r3, r2
 800c0f0:	edd3 7a00 	vldr	s15, [r3]
 800c0f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c102:	4413      	add	r3, r2
 800c104:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c108:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM1; j++){
 800c10c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c110:	3301      	adds	r3, #1
 800c112:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c116:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800c11a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c11e:	429a      	cmp	r2, r3
 800c120:	d3ca      	bcc.n	800c0b8 <BP_ANN+0x702>
			}
			delta[i] = delta[i]*d[i];
 800c122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c12c:	4413      	add	r3, r2
 800c12e:	ed93 7a00 	vldr	s14, [r3]
 800c132:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	4413      	add	r3, r2
 800c13e:	edd3 7a00 	vldr	s15, [r3]
 800c142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c14c:	4413      	add	r3, r2
 800c14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c152:	edc3 7a00 	vstr	s15, [r3]
			bias[i] = bias[i] + delta[i]*net->beta;
 800c156:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c160:	4413      	add	r3, r2
 800c162:	ed93 7a00 	vldr	s14, [r3]
 800c166:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c170:	4413      	add	r3, r2
 800c172:	edd3 6a00 	vldr	s13, [r3]
 800c176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c178:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800c17c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c180:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c18a:	4413      	add	r3, r2
 800c18c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c190:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 800c194:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c198:	3301      	adds	r3, #1
 800c19a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c19e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	f4ff af7a 	bcc.w	800c09e <BP_ANN+0x6e8>
		}
		float dEdW[DIM[0]*DIM[1]];
 800c1aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c1ae:	fb02 f103 	mul.w	r1, r2, r3
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	673b      	str	r3, [r7, #112]	@ 0x70
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60b9      	str	r1, [r7, #8]
 800c1bc:	60fb      	str	r3, [r7, #12]
 800c1be:	f04f 0200 	mov.w	r2, #0
 800c1c2:	f04f 0300 	mov.w	r3, #0
 800c1c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	0143      	lsls	r3, r0, #5
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	0142      	lsls	r2, r0, #5
 800c1d8:	2300      	movs	r3, #0
 800c1da:	6039      	str	r1, [r7, #0]
 800c1dc:	607b      	str	r3, [r7, #4]
 800c1de:	f04f 0200 	mov.w	r2, #0
 800c1e2:	f04f 0300 	mov.w	r3, #0
 800c1e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	0143      	lsls	r3, r0, #5
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	0142      	lsls	r2, r0, #5
 800c1f8:	008b      	lsls	r3, r1, #2
 800c1fa:	3307      	adds	r3, #7
 800c1fc:	08db      	lsrs	r3, r3, #3
 800c1fe:	00db      	lsls	r3, r3, #3
 800c200:	ebad 0d03 	sub.w	sp, sp, r3
 800c204:	ab04      	add	r3, sp, #16
 800c206:	3303      	adds	r3, #3
 800c208:	089b      	lsrs	r3, r3, #2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	66fb      	str	r3, [r7, #108]	@ 0x6c
		for(i = 0; i < DIM[0]; i++){
 800c20e:	2300      	movs	r3, #0
 800c210:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c214:	e030      	b.n	800c278 <BP_ANN+0x8c2>
			for(j = 0; j < DIM[1]; j++){
 800c216:	2300      	movs	r3, #0
 800c218:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c21c:	e022      	b.n	800c264 <BP_ANN+0x8ae>
				dEdW[(DIM[1]*i)+j] = delta[i]*input[j];
 800c21e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c228:	4413      	add	r3, r2
 800c22a:	ed93 7a00 	vldr	s14, [r3]
 800c22e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c236:	4413      	add	r3, r2
 800c238:	edd3 7a00 	vldr	s15, [r3]
 800c23c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c23e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c242:	fb03 f202 	mul.w	r2, r3, r2
 800c246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c24a:	4413      	add	r3, r2
 800c24c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c250:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	4413      	add	r3, r2
 800c256:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 800c25a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c25e:	3301      	adds	r3, #1
 800c260:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c264:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c266:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d3d7      	bcc.n	800c21e <BP_ANN+0x868>
		for(i = 0; i < DIM[0]; i++){
 800c26e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c272:	3301      	adds	r3, #1
 800c274:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c278:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c27a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c27e:	429a      	cmp	r2, r3
 800c280:	d3c9      	bcc.n	800c216 <BP_ANN+0x860>
			}
		}
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 800c282:	2300      	movs	r3, #0
 800c284:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c288:	e03f      	b.n	800c30a <BP_ANN+0x954>
			velocity[i] = dEdW[i]*net->eta - velocity[i]*net->alpha;
 800c28a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c28c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	4413      	add	r3, r2
 800c294:	ed93 7a00 	vldr	s14, [r3]
 800c298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c29a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800c29e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c2ac:	4413      	add	r3, r2
 800c2ae:	edd3 6a00 	vldr	s13, [r3]
 800c2b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2b4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800c2b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c2c6:	4413      	add	r3, r2
 800c2c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2cc:	edc3 7a00 	vstr	s15, [r3]
			weights[i] = weights[i] + velocity[i];
 800c2d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2d8:	4413      	add	r3, r2
 800c2da:	ed93 7a00 	vldr	s14, [r3]
 800c2de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c2e8:	4413      	add	r3, r2
 800c2ea:	edd3 7a00 	vldr	s15, [r3]
 800c2ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2f6:	4413      	add	r3, r2
 800c2f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2fc:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 800c300:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c304:	3301      	adds	r3, #1
 800c306:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c30a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c30c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c30e:	fb02 f303 	mul.w	r3, r2, r3
 800c312:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c316:	429a      	cmp	r2, r3
 800c318:	d3b7      	bcc.n	800c28a <BP_ANN+0x8d4>
 800c31a:	46b5      	mov	sp, r6
		}
		return;
	}
}
 800c31c:	37ac      	adds	r7, #172	@ 0xac
 800c31e:	46bd      	mov	sp, r7
 800c320:	ecbd 8b02 	vpop	{d8}
 800c324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c328 <train_ann>:

//-----ANN-----


void train_ann(ANN *net, float *input, float *output){
 800c328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c32c:	b08b      	sub	sp, #44	@ 0x2c
 800c32e:	af04      	add	r7, sp, #16
 800c330:	60f8      	str	r0, [r7, #12]
 800c332:	60b9      	str	r1, [r7, #8]
 800c334:	607a      	str	r2, [r7, #4]
 800c336:	466b      	mov	r3, sp
 800c338:	461e      	mov	r6, r3
	float delta[net->topology[1]];
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	3304      	adds	r3, #4
 800c340:	6819      	ldr	r1, [r3, #0]
 800c342:	460b      	mov	r3, r1
 800c344:	3b01      	subs	r3, #1
 800c346:	617b      	str	r3, [r7, #20]
 800c348:	2300      	movs	r3, #0
 800c34a:	4688      	mov	r8, r1
 800c34c:	4699      	mov	r9, r3
 800c34e:	f04f 0200 	mov.w	r2, #0
 800c352:	f04f 0300 	mov.w	r3, #0
 800c356:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800c35a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800c35e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800c362:	2300      	movs	r3, #0
 800c364:	460c      	mov	r4, r1
 800c366:	461d      	mov	r5, r3
 800c368:	f04f 0200 	mov.w	r2, #0
 800c36c:	f04f 0300 	mov.w	r3, #0
 800c370:	016b      	lsls	r3, r5, #5
 800c372:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800c376:	0162      	lsls	r2, r4, #5
 800c378:	008b      	lsls	r3, r1, #2
 800c37a:	3307      	adds	r3, #7
 800c37c:	08db      	lsrs	r3, r3, #3
 800c37e:	00db      	lsls	r3, r3, #3
 800c380:	ebad 0d03 	sub.w	sp, sp, r3
 800c384:	ab04      	add	r3, sp, #16
 800c386:	3303      	adds	r3, #3
 800c388:	089b      	lsrs	r3, r3, #2
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	613b      	str	r3, [r7, #16]
	BP_ANN(net, input, output, net->weights, net->dedw, net->bias, delta, net->n_layers-1);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6818      	ldr	r0, [r3, #0]
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	68fa      	ldr	r2, [r7, #12]
 800c398:	6892      	ldr	r2, [r2, #8]
 800c39a:	68f9      	ldr	r1, [r7, #12]
 800c39c:	6909      	ldr	r1, [r1, #16]
 800c39e:	3901      	subs	r1, #1
 800c3a0:	9103      	str	r1, [sp, #12]
 800c3a2:	6939      	ldr	r1, [r7, #16]
 800c3a4:	9102      	str	r1, [sp, #8]
 800c3a6:	9201      	str	r2, [sp, #4]
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	68b9      	ldr	r1, [r7, #8]
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f7ff fb00 	bl	800b9b6 <BP_ANN>
 800c3b6:	46b5      	mov	sp, r6
}
 800c3b8:	bf00      	nop
 800c3ba:	371c      	adds	r7, #28
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c3c2 <FP_ANN>:

void FP_ANN(ANN *net, float *input, unsigned int depth, float *weights){
 800c3c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3c6:	b08b      	sub	sp, #44	@ 0x2c
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
 800c3d0:	603b      	str	r3, [r7, #0]
	unsigned int DIM[2] = {net->topology[net->n_layers - depth], net->topology[net->n_layers - depth - 1]};
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	68da      	ldr	r2, [r3, #12]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	6919      	ldr	r1, [r3, #16]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	1acb      	subs	r3, r1, r3
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	4413      	add	r3, r2
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	613b      	str	r3, [r7, #16]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	68da      	ldr	r2, [r3, #12]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	6919      	ldr	r1, [r3, #16]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	1acb      	subs	r3, r1, r3
 800c3f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	617b      	str	r3, [r7, #20]
	unsigned int i,k;

	if(depth == 1){
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d15d      	bne.n	800c4c2 <FP_ANN+0x100>
		for(i = 0; i < DIM[0]; i++){
 800c406:	2300      	movs	r3, #0
 800c408:	627b      	str	r3, [r7, #36]	@ 0x24
 800c40a:	e055      	b.n	800c4b8 <FP_ANN+0xf6>
			net->output[i] = 0.0;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	69da      	ldr	r2, [r3, #28]
 800c410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	4413      	add	r3, r2
 800c416:	f04f 0200 	mov.w	r2, #0
 800c41a:	601a      	str	r2, [r3, #0]
			for(k = 0; k < DIM[1]; k++){
 800c41c:	2300      	movs	r3, #0
 800c41e:	623b      	str	r3, [r7, #32]
 800c420:	e025      	b.n	800c46e <FP_ANN+0xac>
				net->output[i] += weights[(DIM[1]*i)+k]*input[k];
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	69da      	ldr	r2, [r3, #28]
 800c426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	4413      	add	r3, r2
 800c42c:	ed93 7a00 	vldr	s14, [r3]
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c434:	fb03 f202 	mul.w	r2, r3, r2
 800c438:	6a3b      	ldr	r3, [r7, #32]
 800c43a:	4413      	add	r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	683a      	ldr	r2, [r7, #0]
 800c440:	4413      	add	r3, r2
 800c442:	edd3 6a00 	vldr	s13, [r3]
 800c446:	6a3b      	ldr	r3, [r7, #32]
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	4413      	add	r3, r2
 800c44e:	edd3 7a00 	vldr	s15, [r3]
 800c452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	69da      	ldr	r2, [r3, #28]
 800c45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	4413      	add	r3, r2
 800c460:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c464:	edc3 7a00 	vstr	s15, [r3]
			for(k = 0; k < DIM[1]; k++){
 800c468:	6a3b      	ldr	r3, [r7, #32]
 800c46a:	3301      	adds	r3, #1
 800c46c:	623b      	str	r3, [r7, #32]
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	6a3a      	ldr	r2, [r7, #32]
 800c472:	429a      	cmp	r2, r3
 800c474:	d3d5      	bcc.n	800c422 <FP_ANN+0x60>
			}
			net->output[i] = net->output_activation_function(net->output[i] + net->bias[i]);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	6a1b      	ldr	r3, [r3, #32]
 800c47a:	68fa      	ldr	r2, [r7, #12]
 800c47c:	69d1      	ldr	r1, [r2, #28]
 800c47e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c480:	0092      	lsls	r2, r2, #2
 800c482:	440a      	add	r2, r1
 800c484:	ed92 7a00 	vldr	s14, [r2]
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	6891      	ldr	r1, [r2, #8]
 800c48c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c48e:	0092      	lsls	r2, r2, #2
 800c490:	440a      	add	r2, r1
 800c492:	edd2 7a00 	vldr	s15, [r2]
 800c496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	69d1      	ldr	r1, [r2, #28]
 800c49e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4a0:	0092      	lsls	r2, r2, #2
 800c4a2:	188c      	adds	r4, r1, r2
 800c4a4:	eeb0 0a67 	vmov.f32	s0, s15
 800c4a8:	4798      	blx	r3
 800c4aa:	eef0 7a40 	vmov.f32	s15, s0
 800c4ae:	edc4 7a00 	vstr	s15, [r4]
		for(i = 0; i < DIM[0]; i++){
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d3a5      	bcc.n	800c40c <FP_ANN+0x4a>
		}
		return;
 800c4c0:	e090      	b.n	800c5e4 <FP_ANN+0x222>
	}
	else{
 800c4c2:	466b      	mov	r3, sp
 800c4c4:	461e      	mov	r6, r3
		float a[DIM[0]];
 800c4c6:	6939      	ldr	r1, [r7, #16]
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	61fb      	str	r3, [r7, #28]
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	4688      	mov	r8, r1
 800c4d2:	4699      	mov	r9, r3
 800c4d4:	f04f 0200 	mov.w	r2, #0
 800c4d8:	f04f 0300 	mov.w	r3, #0
 800c4dc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800c4e0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800c4e4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	461d      	mov	r5, r3
 800c4ee:	f04f 0200 	mov.w	r2, #0
 800c4f2:	f04f 0300 	mov.w	r3, #0
 800c4f6:	016b      	lsls	r3, r5, #5
 800c4f8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800c4fc:	0162      	lsls	r2, r4, #5
 800c4fe:	008b      	lsls	r3, r1, #2
 800c500:	3307      	adds	r3, #7
 800c502:	08db      	lsrs	r3, r3, #3
 800c504:	00db      	lsls	r3, r3, #3
 800c506:	ebad 0d03 	sub.w	sp, sp, r3
 800c50a:	466b      	mov	r3, sp
 800c50c:	3303      	adds	r3, #3
 800c50e:	089b      	lsrs	r3, r3, #2
 800c510:	009b      	lsls	r3, r3, #2
 800c512:	61bb      	str	r3, [r7, #24]
		for(i = 0; i < DIM[0]; i++){
 800c514:	2300      	movs	r3, #0
 800c516:	627b      	str	r3, [r7, #36]	@ 0x24
 800c518:	e050      	b.n	800c5bc <FP_ANN+0x1fa>
			a[i] = 0.0;
 800c51a:	69ba      	ldr	r2, [r7, #24]
 800c51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	4413      	add	r3, r2
 800c522:	f04f 0200 	mov.w	r2, #0
 800c526:	601a      	str	r2, [r3, #0]
			for(k = 0; k < DIM[1]; k++){
 800c528:	2300      	movs	r3, #0
 800c52a:	623b      	str	r3, [r7, #32]
 800c52c:	e023      	b.n	800c576 <FP_ANN+0x1b4>
				a[i] += weights[(DIM[1]*i)+k]*input[k];
 800c52e:	69ba      	ldr	r2, [r7, #24]
 800c530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4413      	add	r3, r2
 800c536:	ed93 7a00 	vldr	s14, [r3]
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c53e:	fb03 f202 	mul.w	r2, r3, r2
 800c542:	6a3b      	ldr	r3, [r7, #32]
 800c544:	4413      	add	r3, r2
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	683a      	ldr	r2, [r7, #0]
 800c54a:	4413      	add	r3, r2
 800c54c:	edd3 6a00 	vldr	s13, [r3]
 800c550:	6a3b      	ldr	r3, [r7, #32]
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	68ba      	ldr	r2, [r7, #8]
 800c556:	4413      	add	r3, r2
 800c558:	edd3 7a00 	vldr	s15, [r3]
 800c55c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c560:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c564:	69ba      	ldr	r2, [r7, #24]
 800c566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	4413      	add	r3, r2
 800c56c:	edc3 7a00 	vstr	s15, [r3]
			for(k = 0; k < DIM[1]; k++){
 800c570:	6a3b      	ldr	r3, [r7, #32]
 800c572:	3301      	adds	r3, #1
 800c574:	623b      	str	r3, [r7, #32]
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	6a3a      	ldr	r2, [r7, #32]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d3d7      	bcc.n	800c52e <FP_ANN+0x16c>
			}
			a[i] = net->hidden_activation_function(a[i] + net->bias[i]);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c582:	69b9      	ldr	r1, [r7, #24]
 800c584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c586:	0092      	lsls	r2, r2, #2
 800c588:	440a      	add	r2, r1
 800c58a:	ed92 7a00 	vldr	s14, [r2]
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	6891      	ldr	r1, [r2, #8]
 800c592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c594:	0092      	lsls	r2, r2, #2
 800c596:	440a      	add	r2, r1
 800c598:	edd2 7a00 	vldr	s15, [r2]
 800c59c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5a0:	eeb0 0a67 	vmov.f32	s0, s15
 800c5a4:	4798      	blx	r3
 800c5a6:	eef0 7a40 	vmov.f32	s15, s0
 800c5aa:	69ba      	ldr	r2, [r7, #24]
 800c5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 800c5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d3aa      	bcc.n	800c51a <FP_ANN+0x158>
			//if(depth == 2) printf("%f,", a[i]);
		}
		//if(depth == 2) printf("0\n");
		FP_ANN(net, a, depth-1, &weights[DIM[0]*DIM[1]]);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	1e59      	subs	r1, r3, #1
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	697a      	ldr	r2, [r7, #20]
 800c5cc:	fb02 f303 	mul.w	r3, r2, r3
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	683a      	ldr	r2, [r7, #0]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	460a      	mov	r2, r1
 800c5d8:	69b9      	ldr	r1, [r7, #24]
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f7ff fef1 	bl	800c3c2 <FP_ANN>
 800c5e0:	46b5      	mov	sp, r6
	}
	return;
 800c5e2:	bf00      	nop
}
 800c5e4:	372c      	adds	r7, #44	@ 0x2c
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c5ec <run_ann>:

void run_ann(ANN *net, float *input){
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
	FP_ANN(net, input, net->n_layers-1, net->weights);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	1e5a      	subs	r2, r3, #1
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	6839      	ldr	r1, [r7, #0]
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7ff fedd 	bl	800c3c2 <FP_ANN>
}
 800c608:	bf00      	nop
 800c60a:	3708      	adds	r7, #8
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <init_ann>:

void init_ann(ANN *net){
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
	fill_number(net->bias, net->n_bias, 0.1);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	689a      	ldr	r2, [r3, #8]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	699b      	ldr	r3, [r3, #24]
 800c620:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800c688 <init_ann+0x78>
 800c624:	4619      	mov	r1, r3
 800c626:	4610      	mov	r0, r2
 800c628:	f000 f855 	bl	800c6d6 <fill_number>
	fill_zeros(net->dedw, net->n_weights);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	685a      	ldr	r2, [r3, #4]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	695b      	ldr	r3, [r3, #20]
 800c634:	4619      	mov	r1, r3
 800c636:	4610      	mov	r0, r2
 800c638:	f000 f830 	bl	800c69c <fill_zeros>

	if(net->output_activation_function == &relu) net->output_activation_derivative = &relu_derivative;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a1b      	ldr	r3, [r3, #32]
 800c640:	4a12      	ldr	r2, [pc, #72]	@ (800c68c <init_ann+0x7c>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d103      	bne.n	800c64e <init_ann+0x3e>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4a11      	ldr	r2, [pc, #68]	@ (800c690 <init_ann+0x80>)
 800c64a:	625a      	str	r2, [r3, #36]	@ 0x24
 800c64c:	e007      	b.n	800c65e <init_ann+0x4e>
	else if(net->output_activation_function == &relu2) net->output_activation_derivative = &relu2_derivative;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a1b      	ldr	r3, [r3, #32]
 800c652:	4a10      	ldr	r2, [pc, #64]	@ (800c694 <init_ann+0x84>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d102      	bne.n	800c65e <init_ann+0x4e>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a0f      	ldr	r2, [pc, #60]	@ (800c698 <init_ann+0x88>)
 800c65c:	625a      	str	r2, [r3, #36]	@ 0x24

	if(net->hidden_activation_function == &relu) net->hidden_activation_derivative = &relu_derivative;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c662:	4a0a      	ldr	r2, [pc, #40]	@ (800c68c <init_ann+0x7c>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d103      	bne.n	800c670 <init_ann+0x60>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4a09      	ldr	r2, [pc, #36]	@ (800c690 <init_ann+0x80>)
 800c66c:	62da      	str	r2, [r3, #44]	@ 0x2c
	else if(net->hidden_activation_function == &relu2) net->hidden_activation_derivative = &relu2_derivative;
}
 800c66e:	e007      	b.n	800c680 <init_ann+0x70>
	else if(net->hidden_activation_function == &relu2) net->hidden_activation_derivative = &relu2_derivative;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c674:	4a07      	ldr	r2, [pc, #28]	@ (800c694 <init_ann+0x84>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d102      	bne.n	800c680 <init_ann+0x70>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a06      	ldr	r2, [pc, #24]	@ (800c698 <init_ann+0x88>)
 800c67e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800c680:	bf00      	nop
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	3dcccccd 	.word	0x3dcccccd
 800c68c:	0800c719 	.word	0x0800c719
 800c690:	0800c859 	.word	0x0800c859
 800c694:	0800c7a1 	.word	0x0800c7a1
 800c698:	0800c8a9 	.word	0x0800c8a9

0800c69c <fill_zeros>:
	if(net->hidden_activation_function == &relu) net->hidden_activation_derivative = &relu_derivative;
	else if(net->hidden_activation_function == &relu2) net->hidden_activation_derivative = &relu2_derivative;
}

//-----Utility-----
void fill_zeros(float *v, unsigned int size){
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i < size; i++){ v[i] = 0.0; }
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	60fb      	str	r3, [r7, #12]
 800c6aa:	e009      	b.n	800c6c0 <fill_zeros+0x24>
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f04f 0200 	mov.w	r2, #0
 800c6b8:	601a      	str	r2, [r3, #0]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	60fb      	str	r3, [r7, #12]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d8f1      	bhi.n	800c6ac <fill_zeros+0x10>
}
 800c6c8:	bf00      	nop
 800c6ca:	bf00      	nop
 800c6cc:	3714      	adds	r7, #20
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr

0800c6d6 <fill_number>:
void fill_number(float *v, unsigned int size, float number){
 800c6d6:	b480      	push	{r7}
 800c6d8:	b087      	sub	sp, #28
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	60f8      	str	r0, [r7, #12]
 800c6de:	60b9      	str	r1, [r7, #8]
 800c6e0:	ed87 0a01 	vstr	s0, [r7, #4]
	int i;
	for(i = 0; i < size; i++){ v[i] = number; }
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	617b      	str	r3, [r7, #20]
 800c6e8:	e008      	b.n	800c6fc <fill_number+0x26>
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	601a      	str	r2, [r3, #0]
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	617b      	str	r3, [r7, #20]
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	68ba      	ldr	r2, [r7, #8]
 800c700:	429a      	cmp	r2, r3
 800c702:	d8f2      	bhi.n	800c6ea <fill_number+0x14>
}
 800c704:	bf00      	nop
 800c706:	bf00      	nop
 800c708:	371c      	adds	r7, #28
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
 800c712:	0000      	movs	r0, r0
 800c714:	0000      	movs	r0, r0
	...

0800c718 <relu>:

//-----Activation Functions-----
float relu(float x){
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < 0.0) return 0.0;
 800c722:	edd7 7a01 	vldr	s15, [r7, #4]
 800c726:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c72e:	d502      	bpl.n	800c736 <relu+0x1e>
 800c730:	f04f 0300 	mov.w	r3, #0
 800c734:	e022      	b.n	800c77c <relu+0x64>
	else if(x > 1.0) return 0.1*x+0.93;
 800c736:	edd7 7a01 	vldr	s15, [r7, #4]
 800c73a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c73e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c746:	dd18      	ble.n	800c77a <relu+0x62>
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f7f3 ff01 	bl	8000550 <__aeabi_f2d>
 800c74e:	a310      	add	r3, pc, #64	@ (adr r3, 800c790 <relu+0x78>)
 800c750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c754:	f7f3 ff54 	bl	8000600 <__aeabi_dmul>
 800c758:	4602      	mov	r2, r0
 800c75a:	460b      	mov	r3, r1
 800c75c:	4610      	mov	r0, r2
 800c75e:	4619      	mov	r1, r3
 800c760:	a30d      	add	r3, pc, #52	@ (adr r3, 800c798 <relu+0x80>)
 800c762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c766:	f7f3 fd95 	bl	8000294 <__adddf3>
 800c76a:	4602      	mov	r2, r0
 800c76c:	460b      	mov	r3, r1
 800c76e:	4610      	mov	r0, r2
 800c770:	4619      	mov	r1, r3
 800c772:	f7f4 fa1d 	bl	8000bb0 <__aeabi_d2f>
 800c776:	4603      	mov	r3, r0
 800c778:	e000      	b.n	800c77c <relu+0x64>
	return x;
 800c77a:	687b      	ldr	r3, [r7, #4]
}
 800c77c:	ee07 3a90 	vmov	s15, r3
 800c780:	eeb0 0a67 	vmov.f32	s0, s15
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	f3af 8000 	nop.w
 800c790:	9999999a 	.word	0x9999999a
 800c794:	3fb99999 	.word	0x3fb99999
 800c798:	5c28f5c3 	.word	0x5c28f5c3
 800c79c:	3fedc28f 	.word	0x3fedc28f

0800c7a0 <relu2>:

//Similar to Tanh
float relu2(float x){
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < -1.0)     return 0.1*x-0.93;
 800c7aa:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7ae:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c7b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ba:	d518      	bpl.n	800c7ee <relu2+0x4e>
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7f3 fec7 	bl	8000550 <__aeabi_f2d>
 800c7c2:	a321      	add	r3, pc, #132	@ (adr r3, 800c848 <relu2+0xa8>)
 800c7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c8:	f7f3 ff1a 	bl	8000600 <__aeabi_dmul>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	4610      	mov	r0, r2
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	a31e      	add	r3, pc, #120	@ (adr r3, 800c850 <relu2+0xb0>)
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	f7f3 fd59 	bl	8000290 <__aeabi_dsub>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	f7f4 f9e3 	bl	8000bb0 <__aeabi_d2f>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	e022      	b.n	800c834 <relu2+0x94>
	else if(x > 1.0) return 0.1*x+0.93;
 800c7ee:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c7f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7fe:	dd18      	ble.n	800c832 <relu2+0x92>
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f7f3 fea5 	bl	8000550 <__aeabi_f2d>
 800c806:	a310      	add	r3, pc, #64	@ (adr r3, 800c848 <relu2+0xa8>)
 800c808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80c:	f7f3 fef8 	bl	8000600 <__aeabi_dmul>
 800c810:	4602      	mov	r2, r0
 800c812:	460b      	mov	r3, r1
 800c814:	4610      	mov	r0, r2
 800c816:	4619      	mov	r1, r3
 800c818:	a30d      	add	r3, pc, #52	@ (adr r3, 800c850 <relu2+0xb0>)
 800c81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81e:	f7f3 fd39 	bl	8000294 <__adddf3>
 800c822:	4602      	mov	r2, r0
 800c824:	460b      	mov	r3, r1
 800c826:	4610      	mov	r0, r2
 800c828:	4619      	mov	r1, r3
 800c82a:	f7f4 f9c1 	bl	8000bb0 <__aeabi_d2f>
 800c82e:	4603      	mov	r3, r0
 800c830:	e000      	b.n	800c834 <relu2+0x94>
	return x;
 800c832:	687b      	ldr	r3, [r7, #4]
}
 800c834:	ee07 3a90 	vmov	s15, r3
 800c838:	eeb0 0a67 	vmov.f32	s0, s15
 800c83c:	3708      	adds	r7, #8
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	f3af 8000 	nop.w
 800c848:	9999999a 	.word	0x9999999a
 800c84c:	3fb99999 	.word	0x3fb99999
 800c850:	5c28f5c3 	.word	0x5c28f5c3
 800c854:	3fedc28f 	.word	0x3fedc28f

0800c858 <relu_derivative>:

//-----Derivative Functions-----
float relu_derivative(float x){
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < 0.0) return 0.0;
 800c862:	edd7 7a01 	vldr	s15, [r7, #4]
 800c866:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c86e:	d502      	bpl.n	800c876 <relu_derivative+0x1e>
 800c870:	f04f 0300 	mov.w	r3, #0
 800c874:	e00c      	b.n	800c890 <relu_derivative+0x38>
	else if(x > 1.0) return 0.1;
 800c876:	edd7 7a01 	vldr	s15, [r7, #4]
 800c87a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c87e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c886:	dd01      	ble.n	800c88c <relu_derivative+0x34>
 800c888:	4b06      	ldr	r3, [pc, #24]	@ (800c8a4 <relu_derivative+0x4c>)
 800c88a:	e001      	b.n	800c890 <relu_derivative+0x38>
	return 1.0;
 800c88c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 800c890:	ee07 3a90 	vmov	s15, r3
 800c894:	eeb0 0a67 	vmov.f32	s0, s15
 800c898:	370c      	adds	r7, #12
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	3dcccccd 	.word	0x3dcccccd

0800c8a8 <relu2_derivative>:
float relu2_derivative(float x){
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < -1.0) return 0.1;
 800c8b2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8b6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c8ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8c2:	d501      	bpl.n	800c8c8 <relu2_derivative+0x20>
 800c8c4:	4b0b      	ldr	r3, [pc, #44]	@ (800c8f4 <relu2_derivative+0x4c>)
 800c8c6:	e00c      	b.n	800c8e2 <relu2_derivative+0x3a>
	else if(x > 1.0) return 0.1;
 800c8c8:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c8d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8d8:	dd01      	ble.n	800c8de <relu2_derivative+0x36>
 800c8da:	4b06      	ldr	r3, [pc, #24]	@ (800c8f4 <relu2_derivative+0x4c>)
 800c8dc:	e001      	b.n	800c8e2 <relu2_derivative+0x3a>
	return 1.0;
 800c8de:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 800c8e2:	ee07 3a90 	vmov	s15, r3
 800c8e6:	eeb0 0a67 	vmov.f32	s0, s15
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr
 800c8f4:	3dcccccd 	.word	0x3dcccccd

0800c8f8 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 800c8f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8fc:	f5ad 7d4a 	sub.w	sp, sp, #808	@ 0x328
 800c900:	af00      	add	r7, sp, #0
	char message[] = "Hello\n";  // Message to send   //remove
 800c902:	4a8c      	ldr	r2, [pc, #560]	@ (800cb34 <main+0x23c>)
 800c904:	f507 733d 	add.w	r3, r7, #756	@ 0x2f4
 800c908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c90c:	6018      	str	r0, [r3, #0]
 800c90e:	3304      	adds	r3, #4
 800c910:	8019      	strh	r1, [r3, #0]
 800c912:	3302      	adds	r3, #2
 800c914:	0c0a      	lsrs	r2, r1, #16
 800c916:	701a      	strb	r2, [r3, #0]
	char response[] = "I got your message\n";  // The expected response //remove
 800c918:	4b87      	ldr	r3, [pc, #540]	@ (800cb38 <main+0x240>)
 800c91a:	f507 7438 	add.w	r4, r7, #736	@ 0x2e0
 800c91e:	461d      	mov	r5, r3
 800c920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	6023      	str	r3, [r4, #0]


	int32_t i;
	uint32_t msTick, msTickPrev = 0;
 800c928:	2300      	movs	r3, #0
 800c92a:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320

	int32_t  result  = 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c

	unsigned int network_topology_ss[3] = { NUM_INPUTS, NUM_HIDDEN, NUM_OUTPUTS };
 800c934:	4a81      	ldr	r2, [pc, #516]	@ (800cb3c <main+0x244>)
 800c936:	f507 7335 	add.w	r3, r7, #724	@ 0x2d4
 800c93a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c93c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float dedw_ss[NUM_WEIGHTS];
	float bias_ss[NUM_BIAS];

	int32_t loc;

	number_weights_ss = NUM_WEIGHTS;
 800c940:	2390      	movs	r3, #144	@ 0x90
 800c942:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
	number_outputs_ss = NUM_OUTPUTS;
 800c946:	2306      	movs	r3, #6
 800c948:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
	number_bias_ss = NUM_BIAS;
 800c94c:	230f      	movs	r3, #15
 800c94e:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

	int32_t hasTrained;

	initialise_monitor_handles();	/*rtt*/
 800c952:	f003 fd5b 	bl	801040c <initialise_monitor_handles>
       - Configure the Flash prefetch
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 3
       - Low Level Initialization
	 */
	HAL_Init();
 800c956:	f7f8 f8e9 	bl	8004b2c <HAL_Init>
	/* Enable the Instruction Cache */
	CACHE_Enable();
 800c95a:	f000 fa2f 	bl	800cdbc <CACHE_Enable>

	/* Configure the System clock to have a frequency of 160 MHz */
	SystemClock_Config();
 800c95e:	f000 f9bb 	bl	800ccd8 <SystemClock_Config>

	/*
	 * Initialize User Button
	 */

	result = Ms_Button_Init();
 800c962:	f000 fb13 	bl	800cf8c <Ms_Button_Init>
 800c966:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c
	if (result < 0){
 800c96a:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 800c96e:	2b00      	cmp	r3, #0
 800c970:	da04      	bge.n	800c97c <main+0x84>
		printf("Initialization Error %i\n", result);
 800c972:	f8d7 131c 	ldr.w	r1, [r7, #796]	@ 0x31c
 800c976:	4872      	ldr	r0, [pc, #456]	@ (800cb40 <main+0x248>)
 800c978:	f001 face 	bl	800df18 <iprintf>
	}

	Ms_Init();
 800c97c:	f000 fb36 	bl	800cfec <Ms_Init>


	/* Initialize the Red LED */
	if (BSP_LED_Init(LED6) != BSP_ERROR_NONE) result--;
 800c980:	2000      	movs	r0, #0
 800c982:	f7f4 faf1 	bl	8000f68 <BSP_LED_Init>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d004      	beq.n	800c996 <main+0x9e>
 800c98c:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 800c990:	3b01      	subs	r3, #1
 800c992:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
	/* Initialize the Green LED */
	if (BSP_LED_Init(LED7) != BSP_ERROR_NONE) result--;
 800c996:	2001      	movs	r0, #1
 800c998:	f7f4 fae6 	bl	8000f68 <BSP_LED_Init>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d004      	beq.n	800c9ac <main+0xb4>
 800c9a2:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
	/*
	 * Generate array of random weight values normalized to 1
	 * and with fixed seed
	 */

	printf("\n\nEmbeddedML State Machine Translation Motion Feature Extraction and Classification\n\n");
 800c9ac:	4865      	ldr	r0, [pc, #404]	@ (800cb44 <main+0x24c>)
 800c9ae:	f001 fb23 	bl	800dff8 <puts>

	//start serial setup start remove
	// Initialize HAL
	 printf("Initialization Error %i\n");
 800c9b2:	4863      	ldr	r0, [pc, #396]	@ (800cb40 <main+0x248>)
 800c9b4:	f001 fab0 	bl	800df18 <iprintf>
	 HAL_Init();
 800c9b8:	f7f8 f8b8 	bl	8004b2c <HAL_Init>

	    // Initialize system clocks (if needed)
	    // SystemClock_Config();

	    // Initialize UART
	    UART1_Init();
 800c9bc:	f7fd fbf2 	bl	800a1a4 <UART1_Init>

	    // Example of sending a string
	    //char message[] = "Hello from STM32U5!\r\n";

	    int misser =0;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
	    while(misser<10) { //for 10 seconds
 800c9c6:	e010      	b.n	800c9ea <main+0xf2>
	        // Send message periodically
	        UART_SendString(message);
 800c9c8:	f507 733d 	add.w	r3, r7, #756	@ 0x2f4
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7fd fc49 	bl	800a264 <UART_SendString>

//	        printf(misser);
//	        printf(" ");
	        printf("Sending successful\n");
 800c9d2:	485d      	ldr	r0, [pc, #372]	@ (800cb48 <main+0x250>)
 800c9d4:	f001 fb10 	bl	800dff8 <puts>


	        // Optional: Add a delay
	        HAL_Delay(1000);  // 1 second delay
 800c9d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c9dc:	f7f8 f92a 	bl	8004c34 <HAL_Delay>
	        misser++;
 800c9e0:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
	    while(misser<10) { //for 10 seconds
 800c9ea:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 800c9ee:	2b09      	cmp	r3, #9
 800c9f0:	ddea      	ble.n	800c9c8 <main+0xd0>
//		}
//		printf("got here 2\n");

	//end serial setup

	printf("\n\nMotions Include 5 Segments\n");
 800c9f2:	4856      	ldr	r0, [pc, #344]	@ (800cb4c <main+0x254>)
 800c9f4:	f001 fb00 	bl	800dff8 <puts>

	printf("\n\nEnsure Use of Level Surface for IoT Platform Motion\n\n");
 800c9f8:	4855      	ldr	r0, [pc, #340]	@ (800cb50 <main+0x258>)
 800c9fa:	f001 fafd 	bl	800dff8 <puts>

	Ms_Accel_Init();
 800c9fe:	f000 f9fb 	bl	800cdf8 <Ms_Accel_Init>

	/* Initialize the Red LED */
	if (BSP_LED_Init(LED6) != BSP_ERROR_NONE) result--;
 800ca02:	2000      	movs	r0, #0
 800ca04:	f7f4 fab0 	bl	8000f68 <BSP_LED_Init>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d004      	beq.n	800ca18 <main+0x120>
 800ca0e:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 800ca12:	3b01      	subs	r3, #1
 800ca14:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
	/* Initialize the Green LED */
	if (BSP_LED_Init(LED7) != BSP_ERROR_NONE) result--;
 800ca18:	2001      	movs	r0, #1
 800ca1a:	f7f4 faa5 	bl	8000f68 <BSP_LED_Init>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d004      	beq.n	800ca2e <main+0x136>
 800ca24:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 800ca28:	3b01      	subs	r3, #1
 800ca2a:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c

	for (i = 0; i < number_bias_ss; i++){
 800ca2e:	2300      	movs	r3, #0
 800ca30:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 800ca34:	e00f      	b.n	800ca56 <main+0x15e>
		bias_ss[i] = 0.5;
 800ca36:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800ca3a:	f5a3 723a 	sub.w	r2, r3, #744	@ 0x2e8
 800ca3e:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	4413      	add	r3, r2
 800ca46:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800ca4a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < number_bias_ss; i++){
 800ca4c:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 800ca50:	3301      	adds	r3, #1
 800ca52:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 800ca56:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 800ca5a:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	dbe9      	blt.n	800ca36 <main+0x13e>
	}
	for (i = 0; i < number_outputs_ss; i++){
 800ca62:	2300      	movs	r3, #0
 800ca64:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 800ca68:	e00e      	b.n	800ca88 <main+0x190>
		output_ss[i] = 0.0;
 800ca6a:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 800ca74:	443b      	add	r3, r7
 800ca76:	3b6c      	subs	r3, #108	@ 0x6c
 800ca78:	f04f 0200 	mov.w	r2, #0
 800ca7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < number_outputs_ss; i++){
 800ca7e:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 800ca82:	3301      	adds	r3, #1
 800ca84:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 800ca88:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 800ca8c:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 800ca90:	429a      	cmp	r2, r3
 800ca92:	dbea      	blt.n	800ca6a <main+0x172>
	}
	for (i = 0; i < number_weights_ss; i++){
 800ca94:	2300      	movs	r3, #0
 800ca96:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 800ca9a:	e00f      	b.n	800cabc <main+0x1c4>
		dedw_ss[i] = 0.0;
 800ca9c:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800caa0:	f5a3 722b 	sub.w	r2, r3, #684	@ 0x2ac
 800caa4:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	4413      	add	r3, r2
 800caac:	f04f 0200 	mov.w	r2, #0
 800cab0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < number_weights_ss; i++){
 800cab2:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 800cab6:	3301      	adds	r3, #1
 800cab8:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 800cabc:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 800cac0:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 800cac4:	429a      	cmp	r2, r3
 800cac6:	dbe9      	blt.n	800ca9c <main+0x1a4>
	/*
	 * Generate array of random weight values normalized to 1
	 * and with fixed seed
	 */

	srand(1);
 800cac8:	2001      	movs	r0, #1
 800caca:	f001 f8f7 	bl	800dcbc <srand>

	float weights_initial_ss[number_weights_ss];
 800cace:	f8d7 1310 	ldr.w	r1, [r7, #784]	@ 0x310
 800cad2:	1e4b      	subs	r3, r1, #1
 800cad4:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 800cad8:	460a      	mov	r2, r1
 800cada:	2300      	movs	r3, #0
 800cadc:	4692      	mov	sl, r2
 800cade:	469b      	mov	fp, r3
 800cae0:	f04f 0200 	mov.w	r2, #0
 800cae4:	f04f 0300 	mov.w	r3, #0
 800cae8:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800caec:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800caf0:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800caf4:	460a      	mov	r2, r1
 800caf6:	2300      	movs	r3, #0
 800caf8:	4690      	mov	r8, r2
 800cafa:	4699      	mov	r9, r3
 800cafc:	f04f 0200 	mov.w	r2, #0
 800cb00:	f04f 0300 	mov.w	r3, #0
 800cb04:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800cb08:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800cb0c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800cb10:	460b      	mov	r3, r1
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	3307      	adds	r3, #7
 800cb16:	08db      	lsrs	r3, r3, #3
 800cb18:	00db      	lsls	r3, r3, #3
 800cb1a:	ebad 0d03 	sub.w	sp, sp, r3
 800cb1e:	466b      	mov	r3, sp
 800cb20:	3303      	adds	r3, #3
 800cb22:	089b      	lsrs	r3, r3, #2
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300

	for (i = 0; i < number_weights_ss; i++){
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 800cb30:	e029      	b.n	800cb86 <main+0x28e>
 800cb32:	bf00      	nop
 800cb34:	080118c8 	.word	0x080118c8
 800cb38:	080118d0 	.word	0x080118d0
 800cb3c:	080118e4 	.word	0x080118e4
 800cb40:	080117c4 	.word	0x080117c4
 800cb44:	080117e0 	.word	0x080117e0
 800cb48:	08011838 	.word	0x08011838
 800cb4c:	0801184c 	.word	0x0801184c
 800cb50:	0801186c 	.word	0x0801186c
 800cb54:	4f000000 	.word	0x4f000000
		weights_initial_ss[i] = (float)rand()/RAND_MAX;
 800cb58:	f001 f8de 	bl	800dd18 <rand>
 800cb5c:	ee07 0a90 	vmov	s15, r0
 800cb60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cb64:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 800cb54 <main+0x25c>
 800cb68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb6c:	f8d7 2300 	ldr.w	r2, [r7, #768]	@ 0x300
 800cb70:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4413      	add	r3, r2
 800cb78:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < number_weights_ss; i++){
 800cb7c:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 800cb80:	3301      	adds	r3, #1
 800cb82:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 800cb86:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 800cb8a:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	dbe2      	blt.n	800cb58 <main+0x260>
	}
	ANN net_ss;
	net_ss.weights = weights_initial_ss;
 800cb92:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800cb96:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800cb9a:	f8d7 2300 	ldr.w	r2, [r7, #768]	@ 0x300
 800cb9e:	601a      	str	r2, [r3, #0]
	net_ss.dedw = dedw_ss;
 800cba0:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800cba4:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800cba8:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800cbac:	605a      	str	r2, [r3, #4]
	net_ss.bias = bias_ss;
 800cbae:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800cbb2:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800cbb6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800cbba:	609a      	str	r2, [r3, #8]
	net_ss.topology = network_topology_ss;
 800cbbc:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800cbc0:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800cbc4:	f507 7235 	add.w	r2, r7, #724	@ 0x2d4
 800cbc8:	60da      	str	r2, [r3, #12]
	net_ss.n_layers = NUM_LAYERS;
 800cbca:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800cbce:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800cbd2:	2203      	movs	r2, #3
 800cbd4:	611a      	str	r2, [r3, #16]
	net_ss.n_weights = number_weights_ss;
 800cbd6:	f8d7 2310 	ldr.w	r2, [r7, #784]	@ 0x310
 800cbda:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800cbde:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800cbe2:	615a      	str	r2, [r3, #20]
	net_ss.n_bias = number_bias_ss;
 800cbe4:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 800cbe8:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800cbec:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800cbf0:	619a      	str	r2, [r3, #24]
	net_ss.output = output_ss;
 800cbf2:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800cbf6:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800cbfa:	f507 722f 	add.w	r2, r7, #700	@ 0x2bc
 800cbfe:	61da      	str	r2, [r3, #28]

	net_ss.eta = 0.13;     //Learning Rate
 800cc00:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800cc04:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800cc08:	4a2f      	ldr	r2, [pc, #188]	@ (800ccc8 <main+0x3d0>)
 800cc0a:	631a      	str	r2, [r3, #48]	@ 0x30
	net_ss.beta = 0.01;    //Bias Learning Rate
 800cc0c:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800cc10:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800cc14:	4a2d      	ldr	r2, [pc, #180]	@ (800cccc <main+0x3d4>)
 800cc16:	635a      	str	r2, [r3, #52]	@ 0x34
	net_ss.alpha = 0.25;   //Momentum Coefficient
 800cc18:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800cc1c:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800cc20:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800cc24:	639a      	str	r2, [r3, #56]	@ 0x38
	net_ss.output_activation_function = &relu2;
 800cc26:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800cc2a:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800cc2e:	4a28      	ldr	r2, [pc, #160]	@ (800ccd0 <main+0x3d8>)
 800cc30:	621a      	str	r2, [r3, #32]
	net_ss.hidden_activation_function = &relu2;
 800cc32:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800cc36:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800cc3a:	4a25      	ldr	r2, [pc, #148]	@ (800ccd0 <main+0x3d8>)
 800cc3c:	629a      	str	r2, [r3, #40]	@ 0x28

	init_ann(&net_ss);
 800cc3e:	463b      	mov	r3, r7
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7ff fce5 	bl	800c610 <init_ann>

	hasTrained = 0;
 800cc46:	2300      	movs	r3, #0
 800cc48:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318

	BSP_LED_Off(LED6);
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	f7f4 f9fb 	bl	8001048 <BSP_LED_Off>
	BSP_LED_Off(LED7);
 800cc52:	2001      	movs	r0, #1
 800cc54:	f7f4 f9f8 	bl	8001048 <BSP_LED_Off>

	loc = -1;
 800cc58:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800cc5c:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 800cc60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cc64:	601a      	str	r2, [r3, #0]
	while (1) {
		/* Get sysTick value and check if it's time to execute the task */
		msTick = HAL_GetTick();
 800cc66:	f7f7 ffd9 	bl	8004c1c <HAL_GetTick>
 800cc6a:	f8c7 02fc 	str.w	r0, [r7, #764]	@ 0x2fc
		if (msTick % DATA_PERIOD_MS == 0 && msTickPrev != msTick) {
 800cc6e:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 800cc72:	f003 0301 	and.w	r3, r3, #1
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d114      	bne.n	800cca4 <main+0x3ac>
 800cc7a:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 800cc7e:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d00e      	beq.n	800cca4 <main+0x3ac>
			msTickPrev = msTick;
 800cc86:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 800cc8a:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
			if (hasTrained){
 800cc8e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d006      	beq.n	800cca4 <main+0x3ac>
				Test_ANN_SM_Translation(&net_ss, &loc);
 800cc96:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800cc9a:	463b      	mov	r3, r7
 800cc9c:	4611      	mov	r1, r2
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7fe f936 	bl	800af10 <Test_ANN_SM_Translation>
			}
		}

		if (!hasTrained) {
 800cca4:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1dc      	bne.n	800cc66 <main+0x36e>
			printf("Press User Button to Start Training\n");
 800ccac:	4809      	ldr	r0, [pc, #36]	@ (800ccd4 <main+0x3dc>)
 800ccae:	f001 f9a3 	bl	800dff8 <puts>
			User_Button_Wait();
 800ccb2:	f000 f97f 	bl	800cfb4 <User_Button_Wait>
			TrainOrientation_SM_Translation(&net_ss);
 800ccb6:	463b      	mov	r3, r7
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7fd fd17 	bl	800a6ec <TrainOrientation_SM_Translation>
			hasTrained = 1;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
		msTick = HAL_GetTick();
 800ccc4:	e7cf      	b.n	800cc66 <main+0x36e>
 800ccc6:	bf00      	nop
 800ccc8:	3e051eb8 	.word	0x3e051eb8
 800cccc:	3c23d70a 	.word	0x3c23d70a
 800ccd0:	0800c7a1 	.word	0x0800c7a1
 800ccd4:	080118a4 	.word	0x080118a4

0800ccd8 <SystemClock_Config>:
 */



void SystemClock_Config(void)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b0a0      	sub	sp, #128	@ 0x80
 800ccdc:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ccde:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800cce2:	2200      	movs	r2, #0
 800cce4:	601a      	str	r2, [r3, #0]
 800cce6:	605a      	str	r2, [r3, #4]
 800cce8:	609a      	str	r2, [r3, #8]
 800ccea:	60da      	str	r2, [r3, #12]
 800ccec:	611a      	str	r2, [r3, #16]
 800ccee:	615a      	str	r2, [r3, #20]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ccf0:	f107 0308 	add.w	r3, r7, #8
 800ccf4:	2260      	movs	r2, #96	@ 0x60
 800ccf6:	2100      	movs	r1, #0
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f001 f985 	bl	800e008 <memset>

	/* Enable voltage range 1 for frequency above 100 Mhz */
	__HAL_RCC_PWR_CLK_ENABLE();
 800ccfe:	4b2e      	ldr	r3, [pc, #184]	@ (800cdb8 <SystemClock_Config+0xe0>)
 800cd00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd04:	4a2c      	ldr	r2, [pc, #176]	@ (800cdb8 <SystemClock_Config+0xe0>)
 800cd06:	f043 0304 	orr.w	r3, r3, #4
 800cd0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800cd0e:	4b2a      	ldr	r3, [pc, #168]	@ (800cdb8 <SystemClock_Config+0xe0>)
 800cd10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd14:	f003 0304 	and.w	r3, r3, #4
 800cd18:	607b      	str	r3, [r7, #4]
 800cd1a:	687b      	ldr	r3, [r7, #4]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800cd1c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800cd20:	f7f9 fce6 	bl	80066f0 <HAL_PWREx_ControlVoltageScaling>

	/* Switch to SMPS regulator instead of LDO */
	HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY);
 800cd24:	2002      	movs	r0, #2
 800cd26:	f7f9 fd65 	bl	80067f4 <HAL_PWREx_ConfigSupply>

	__HAL_RCC_PWR_CLK_DISABLE();
 800cd2a:	4b23      	ldr	r3, [pc, #140]	@ (800cdb8 <SystemClock_Config+0xe0>)
 800cd2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd30:	4a21      	ldr	r2, [pc, #132]	@ (800cdb8 <SystemClock_Config+0xe0>)
 800cd32:	f023 0304 	bic.w	r3, r3, #4
 800cd36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

	/* MSI Oscillator enabled at reset (4Mhz), activate PLL with MSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800cd3a:	2310      	movs	r3, #16
 800cd3c:	60bb      	str	r3, [r7, #8]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800cd42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cd46:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800cd48:	2310      	movs	r3, #16
 800cd4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cd4c:	2302      	movs	r3, #2
 800cd4e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800cd50:	2301      	movs	r3, #1
 800cd52:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800cd54:	2300      	movs	r3, #0
 800cd56:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLN = 80;
 800cd5c:	2350      	movs	r3, #80	@ 0x50
 800cd5e:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = 2;
 800cd60:	2302      	movs	r3, #2
 800cd62:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLP = 2;
 800cd64:	2302      	movs	r3, #2
 800cd66:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800cd68:	2302      	movs	r3, #2
 800cd6a:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLFRACN= 0;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	667b      	str	r3, [r7, #100]	@ 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cd70:	f107 0308 	add.w	r3, r7, #8
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7f9 fd8d 	bl	8006894 <HAL_RCC_OscConfig>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d000      	beq.n	800cd82 <SystemClock_Config+0xaa>
	{
		/* Initialization Error */
		while(1);
 800cd80:	e7fe      	b.n	800cd80 <SystemClock_Config+0xa8>
	}

	/* Select PLL as system clock source and configure bus clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800cd82:	231f      	movs	r3, #31
 800cd84:	66bb      	str	r3, [r7, #104]	@ 0x68
			RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_PCLK3);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cd86:	2303      	movs	r3, #3
 800cd88:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800cd92:	2300      	movs	r3, #0
 800cd94:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800cd96:	2300      	movs	r3, #0
 800cd98:	67fb      	str	r3, [r7, #124]	@ 0x7c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800cd9a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800cd9e:	2104      	movs	r1, #4
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7fa fc4d 	bl	8007640 <HAL_RCC_ClockConfig>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d000      	beq.n	800cdae <SystemClock_Config+0xd6>
	{
		/* Initialization Error */
		while(1);
 800cdac:	e7fe      	b.n	800cdac <SystemClock_Config+0xd4>
	}
}
 800cdae:	bf00      	nop
 800cdb0:	3780      	adds	r7, #128	@ 0x80
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	46020c00 	.word	0x46020c00

0800cdbc <CACHE_Enable>:
 * @brief  Enable ICACHE with 1-way set-associative configuration.
 * @param  None
 * @retval None
 */
static void CACHE_Enable(void)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	af00      	add	r7, sp, #0
	/* Configure ICACHE associativity mode */
	HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY);
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	f7f9 fc65 	bl	8006690 <HAL_ICACHE_ConfigAssociativityMode>

	/* Enable ICACHE */
	HAL_ICACHE_Enable();
 800cdc6:	f7f9 fc83 	bl	80066d0 <HAL_ICACHE_Enable>
}
 800cdca:	bf00      	nop
 800cdcc:	bd80      	pop	{r7, pc}
	...

0800cdd0 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	71fb      	strb	r3, [r7, #7]
	if (Button == BUTTON_USER)
 800cdda:	79fb      	ldrb	r3, [r7, #7]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d102      	bne.n	800cde6 <BSP_PB_Callback+0x16>
	{
		UserButtonPressed = SET;
 800cde0:	4b04      	ldr	r3, [pc, #16]	@ (800cdf4 <BSP_PB_Callback+0x24>)
 800cde2:	2201      	movs	r2, #1
 800cde4:	701a      	strb	r2, [r3, #0]
	}
}
 800cde6:	bf00      	nop
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	20000f6c 	.word	0x20000f6c

0800cdf8 <Ms_Accel_Init>:
	/* De-initialize function */
	if (BSP_MOTION_SENSOR_DeInit(0) != BSP_ERROR_NONE) result--;
}

int32_t  Ms_Accel_Init(void)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b08c      	sub	sp, #48	@ 0x30
 800cdfc:	af00      	add	r7, sp, #0
	int32_t  result  = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t fullScale;

	/* Initialize function for Microaccelerometer */

	/* Initialize function */
	if (BSP_MOTION_SENSOR_Init(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 800ce02:	2102      	movs	r1, #2
 800ce04:	2000      	movs	r0, #0
 800ce06:	f7f4 fe83 	bl	8001b10 <BSP_MOTION_SENSOR_Init>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d002      	beq.n	800ce16 <Ms_Accel_Init+0x1e>
 800ce10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce12:	3b01      	subs	r3, #1
 800ce14:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_GetCapabilities(0, &Capabilities) != BSP_ERROR_NONE) result--;
 800ce16:	f107 0310 	add.w	r3, r7, #16
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	2000      	movs	r0, #0
 800ce1e:	f7f4 fec7 	bl	8001bb0 <BSP_MOTION_SENSOR_GetCapabilities>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d002      	beq.n	800ce2e <Ms_Accel_Init+0x36>
 800ce28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Read id function */
	if (BSP_MOTION_SENSOR_ReadID(0, &chipId) != BSP_ERROR_NONE) result--;
 800ce2e:	f107 030f 	add.w	r3, r7, #15
 800ce32:	4619      	mov	r1, r3
 800ce34:	2000      	movs	r0, #0
 800ce36:	f7f4 fef3 	bl	8001c20 <BSP_MOTION_SENSOR_ReadID>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d002      	beq.n	800ce46 <Ms_Accel_Init+0x4e>
 800ce40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce42:	3b01      	subs	r3, #1
 800ce44:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Enable function */
	if (BSP_MOTION_SENSOR_Enable(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 800ce46:	2102      	movs	r1, #2
 800ce48:	2000      	movs	r0, #0
 800ce4a:	f7f4 ff21 	bl	8001c90 <BSP_MOTION_SENSOR_Enable>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d002      	beq.n	800ce5a <Ms_Accel_Init+0x62>
 800ce54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce56:	3b01      	subs	r3, #1
 800ce58:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetFullScale and SetFullScale functions */
	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 16) != BSP_ERROR_NONE) result--;
 800ce5a:	2210      	movs	r2, #16
 800ce5c:	2102      	movs	r1, #2
 800ce5e:	2000      	movs	r0, #0
 800ce60:	f7f5 f96a 	bl	8002138 <BSP_MOTION_SENSOR_SetFullScale>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d002      	beq.n	800ce70 <Ms_Accel_Init+0x78>
 800ce6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce6c:	3b01      	subs	r3, #1
 800ce6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 800ce70:	463b      	mov	r3, r7
 800ce72:	461a      	mov	r2, r3
 800ce74:	2102      	movs	r1, #2
 800ce76:	2000      	movs	r0, #0
 800ce78:	f7f5 f8fa 	bl	8002070 <BSP_MOTION_SENSOR_GetFullScale>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d002      	beq.n	800ce88 <Ms_Accel_Init+0x90>
 800ce82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce84:	3b01      	subs	r3, #1
 800ce86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 16) result--;
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	2b10      	cmp	r3, #16
 800ce8c:	d002      	beq.n	800ce94 <Ms_Accel_Init+0x9c>
 800ce8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce90:	3b01      	subs	r3, #1
 800ce92:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE) result--;
 800ce94:	2202      	movs	r2, #2
 800ce96:	2102      	movs	r1, #2
 800ce98:	2000      	movs	r0, #0
 800ce9a:	f7f5 f94d 	bl	8002138 <BSP_MOTION_SENSOR_SetFullScale>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d002      	beq.n	800ceaa <Ms_Accel_Init+0xb2>
 800cea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cea6:	3b01      	subs	r3, #1
 800cea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 800ceaa:	463b      	mov	r3, r7
 800ceac:	461a      	mov	r2, r3
 800ceae:	2102      	movs	r1, #2
 800ceb0:	2000      	movs	r0, #0
 800ceb2:	f7f5 f8dd 	bl	8002070 <BSP_MOTION_SENSOR_GetFullScale>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d002      	beq.n	800cec2 <Ms_Accel_Init+0xca>
 800cebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cebe:	3b01      	subs	r3, #1
 800cec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 2) result--;
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d002      	beq.n	800cece <Ms_Accel_Init+0xd6>
 800cec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceca:	3b01      	subs	r3, #1
 800cecc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetOutputDataRate and SetOutputDataRate functions */
	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 3333.0f) != BSP_ERROR_NONE) result--;
 800cece:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 800cf84 <Ms_Accel_Init+0x18c>
 800ced2:	2102      	movs	r1, #2
 800ced4:	2000      	movs	r0, #0
 800ced6:	f7f5 f867 	bl	8001fa8 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d002      	beq.n	800cee6 <Ms_Accel_Init+0xee>
 800cee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cee2:	3b01      	subs	r3, #1
 800cee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800cee6:	1d3b      	adds	r3, r7, #4
 800cee8:	461a      	mov	r2, r3
 800ceea:	2102      	movs	r1, #2
 800ceec:	2000      	movs	r0, #0
 800ceee:	f7f4 fff7 	bl	8001ee0 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800cef2:	4603      	mov	r3, r0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <Ms_Accel_Init+0x106>
 800cef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cefa:	3b01      	subs	r3, #1
 800cefc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 3333.0f) result--;
 800cefe:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf02:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800cf84 <Ms_Accel_Init+0x18c>
 800cf06:	eef4 7a47 	vcmp.f32	s15, s14
 800cf0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0e:	d002      	beq.n	800cf16 <Ms_Accel_Init+0x11e>
 800cf10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf12:	3b01      	subs	r3, #1
 800cf14:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 208.0f) != BSP_ERROR_NONE) result--;
 800cf16:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 800cf88 <Ms_Accel_Init+0x190>
 800cf1a:	2102      	movs	r1, #2
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	f7f5 f843 	bl	8001fa8 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800cf22:	4603      	mov	r3, r0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d002      	beq.n	800cf2e <Ms_Accel_Init+0x136>
 800cf28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800cf2e:	1d3b      	adds	r3, r7, #4
 800cf30:	461a      	mov	r2, r3
 800cf32:	2102      	movs	r1, #2
 800cf34:	2000      	movs	r0, #0
 800cf36:	f7f4 ffd3 	bl	8001ee0 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d002      	beq.n	800cf46 <Ms_Accel_Init+0x14e>
 800cf40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf42:	3b01      	subs	r3, #1
 800cf44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 208.0f) result--;
 800cf46:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf4a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800cf88 <Ms_Accel_Init+0x190>
 800cf4e:	eef4 7a47 	vcmp.f32	s15, s14
 800cf52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf56:	d002      	beq.n	800cf5e <Ms_Accel_Init+0x166>
 800cf58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetSensitivity function */
	if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_ACCELERO, &sensitivity) != BSP_ERROR_NONE) result--;
 800cf5e:	f107 0308 	add.w	r3, r7, #8
 800cf62:	461a      	mov	r2, r3
 800cf64:	2102      	movs	r1, #2
 800cf66:	2000      	movs	r0, #0
 800cf68:	f7f4 ff56 	bl	8001e18 <BSP_MOTION_SENSOR_GetSensitivity>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d002      	beq.n	800cf78 <Ms_Accel_Init+0x180>
 800cf72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf74:	3b01      	subs	r3, #1
 800cf76:	62fb      	str	r3, [r7, #44]	@ 0x2c

	return result;
 800cf78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3730      	adds	r7, #48	@ 0x30
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	45505000 	.word	0x45505000
 800cf88:	43500000 	.word	0x43500000

0800cf8c <Ms_Button_Init>:
	return result;

}

int32_t Ms_Button_Init(void)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
	int32_t  result  = 0;
 800cf92:	2300      	movs	r3, #0
 800cf94:	607b      	str	r3, [r7, #4]
	/* Initialize user button */
	if (BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI) != BSP_ERROR_NONE) result--;
 800cf96:	2101      	movs	r1, #1
 800cf98:	2000      	movs	r0, #0
 800cf9a:	f7f4 f873 	bl	8001084 <BSP_PB_Init>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d002      	beq.n	800cfaa <Ms_Button_Init+0x1e>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	3b01      	subs	r3, #1
 800cfa8:	607b      	str	r3, [r7, #4]
	return result;
 800cfaa:	687b      	ldr	r3, [r7, #4]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <User_Button_Wait>:
	UserButtonPressed = RESET;
	printf("\n");
}

void User_Button_Wait()
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	af00      	add	r7, sp, #0
	printf("\n");
 800cfb8:	200a      	movs	r0, #10
 800cfba:	f000 ffbf 	bl	800df3c <putchar>
	UserButtonPressed = RESET;
 800cfbe:	4b0a      	ldr	r3, [pc, #40]	@ (800cfe8 <User_Button_Wait+0x34>)
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	701a      	strb	r2, [r3, #0]
	while (UserButtonPressed == 0)
 800cfc4:	e002      	b.n	800cfcc <User_Button_Wait+0x18>
	{
		HAL_Delay(10);
 800cfc6:	200a      	movs	r0, #10
 800cfc8:	f7f7 fe34 	bl	8004c34 <HAL_Delay>
	while (UserButtonPressed == 0)
 800cfcc:	4b06      	ldr	r3, [pc, #24]	@ (800cfe8 <User_Button_Wait+0x34>)
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d0f7      	beq.n	800cfc6 <User_Button_Wait+0x12>
	}
	UserButtonPressed = RESET;
 800cfd6:	4b04      	ldr	r3, [pc, #16]	@ (800cfe8 <User_Button_Wait+0x34>)
 800cfd8:	2200      	movs	r2, #0
 800cfda:	701a      	strb	r2, [r3, #0]
	printf("\n");
 800cfdc:	200a      	movs	r0, #10
 800cfde:	f000 ffad 	bl	800df3c <putchar>
}
 800cfe2:	bf00      	nop
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	20000f6c 	.word	0x20000f6c

0800cfec <Ms_Init>:
		if (BSP_MOTION_SENSOR_GetSensitivity(1, MOTION_MAGNETO, &sensitivity) != BSP_ERROR_NONE) result--;
		return result;
}

int32_t Ms_Init(void)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b08c      	sub	sp, #48	@ 0x30
 800cff0:	af00      	add	r7, sp, #0
	int32_t  result  = 0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t fullScale;

	/* Initialize function for Microaccelerometer */

	/* Initialize user button */
	if (BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI) != BSP_ERROR_NONE) result--;
 800cff6:	2101      	movs	r1, #1
 800cff8:	2000      	movs	r0, #0
 800cffa:	f7f4 f843 	bl	8001084 <BSP_PB_Init>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d002      	beq.n	800d00a <Ms_Init+0x1e>
 800d004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d006:	3b01      	subs	r3, #1
 800d008:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Initialize function */
	if (BSP_MOTION_SENSOR_Init(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 800d00a:	2102      	movs	r1, #2
 800d00c:	2000      	movs	r0, #0
 800d00e:	f7f4 fd7f 	bl	8001b10 <BSP_MOTION_SENSOR_Init>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d002      	beq.n	800d01e <Ms_Init+0x32>
 800d018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d01a:	3b01      	subs	r3, #1
 800d01c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_GetCapabilities(0, &Capabilities) != BSP_ERROR_NONE) result--;
 800d01e:	f107 0310 	add.w	r3, r7, #16
 800d022:	4619      	mov	r1, r3
 800d024:	2000      	movs	r0, #0
 800d026:	f7f4 fdc3 	bl	8001bb0 <BSP_MOTION_SENSOR_GetCapabilities>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d002      	beq.n	800d036 <Ms_Init+0x4a>
 800d030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d032:	3b01      	subs	r3, #1
 800d034:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Read id function */
	if (BSP_MOTION_SENSOR_ReadID(0, &chipId) != BSP_ERROR_NONE) result--;
 800d036:	f107 030f 	add.w	r3, r7, #15
 800d03a:	4619      	mov	r1, r3
 800d03c:	2000      	movs	r0, #0
 800d03e:	f7f4 fdef 	bl	8001c20 <BSP_MOTION_SENSOR_ReadID>
 800d042:	4603      	mov	r3, r0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d002      	beq.n	800d04e <Ms_Init+0x62>
 800d048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d04a:	3b01      	subs	r3, #1
 800d04c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Enable function */
	if (BSP_MOTION_SENSOR_Enable(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 800d04e:	2102      	movs	r1, #2
 800d050:	2000      	movs	r0, #0
 800d052:	f7f4 fe1d 	bl	8001c90 <BSP_MOTION_SENSOR_Enable>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d002      	beq.n	800d062 <Ms_Init+0x76>
 800d05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d05e:	3b01      	subs	r3, #1
 800d060:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetFullScale and SetFullScale functions */
	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 16) != BSP_ERROR_NONE) result--;
 800d062:	2210      	movs	r2, #16
 800d064:	2102      	movs	r1, #2
 800d066:	2000      	movs	r0, #0
 800d068:	f7f5 f866 	bl	8002138 <BSP_MOTION_SENSOR_SetFullScale>
 800d06c:	4603      	mov	r3, r0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d002      	beq.n	800d078 <Ms_Init+0x8c>
 800d072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d074:	3b01      	subs	r3, #1
 800d076:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 800d078:	463b      	mov	r3, r7
 800d07a:	461a      	mov	r2, r3
 800d07c:	2102      	movs	r1, #2
 800d07e:	2000      	movs	r0, #0
 800d080:	f7f4 fff6 	bl	8002070 <BSP_MOTION_SENSOR_GetFullScale>
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d002      	beq.n	800d090 <Ms_Init+0xa4>
 800d08a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d08c:	3b01      	subs	r3, #1
 800d08e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 16) result--;
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	2b10      	cmp	r3, #16
 800d094:	d002      	beq.n	800d09c <Ms_Init+0xb0>
 800d096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d098:	3b01      	subs	r3, #1
 800d09a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE) result--;
 800d09c:	2202      	movs	r2, #2
 800d09e:	2102      	movs	r1, #2
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	f7f5 f849 	bl	8002138 <BSP_MOTION_SENSOR_SetFullScale>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d002      	beq.n	800d0b2 <Ms_Init+0xc6>
 800d0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 800d0b2:	463b      	mov	r3, r7
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	2102      	movs	r1, #2
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	f7f4 ffd9 	bl	8002070 <BSP_MOTION_SENSOR_GetFullScale>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d002      	beq.n	800d0ca <Ms_Init+0xde>
 800d0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 2) result--;
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	2b02      	cmp	r3, #2
 800d0ce:	d002      	beq.n	800d0d6 <Ms_Init+0xea>
 800d0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetOutputDataRate and SetOutputDataRate functions */
	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 3333.0f) != BSP_ERROR_NONE) result--;
 800d0d6:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 800d2d8 <Ms_Init+0x2ec>
 800d0da:	2102      	movs	r1, #2
 800d0dc:	2000      	movs	r0, #0
 800d0de:	f7f4 ff63 	bl	8001fa8 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d002      	beq.n	800d0ee <Ms_Init+0x102>
 800d0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800d0ee:	1d3b      	adds	r3, r7, #4
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	2102      	movs	r1, #2
 800d0f4:	2000      	movs	r0, #0
 800d0f6:	f7f4 fef3 	bl	8001ee0 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d002      	beq.n	800d106 <Ms_Init+0x11a>
 800d100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d102:	3b01      	subs	r3, #1
 800d104:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 3333.0f) result--;
 800d106:	edd7 7a01 	vldr	s15, [r7, #4]
 800d10a:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 800d2d8 <Ms_Init+0x2ec>
 800d10e:	eef4 7a47 	vcmp.f32	s15, s14
 800d112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d116:	d002      	beq.n	800d11e <Ms_Init+0x132>
 800d118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d11a:	3b01      	subs	r3, #1
 800d11c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 208.0f) != BSP_ERROR_NONE) result--;
 800d11e:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 800d2dc <Ms_Init+0x2f0>
 800d122:	2102      	movs	r1, #2
 800d124:	2000      	movs	r0, #0
 800d126:	f7f4 ff3f 	bl	8001fa8 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d002      	beq.n	800d136 <Ms_Init+0x14a>
 800d130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d132:	3b01      	subs	r3, #1
 800d134:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800d136:	1d3b      	adds	r3, r7, #4
 800d138:	461a      	mov	r2, r3
 800d13a:	2102      	movs	r1, #2
 800d13c:	2000      	movs	r0, #0
 800d13e:	f7f4 fecf 	bl	8001ee0 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d002      	beq.n	800d14e <Ms_Init+0x162>
 800d148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d14a:	3b01      	subs	r3, #1
 800d14c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 208.0f) result--;
 800d14e:	edd7 7a01 	vldr	s15, [r7, #4]
 800d152:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800d2dc <Ms_Init+0x2f0>
 800d156:	eef4 7a47 	vcmp.f32	s15, s14
 800d15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d15e:	d002      	beq.n	800d166 <Ms_Init+0x17a>
 800d160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d162:	3b01      	subs	r3, #1
 800d164:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetSensitivity function */
	if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_ACCELERO, &sensitivity) != BSP_ERROR_NONE) result--;
 800d166:	f107 0308 	add.w	r3, r7, #8
 800d16a:	461a      	mov	r2, r3
 800d16c:	2102      	movs	r1, #2
 800d16e:	2000      	movs	r0, #0
 800d170:	f7f4 fe52 	bl	8001e18 <BSP_MOTION_SENSOR_GetSensitivity>
 800d174:	4603      	mov	r3, r0
 800d176:	2b00      	cmp	r3, #0
 800d178:	d002      	beq.n	800d180 <Ms_Init+0x194>
 800d17a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17c:	3b01      	subs	r3, #1
 800d17e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Initialize function for Microgyro */

	/* Initialize function */
	if (BSP_MOTION_SENSOR_Init(0, MOTION_GYRO) != BSP_ERROR_NONE) result--;
 800d180:	2101      	movs	r1, #1
 800d182:	2000      	movs	r0, #0
 800d184:	f7f4 fcc4 	bl	8001b10 <BSP_MOTION_SENSOR_Init>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <Ms_Init+0x1a8>
 800d18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d190:	3b01      	subs	r3, #1
 800d192:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Enable function */
	if (BSP_MOTION_SENSOR_Enable(0, MOTION_GYRO) != BSP_ERROR_NONE) result--;
 800d194:	2101      	movs	r1, #1
 800d196:	2000      	movs	r0, #0
 800d198:	f7f4 fd7a 	bl	8001c90 <BSP_MOTION_SENSOR_Enable>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d002      	beq.n	800d1a8 <Ms_Init+0x1bc>
 800d1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a4:	3b01      	subs	r3, #1
 800d1a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetFullScale and SetFullScale functions */
	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_GYRO, 2000) != BSP_ERROR_NONE) result--;
 800d1a8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800d1ac:	2101      	movs	r1, #1
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	f7f4 ffc2 	bl	8002138 <BSP_MOTION_SENSOR_SetFullScale>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d002      	beq.n	800d1c0 <Ms_Init+0x1d4>
 800d1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1bc:	3b01      	subs	r3, #1
 800d1be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_GYRO, &fullScale) != BSP_ERROR_NONE) result--;
 800d1c0:	463b      	mov	r3, r7
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	2101      	movs	r1, #1
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	f7f4 ff52 	bl	8002070 <BSP_MOTION_SENSOR_GetFullScale>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d002      	beq.n	800d1d8 <Ms_Init+0x1ec>
 800d1d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 2000) result--;
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800d1de:	d002      	beq.n	800d1e6 <Ms_Init+0x1fa>
 800d1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e2:	3b01      	subs	r3, #1
 800d1e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_GYRO, 500) != BSP_ERROR_NONE) result--;
 800d1e6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800d1ea:	2101      	movs	r1, #1
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	f7f4 ffa3 	bl	8002138 <BSP_MOTION_SENSOR_SetFullScale>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d002      	beq.n	800d1fe <Ms_Init+0x212>
 800d1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fa:	3b01      	subs	r3, #1
 800d1fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_GYRO, &fullScale) != BSP_ERROR_NONE) result--;
 800d1fe:	463b      	mov	r3, r7
 800d200:	461a      	mov	r2, r3
 800d202:	2101      	movs	r1, #1
 800d204:	2000      	movs	r0, #0
 800d206:	f7f4 ff33 	bl	8002070 <BSP_MOTION_SENSOR_GetFullScale>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d002      	beq.n	800d216 <Ms_Init+0x22a>
 800d210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d212:	3b01      	subs	r3, #1
 800d214:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 500) result--;
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800d21c:	d002      	beq.n	800d224 <Ms_Init+0x238>
 800d21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d220:	3b01      	subs	r3, #1
 800d222:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetOutputDataRate and SetOutputDataRate functions */
	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_GYRO, 3333.0f) != BSP_ERROR_NONE) result--;
 800d224:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800d2d8 <Ms_Init+0x2ec>
 800d228:	2101      	movs	r1, #1
 800d22a:	2000      	movs	r0, #0
 800d22c:	f7f4 febc 	bl	8001fa8 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d002      	beq.n	800d23c <Ms_Init+0x250>
 800d236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d238:	3b01      	subs	r3, #1
 800d23a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_GYRO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800d23c:	1d3b      	adds	r3, r7, #4
 800d23e:	461a      	mov	r2, r3
 800d240:	2101      	movs	r1, #1
 800d242:	2000      	movs	r0, #0
 800d244:	f7f4 fe4c 	bl	8001ee0 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d002      	beq.n	800d254 <Ms_Init+0x268>
 800d24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d250:	3b01      	subs	r3, #1
 800d252:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 3333.0f) result--;
 800d254:	edd7 7a01 	vldr	s15, [r7, #4]
 800d258:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800d2d8 <Ms_Init+0x2ec>
 800d25c:	eef4 7a47 	vcmp.f32	s15, s14
 800d260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d264:	d002      	beq.n	800d26c <Ms_Init+0x280>
 800d266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d268:	3b01      	subs	r3, #1
 800d26a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_GYRO, 208.0f) != BSP_ERROR_NONE) result--;
 800d26c:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800d2dc <Ms_Init+0x2f0>
 800d270:	2101      	movs	r1, #1
 800d272:	2000      	movs	r0, #0
 800d274:	f7f4 fe98 	bl	8001fa8 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d002      	beq.n	800d284 <Ms_Init+0x298>
 800d27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d280:	3b01      	subs	r3, #1
 800d282:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_GYRO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800d284:	1d3b      	adds	r3, r7, #4
 800d286:	461a      	mov	r2, r3
 800d288:	2101      	movs	r1, #1
 800d28a:	2000      	movs	r0, #0
 800d28c:	f7f4 fe28 	bl	8001ee0 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d002      	beq.n	800d29c <Ms_Init+0x2b0>
 800d296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d298:	3b01      	subs	r3, #1
 800d29a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 208.0f) result--;
 800d29c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d2a0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800d2dc <Ms_Init+0x2f0>
 800d2a4:	eef4 7a47 	vcmp.f32	s15, s14
 800d2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ac:	d002      	beq.n	800d2b4 <Ms_Init+0x2c8>
 800d2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetSensitivity function */
	if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_GYRO, &sensitivity) != BSP_ERROR_NONE) result--;
 800d2b4:	f107 0308 	add.w	r3, r7, #8
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	2101      	movs	r1, #1
 800d2bc:	2000      	movs	r0, #0
 800d2be:	f7f4 fdab 	bl	8001e18 <BSP_MOTION_SENSOR_GetSensitivity>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d002      	beq.n	800d2ce <Ms_Init+0x2e2>
 800d2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return result;
 800d2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3730      	adds	r7, #48	@ 0x30
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	45505000 	.word	0x45505000
 800d2dc:	43500000 	.word	0x43500000

0800d2e0 <HAL_MspInit>:
/**
  * @brief  Initialize the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 800d2e4:	bf00      	nop
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr

0800d2ee <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800d2ee:	b480      	push	{r7}
 800d2f0:	af00      	add	r7, sp, #0
}
 800d2f2:	bf00      	nop
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800d300:	e7fe      	b.n	800d300 <HardFault_Handler+0x4>

0800d302 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800d302:	b480      	push	{r7}
 800d304:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800d306:	e7fe      	b.n	800d306 <MemManage_Handler+0x4>

0800d308 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800d308:	b480      	push	{r7}
 800d30a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800d30c:	e7fe      	b.n	800d30c <BusFault_Handler+0x4>

0800d30e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800d30e:	b480      	push	{r7}
 800d310:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800d312:	e7fe      	b.n	800d312 <UsageFault_Handler+0x4>

0800d314 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800d314:	b480      	push	{r7}
 800d316:	af00      	add	r7, sp, #0
}
 800d318:	bf00      	nop
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr

0800d322 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800d322:	b480      	push	{r7}
 800d324:	af00      	add	r7, sp, #0
  while (1)
 800d326:	e7fe      	b.n	800d326 <DebugMon_Handler+0x4>

0800d328 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800d328:	b480      	push	{r7}
 800d32a:	af00      	add	r7, sp, #0
  while (1)
 800d32c:	e7fe      	b.n	800d32c <PendSV_Handler+0x4>

0800d32e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800d332:	f7f7 fc5f 	bl	8004bf4 <HAL_IncTick>
}
 800d336:	bf00      	nop
 800d338:	bd80      	pop	{r7, pc}

0800d33a <GPDMA1_Channel0_IRQHandler>:
  * @brief  This function handles GPDMA_Channel0 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_DIGITAL_MIC2);
 800d33e:	2102      	movs	r1, #2
 800d340:	2000      	movs	r0, #0
 800d342:	f7f3 ff29 	bl	8001198 <BSP_AUDIO_IN_IRQHandler>
}
 800d346:	bf00      	nop
 800d348:	bd80      	pop	{r7, pc}

0800d34a <GPDMA1_Channel6_IRQHandler>:
  * @brief  This function handles GPDMA_Channel6 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel6_IRQHandler(void)
{
 800d34a:	b580      	push	{r7, lr}
 800d34c:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_DIGITAL_MIC1);
 800d34e:	2101      	movs	r1, #1
 800d350:	2000      	movs	r0, #0
 800d352:	f7f3 ff21 	bl	8001198 <BSP_AUDIO_IN_IRQHandler>
} 
 800d356:	bf00      	nop
 800d358:	bd80      	pop	{r7, pc}
	...

0800d35c <EXTI13_IRQHandler>:
  * @brief  This function handles EXTI13 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI13_IRQHandler(void)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&hpb_exti[0]);
 800d360:	4802      	ldr	r0, [pc, #8]	@ (800d36c <EXTI13_IRQHandler+0x10>)
 800d362:	f7f8 f827 	bl	80053b4 <HAL_EXTI_IRQHandler>
}
 800d366:	bf00      	nop
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	200002ac 	.word	0x200002ac

0800d370 <DCMI_PSSI_IRQHandler>:
  * @brief  This function handles DCMI_PSSI interrupt request.
  * @param  None
  * @retval None
  */
void DCMI_PSSI_IRQHandler(void)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	af00      	add	r7, sp, #0
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 800d374:	4802      	ldr	r0, [pc, #8]	@ (800d380 <DCMI_PSSI_IRQHandler+0x10>)
 800d376:	f7f7 fd91 	bl	8004e9c <HAL_DCMI_IRQHandler>
}
 800d37a:	bf00      	nop
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	20000dfc 	.word	0x20000dfc

0800d384 <GPDMA1_Channel12_IRQHandler>:
  * @brief  This function handles GPDMA_Channel12 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 800d388:	4b03      	ldr	r3, [pc, #12]	@ (800d398 <GPDMA1_Channel12_IRQHandler+0x14>)
 800d38a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7f7 fe5d 	bl	800504c <HAL_DMA_IRQHandler>
}
 800d392:	bf00      	nop
 800d394:	bd80      	pop	{r7, pc}
 800d396:	bf00      	nop
 800d398:	20000dfc 	.word	0x20000dfc

0800d39c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d3a4:	4a14      	ldr	r2, [pc, #80]	@ (800d3f8 <_sbrk+0x5c>)
 800d3a6:	4b15      	ldr	r3, [pc, #84]	@ (800d3fc <_sbrk+0x60>)
 800d3a8:	1ad3      	subs	r3, r2, r3
 800d3aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d3b0:	4b13      	ldr	r3, [pc, #76]	@ (800d400 <_sbrk+0x64>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d102      	bne.n	800d3be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d3b8:	4b11      	ldr	r3, [pc, #68]	@ (800d400 <_sbrk+0x64>)
 800d3ba:	4a12      	ldr	r2, [pc, #72]	@ (800d404 <_sbrk+0x68>)
 800d3bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d3be:	4b10      	ldr	r3, [pc, #64]	@ (800d400 <_sbrk+0x64>)
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	693a      	ldr	r2, [r7, #16]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d207      	bcs.n	800d3dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d3cc:	f000 fe28 	bl	800e020 <__errno>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	220c      	movs	r2, #12
 800d3d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d3d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d3da:	e009      	b.n	800d3f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d3dc:	4b08      	ldr	r3, [pc, #32]	@ (800d400 <_sbrk+0x64>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d3e2:	4b07      	ldr	r3, [pc, #28]	@ (800d400 <_sbrk+0x64>)
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	4a05      	ldr	r2, [pc, #20]	@ (800d400 <_sbrk+0x64>)
 800d3ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3718      	adds	r7, #24
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	200c0000 	.word	0x200c0000
 800d3fc:	00001000 	.word	0x00001000
 800d400:	20000f70 	.word	0x20000f70
 800d404:	20001170 	.word	0x20001170

0800d408 <__cvt>:
 800d408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d40c:	ec57 6b10 	vmov	r6, r7, d0
 800d410:	2f00      	cmp	r7, #0
 800d412:	460c      	mov	r4, r1
 800d414:	4619      	mov	r1, r3
 800d416:	463b      	mov	r3, r7
 800d418:	bfb4      	ite	lt
 800d41a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d41e:	2300      	movge	r3, #0
 800d420:	4691      	mov	r9, r2
 800d422:	bfbf      	itttt	lt
 800d424:	4632      	movlt	r2, r6
 800d426:	461f      	movlt	r7, r3
 800d428:	232d      	movlt	r3, #45	@ 0x2d
 800d42a:	4616      	movlt	r6, r2
 800d42c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d430:	700b      	strb	r3, [r1, #0]
 800d432:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d434:	f023 0820 	bic.w	r8, r3, #32
 800d438:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d43c:	d005      	beq.n	800d44a <__cvt+0x42>
 800d43e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d442:	d100      	bne.n	800d446 <__cvt+0x3e>
 800d444:	3401      	adds	r4, #1
 800d446:	2102      	movs	r1, #2
 800d448:	e000      	b.n	800d44c <__cvt+0x44>
 800d44a:	2103      	movs	r1, #3
 800d44c:	ab03      	add	r3, sp, #12
 800d44e:	4622      	mov	r2, r4
 800d450:	9301      	str	r3, [sp, #4]
 800d452:	ab02      	add	r3, sp, #8
 800d454:	ec47 6b10 	vmov	d0, r6, r7
 800d458:	9300      	str	r3, [sp, #0]
 800d45a:	4653      	mov	r3, sl
 800d45c:	f000 fed4 	bl	800e208 <_dtoa_r>
 800d460:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d464:	4605      	mov	r5, r0
 800d466:	d119      	bne.n	800d49c <__cvt+0x94>
 800d468:	f019 0f01 	tst.w	r9, #1
 800d46c:	d00e      	beq.n	800d48c <__cvt+0x84>
 800d46e:	eb00 0904 	add.w	r9, r0, r4
 800d472:	2200      	movs	r2, #0
 800d474:	2300      	movs	r3, #0
 800d476:	4630      	mov	r0, r6
 800d478:	4639      	mov	r1, r7
 800d47a:	f7f3 fb29 	bl	8000ad0 <__aeabi_dcmpeq>
 800d47e:	b108      	cbz	r0, 800d484 <__cvt+0x7c>
 800d480:	f8cd 900c 	str.w	r9, [sp, #12]
 800d484:	2230      	movs	r2, #48	@ 0x30
 800d486:	9b03      	ldr	r3, [sp, #12]
 800d488:	454b      	cmp	r3, r9
 800d48a:	d31e      	bcc.n	800d4ca <__cvt+0xc2>
 800d48c:	9b03      	ldr	r3, [sp, #12]
 800d48e:	4628      	mov	r0, r5
 800d490:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d492:	1b5b      	subs	r3, r3, r5
 800d494:	6013      	str	r3, [r2, #0]
 800d496:	b004      	add	sp, #16
 800d498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d49c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d4a0:	eb00 0904 	add.w	r9, r0, r4
 800d4a4:	d1e5      	bne.n	800d472 <__cvt+0x6a>
 800d4a6:	7803      	ldrb	r3, [r0, #0]
 800d4a8:	2b30      	cmp	r3, #48	@ 0x30
 800d4aa:	d10a      	bne.n	800d4c2 <__cvt+0xba>
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	4639      	mov	r1, r7
 800d4b4:	f7f3 fb0c 	bl	8000ad0 <__aeabi_dcmpeq>
 800d4b8:	b918      	cbnz	r0, 800d4c2 <__cvt+0xba>
 800d4ba:	f1c4 0401 	rsb	r4, r4, #1
 800d4be:	f8ca 4000 	str.w	r4, [sl]
 800d4c2:	f8da 3000 	ldr.w	r3, [sl]
 800d4c6:	4499      	add	r9, r3
 800d4c8:	e7d3      	b.n	800d472 <__cvt+0x6a>
 800d4ca:	1c59      	adds	r1, r3, #1
 800d4cc:	9103      	str	r1, [sp, #12]
 800d4ce:	701a      	strb	r2, [r3, #0]
 800d4d0:	e7d9      	b.n	800d486 <__cvt+0x7e>

0800d4d2 <__exponent>:
 800d4d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4d4:	2900      	cmp	r1, #0
 800d4d6:	7002      	strb	r2, [r0, #0]
 800d4d8:	bfba      	itte	lt
 800d4da:	4249      	neglt	r1, r1
 800d4dc:	232d      	movlt	r3, #45	@ 0x2d
 800d4de:	232b      	movge	r3, #43	@ 0x2b
 800d4e0:	2909      	cmp	r1, #9
 800d4e2:	7043      	strb	r3, [r0, #1]
 800d4e4:	dd28      	ble.n	800d538 <__exponent+0x66>
 800d4e6:	f10d 0307 	add.w	r3, sp, #7
 800d4ea:	270a      	movs	r7, #10
 800d4ec:	461d      	mov	r5, r3
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	fbb1 f6f7 	udiv	r6, r1, r7
 800d4f6:	fb07 1416 	mls	r4, r7, r6, r1
 800d4fa:	3430      	adds	r4, #48	@ 0x30
 800d4fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d500:	460c      	mov	r4, r1
 800d502:	4631      	mov	r1, r6
 800d504:	2c63      	cmp	r4, #99	@ 0x63
 800d506:	dcf2      	bgt.n	800d4ee <__exponent+0x1c>
 800d508:	3130      	adds	r1, #48	@ 0x30
 800d50a:	1e94      	subs	r4, r2, #2
 800d50c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d510:	1c41      	adds	r1, r0, #1
 800d512:	4623      	mov	r3, r4
 800d514:	42ab      	cmp	r3, r5
 800d516:	d30a      	bcc.n	800d52e <__exponent+0x5c>
 800d518:	f10d 0309 	add.w	r3, sp, #9
 800d51c:	1a9b      	subs	r3, r3, r2
 800d51e:	42ac      	cmp	r4, r5
 800d520:	bf88      	it	hi
 800d522:	2300      	movhi	r3, #0
 800d524:	3302      	adds	r3, #2
 800d526:	4403      	add	r3, r0
 800d528:	1a18      	subs	r0, r3, r0
 800d52a:	b003      	add	sp, #12
 800d52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d52e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d532:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d536:	e7ed      	b.n	800d514 <__exponent+0x42>
 800d538:	2330      	movs	r3, #48	@ 0x30
 800d53a:	3130      	adds	r1, #48	@ 0x30
 800d53c:	7083      	strb	r3, [r0, #2]
 800d53e:	1d03      	adds	r3, r0, #4
 800d540:	70c1      	strb	r1, [r0, #3]
 800d542:	e7f1      	b.n	800d528 <__exponent+0x56>

0800d544 <_printf_float>:
 800d544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d548:	b08d      	sub	sp, #52	@ 0x34
 800d54a:	460c      	mov	r4, r1
 800d54c:	4616      	mov	r6, r2
 800d54e:	461f      	mov	r7, r3
 800d550:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d554:	4605      	mov	r5, r0
 800d556:	f000 fd5f 	bl	800e018 <_localeconv_r>
 800d55a:	6803      	ldr	r3, [r0, #0]
 800d55c:	4618      	mov	r0, r3
 800d55e:	9304      	str	r3, [sp, #16]
 800d560:	f7f2 fe8a 	bl	8000278 <strlen>
 800d564:	2300      	movs	r3, #0
 800d566:	9005      	str	r0, [sp, #20]
 800d568:	930a      	str	r3, [sp, #40]	@ 0x28
 800d56a:	f8d8 3000 	ldr.w	r3, [r8]
 800d56e:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d572:	3307      	adds	r3, #7
 800d574:	f8d4 b000 	ldr.w	fp, [r4]
 800d578:	f023 0307 	bic.w	r3, r3, #7
 800d57c:	f103 0208 	add.w	r2, r3, #8
 800d580:	f8c8 2000 	str.w	r2, [r8]
 800d584:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d588:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d58c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d590:	f8cd 8018 	str.w	r8, [sp, #24]
 800d594:	9307      	str	r3, [sp, #28]
 800d596:	4b9d      	ldr	r3, [pc, #628]	@ (800d80c <_printf_float+0x2c8>)
 800d598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d59c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d5a0:	f7f3 fac8 	bl	8000b34 <__aeabi_dcmpun>
 800d5a4:	bb70      	cbnz	r0, 800d604 <_printf_float+0xc0>
 800d5a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d5aa:	4b98      	ldr	r3, [pc, #608]	@ (800d80c <_printf_float+0x2c8>)
 800d5ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5b0:	f7f3 faa2 	bl	8000af8 <__aeabi_dcmple>
 800d5b4:	bb30      	cbnz	r0, 800d604 <_printf_float+0xc0>
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	4640      	mov	r0, r8
 800d5bc:	4649      	mov	r1, r9
 800d5be:	f7f3 fa91 	bl	8000ae4 <__aeabi_dcmplt>
 800d5c2:	b110      	cbz	r0, 800d5ca <_printf_float+0x86>
 800d5c4:	232d      	movs	r3, #45	@ 0x2d
 800d5c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5ca:	4a91      	ldr	r2, [pc, #580]	@ (800d810 <_printf_float+0x2cc>)
 800d5cc:	4b91      	ldr	r3, [pc, #580]	@ (800d814 <_printf_float+0x2d0>)
 800d5ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d5d2:	bf94      	ite	ls
 800d5d4:	4690      	movls	r8, r2
 800d5d6:	4698      	movhi	r8, r3
 800d5d8:	2303      	movs	r3, #3
 800d5da:	f04f 0900 	mov.w	r9, #0
 800d5de:	6123      	str	r3, [r4, #16]
 800d5e0:	f02b 0304 	bic.w	r3, fp, #4
 800d5e4:	6023      	str	r3, [r4, #0]
 800d5e6:	4633      	mov	r3, r6
 800d5e8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d5ea:	4621      	mov	r1, r4
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	9700      	str	r7, [sp, #0]
 800d5f0:	f000 f9d2 	bl	800d998 <_printf_common>
 800d5f4:	3001      	adds	r0, #1
 800d5f6:	f040 808d 	bne.w	800d714 <_printf_float+0x1d0>
 800d5fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d5fe:	b00d      	add	sp, #52	@ 0x34
 800d600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d604:	4642      	mov	r2, r8
 800d606:	464b      	mov	r3, r9
 800d608:	4640      	mov	r0, r8
 800d60a:	4649      	mov	r1, r9
 800d60c:	f7f3 fa92 	bl	8000b34 <__aeabi_dcmpun>
 800d610:	b140      	cbz	r0, 800d624 <_printf_float+0xe0>
 800d612:	464b      	mov	r3, r9
 800d614:	4a80      	ldr	r2, [pc, #512]	@ (800d818 <_printf_float+0x2d4>)
 800d616:	2b00      	cmp	r3, #0
 800d618:	bfbc      	itt	lt
 800d61a:	232d      	movlt	r3, #45	@ 0x2d
 800d61c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d620:	4b7e      	ldr	r3, [pc, #504]	@ (800d81c <_printf_float+0x2d8>)
 800d622:	e7d4      	b.n	800d5ce <_printf_float+0x8a>
 800d624:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d628:	6863      	ldr	r3, [r4, #4]
 800d62a:	9206      	str	r2, [sp, #24]
 800d62c:	1c5a      	adds	r2, r3, #1
 800d62e:	d13b      	bne.n	800d6a8 <_printf_float+0x164>
 800d630:	2306      	movs	r3, #6
 800d632:	6063      	str	r3, [r4, #4]
 800d634:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d638:	2300      	movs	r3, #0
 800d63a:	4628      	mov	r0, r5
 800d63c:	6022      	str	r2, [r4, #0]
 800d63e:	9303      	str	r3, [sp, #12]
 800d640:	ab0a      	add	r3, sp, #40	@ 0x28
 800d642:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d646:	ab09      	add	r3, sp, #36	@ 0x24
 800d648:	ec49 8b10 	vmov	d0, r8, r9
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d652:	6861      	ldr	r1, [r4, #4]
 800d654:	f7ff fed8 	bl	800d408 <__cvt>
 800d658:	9b06      	ldr	r3, [sp, #24]
 800d65a:	4680      	mov	r8, r0
 800d65c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d65e:	2b47      	cmp	r3, #71	@ 0x47
 800d660:	d129      	bne.n	800d6b6 <_printf_float+0x172>
 800d662:	1cc8      	adds	r0, r1, #3
 800d664:	db02      	blt.n	800d66c <_printf_float+0x128>
 800d666:	6863      	ldr	r3, [r4, #4]
 800d668:	4299      	cmp	r1, r3
 800d66a:	dd41      	ble.n	800d6f0 <_printf_float+0x1ac>
 800d66c:	f1aa 0a02 	sub.w	sl, sl, #2
 800d670:	fa5f fa8a 	uxtb.w	sl, sl
 800d674:	3901      	subs	r1, #1
 800d676:	4652      	mov	r2, sl
 800d678:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d67c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d67e:	f7ff ff28 	bl	800d4d2 <__exponent>
 800d682:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d684:	4681      	mov	r9, r0
 800d686:	1813      	adds	r3, r2, r0
 800d688:	2a01      	cmp	r2, #1
 800d68a:	6123      	str	r3, [r4, #16]
 800d68c:	dc02      	bgt.n	800d694 <_printf_float+0x150>
 800d68e:	6822      	ldr	r2, [r4, #0]
 800d690:	07d2      	lsls	r2, r2, #31
 800d692:	d501      	bpl.n	800d698 <_printf_float+0x154>
 800d694:	3301      	adds	r3, #1
 800d696:	6123      	str	r3, [r4, #16]
 800d698:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d0a2      	beq.n	800d5e6 <_printf_float+0xa2>
 800d6a0:	232d      	movs	r3, #45	@ 0x2d
 800d6a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6a6:	e79e      	b.n	800d5e6 <_printf_float+0xa2>
 800d6a8:	9a06      	ldr	r2, [sp, #24]
 800d6aa:	2a47      	cmp	r2, #71	@ 0x47
 800d6ac:	d1c2      	bne.n	800d634 <_printf_float+0xf0>
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1c0      	bne.n	800d634 <_printf_float+0xf0>
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e7bd      	b.n	800d632 <_printf_float+0xee>
 800d6b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d6ba:	d9db      	bls.n	800d674 <_printf_float+0x130>
 800d6bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d6c0:	d118      	bne.n	800d6f4 <_printf_float+0x1b0>
 800d6c2:	2900      	cmp	r1, #0
 800d6c4:	6863      	ldr	r3, [r4, #4]
 800d6c6:	dd0b      	ble.n	800d6e0 <_printf_float+0x19c>
 800d6c8:	6121      	str	r1, [r4, #16]
 800d6ca:	b913      	cbnz	r3, 800d6d2 <_printf_float+0x18e>
 800d6cc:	6822      	ldr	r2, [r4, #0]
 800d6ce:	07d0      	lsls	r0, r2, #31
 800d6d0:	d502      	bpl.n	800d6d8 <_printf_float+0x194>
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	440b      	add	r3, r1
 800d6d6:	6123      	str	r3, [r4, #16]
 800d6d8:	f04f 0900 	mov.w	r9, #0
 800d6dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d6de:	e7db      	b.n	800d698 <_printf_float+0x154>
 800d6e0:	b913      	cbnz	r3, 800d6e8 <_printf_float+0x1a4>
 800d6e2:	6822      	ldr	r2, [r4, #0]
 800d6e4:	07d2      	lsls	r2, r2, #31
 800d6e6:	d501      	bpl.n	800d6ec <_printf_float+0x1a8>
 800d6e8:	3302      	adds	r3, #2
 800d6ea:	e7f4      	b.n	800d6d6 <_printf_float+0x192>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e7f2      	b.n	800d6d6 <_printf_float+0x192>
 800d6f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d6f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6f6:	4299      	cmp	r1, r3
 800d6f8:	db05      	blt.n	800d706 <_printf_float+0x1c2>
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	6121      	str	r1, [r4, #16]
 800d6fe:	07d8      	lsls	r0, r3, #31
 800d700:	d5ea      	bpl.n	800d6d8 <_printf_float+0x194>
 800d702:	1c4b      	adds	r3, r1, #1
 800d704:	e7e7      	b.n	800d6d6 <_printf_float+0x192>
 800d706:	2900      	cmp	r1, #0
 800d708:	bfd4      	ite	le
 800d70a:	f1c1 0202 	rsble	r2, r1, #2
 800d70e:	2201      	movgt	r2, #1
 800d710:	4413      	add	r3, r2
 800d712:	e7e0      	b.n	800d6d6 <_printf_float+0x192>
 800d714:	6823      	ldr	r3, [r4, #0]
 800d716:	055a      	lsls	r2, r3, #21
 800d718:	d407      	bmi.n	800d72a <_printf_float+0x1e6>
 800d71a:	6923      	ldr	r3, [r4, #16]
 800d71c:	4642      	mov	r2, r8
 800d71e:	4631      	mov	r1, r6
 800d720:	4628      	mov	r0, r5
 800d722:	47b8      	blx	r7
 800d724:	3001      	adds	r0, #1
 800d726:	d12b      	bne.n	800d780 <_printf_float+0x23c>
 800d728:	e767      	b.n	800d5fa <_printf_float+0xb6>
 800d72a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d72e:	f240 80dd 	bls.w	800d8ec <_printf_float+0x3a8>
 800d732:	2200      	movs	r2, #0
 800d734:	2300      	movs	r3, #0
 800d736:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d73a:	f7f3 f9c9 	bl	8000ad0 <__aeabi_dcmpeq>
 800d73e:	2800      	cmp	r0, #0
 800d740:	d033      	beq.n	800d7aa <_printf_float+0x266>
 800d742:	2301      	movs	r3, #1
 800d744:	4a36      	ldr	r2, [pc, #216]	@ (800d820 <_printf_float+0x2dc>)
 800d746:	4631      	mov	r1, r6
 800d748:	4628      	mov	r0, r5
 800d74a:	47b8      	blx	r7
 800d74c:	3001      	adds	r0, #1
 800d74e:	f43f af54 	beq.w	800d5fa <_printf_float+0xb6>
 800d752:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d756:	4543      	cmp	r3, r8
 800d758:	db02      	blt.n	800d760 <_printf_float+0x21c>
 800d75a:	6823      	ldr	r3, [r4, #0]
 800d75c:	07d8      	lsls	r0, r3, #31
 800d75e:	d50f      	bpl.n	800d780 <_printf_float+0x23c>
 800d760:	4631      	mov	r1, r6
 800d762:	4628      	mov	r0, r5
 800d764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d768:	47b8      	blx	r7
 800d76a:	3001      	adds	r0, #1
 800d76c:	f43f af45 	beq.w	800d5fa <_printf_float+0xb6>
 800d770:	f04f 0900 	mov.w	r9, #0
 800d774:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d778:	f104 0a1a 	add.w	sl, r4, #26
 800d77c:	45c8      	cmp	r8, r9
 800d77e:	dc09      	bgt.n	800d794 <_printf_float+0x250>
 800d780:	6823      	ldr	r3, [r4, #0]
 800d782:	079b      	lsls	r3, r3, #30
 800d784:	f100 8103 	bmi.w	800d98e <_printf_float+0x44a>
 800d788:	68e0      	ldr	r0, [r4, #12]
 800d78a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d78c:	4298      	cmp	r0, r3
 800d78e:	bfb8      	it	lt
 800d790:	4618      	movlt	r0, r3
 800d792:	e734      	b.n	800d5fe <_printf_float+0xba>
 800d794:	2301      	movs	r3, #1
 800d796:	4652      	mov	r2, sl
 800d798:	4631      	mov	r1, r6
 800d79a:	4628      	mov	r0, r5
 800d79c:	47b8      	blx	r7
 800d79e:	3001      	adds	r0, #1
 800d7a0:	f43f af2b 	beq.w	800d5fa <_printf_float+0xb6>
 800d7a4:	f109 0901 	add.w	r9, r9, #1
 800d7a8:	e7e8      	b.n	800d77c <_printf_float+0x238>
 800d7aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	dc39      	bgt.n	800d824 <_printf_float+0x2e0>
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	4a1b      	ldr	r2, [pc, #108]	@ (800d820 <_printf_float+0x2dc>)
 800d7b4:	4631      	mov	r1, r6
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	47b8      	blx	r7
 800d7ba:	3001      	adds	r0, #1
 800d7bc:	f43f af1d 	beq.w	800d5fa <_printf_float+0xb6>
 800d7c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d7c4:	ea59 0303 	orrs.w	r3, r9, r3
 800d7c8:	d102      	bne.n	800d7d0 <_printf_float+0x28c>
 800d7ca:	6823      	ldr	r3, [r4, #0]
 800d7cc:	07d9      	lsls	r1, r3, #31
 800d7ce:	d5d7      	bpl.n	800d780 <_printf_float+0x23c>
 800d7d0:	4631      	mov	r1, r6
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7d8:	47b8      	blx	r7
 800d7da:	3001      	adds	r0, #1
 800d7dc:	f43f af0d 	beq.w	800d5fa <_printf_float+0xb6>
 800d7e0:	f04f 0a00 	mov.w	sl, #0
 800d7e4:	f104 0b1a 	add.w	fp, r4, #26
 800d7e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ea:	425b      	negs	r3, r3
 800d7ec:	4553      	cmp	r3, sl
 800d7ee:	dc01      	bgt.n	800d7f4 <_printf_float+0x2b0>
 800d7f0:	464b      	mov	r3, r9
 800d7f2:	e793      	b.n	800d71c <_printf_float+0x1d8>
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	465a      	mov	r2, fp
 800d7f8:	4631      	mov	r1, r6
 800d7fa:	4628      	mov	r0, r5
 800d7fc:	47b8      	blx	r7
 800d7fe:	3001      	adds	r0, #1
 800d800:	f43f aefb 	beq.w	800d5fa <_printf_float+0xb6>
 800d804:	f10a 0a01 	add.w	sl, sl, #1
 800d808:	e7ee      	b.n	800d7e8 <_printf_float+0x2a4>
 800d80a:	bf00      	nop
 800d80c:	7fefffff 	.word	0x7fefffff
 800d810:	08011aa0 	.word	0x08011aa0
 800d814:	08011aa4 	.word	0x08011aa4
 800d818:	08011aa8 	.word	0x08011aa8
 800d81c:	08011aac 	.word	0x08011aac
 800d820:	08011ab0 	.word	0x08011ab0
 800d824:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d826:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d82a:	4553      	cmp	r3, sl
 800d82c:	bfa8      	it	ge
 800d82e:	4653      	movge	r3, sl
 800d830:	2b00      	cmp	r3, #0
 800d832:	4699      	mov	r9, r3
 800d834:	dc36      	bgt.n	800d8a4 <_printf_float+0x360>
 800d836:	f04f 0b00 	mov.w	fp, #0
 800d83a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d83e:	f104 021a 	add.w	r2, r4, #26
 800d842:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d844:	9306      	str	r3, [sp, #24]
 800d846:	eba3 0309 	sub.w	r3, r3, r9
 800d84a:	455b      	cmp	r3, fp
 800d84c:	dc31      	bgt.n	800d8b2 <_printf_float+0x36e>
 800d84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d850:	459a      	cmp	sl, r3
 800d852:	dc3a      	bgt.n	800d8ca <_printf_float+0x386>
 800d854:	6823      	ldr	r3, [r4, #0]
 800d856:	07da      	lsls	r2, r3, #31
 800d858:	d437      	bmi.n	800d8ca <_printf_float+0x386>
 800d85a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d85c:	ebaa 0903 	sub.w	r9, sl, r3
 800d860:	9b06      	ldr	r3, [sp, #24]
 800d862:	ebaa 0303 	sub.w	r3, sl, r3
 800d866:	4599      	cmp	r9, r3
 800d868:	bfa8      	it	ge
 800d86a:	4699      	movge	r9, r3
 800d86c:	f1b9 0f00 	cmp.w	r9, #0
 800d870:	dc33      	bgt.n	800d8da <_printf_float+0x396>
 800d872:	f04f 0800 	mov.w	r8, #0
 800d876:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d87a:	f104 0b1a 	add.w	fp, r4, #26
 800d87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d880:	ebaa 0303 	sub.w	r3, sl, r3
 800d884:	eba3 0309 	sub.w	r3, r3, r9
 800d888:	4543      	cmp	r3, r8
 800d88a:	f77f af79 	ble.w	800d780 <_printf_float+0x23c>
 800d88e:	2301      	movs	r3, #1
 800d890:	465a      	mov	r2, fp
 800d892:	4631      	mov	r1, r6
 800d894:	4628      	mov	r0, r5
 800d896:	47b8      	blx	r7
 800d898:	3001      	adds	r0, #1
 800d89a:	f43f aeae 	beq.w	800d5fa <_printf_float+0xb6>
 800d89e:	f108 0801 	add.w	r8, r8, #1
 800d8a2:	e7ec      	b.n	800d87e <_printf_float+0x33a>
 800d8a4:	4642      	mov	r2, r8
 800d8a6:	4631      	mov	r1, r6
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	47b8      	blx	r7
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	d1c2      	bne.n	800d836 <_printf_float+0x2f2>
 800d8b0:	e6a3      	b.n	800d5fa <_printf_float+0xb6>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	4631      	mov	r1, r6
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	9206      	str	r2, [sp, #24]
 800d8ba:	47b8      	blx	r7
 800d8bc:	3001      	adds	r0, #1
 800d8be:	f43f ae9c 	beq.w	800d5fa <_printf_float+0xb6>
 800d8c2:	f10b 0b01 	add.w	fp, fp, #1
 800d8c6:	9a06      	ldr	r2, [sp, #24]
 800d8c8:	e7bb      	b.n	800d842 <_printf_float+0x2fe>
 800d8ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8ce:	4631      	mov	r1, r6
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	47b8      	blx	r7
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	d1c0      	bne.n	800d85a <_printf_float+0x316>
 800d8d8:	e68f      	b.n	800d5fa <_printf_float+0xb6>
 800d8da:	9a06      	ldr	r2, [sp, #24]
 800d8dc:	464b      	mov	r3, r9
 800d8de:	4631      	mov	r1, r6
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	4442      	add	r2, r8
 800d8e4:	47b8      	blx	r7
 800d8e6:	3001      	adds	r0, #1
 800d8e8:	d1c3      	bne.n	800d872 <_printf_float+0x32e>
 800d8ea:	e686      	b.n	800d5fa <_printf_float+0xb6>
 800d8ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d8f0:	f1ba 0f01 	cmp.w	sl, #1
 800d8f4:	dc01      	bgt.n	800d8fa <_printf_float+0x3b6>
 800d8f6:	07db      	lsls	r3, r3, #31
 800d8f8:	d536      	bpl.n	800d968 <_printf_float+0x424>
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	4642      	mov	r2, r8
 800d8fe:	4631      	mov	r1, r6
 800d900:	4628      	mov	r0, r5
 800d902:	47b8      	blx	r7
 800d904:	3001      	adds	r0, #1
 800d906:	f43f ae78 	beq.w	800d5fa <_printf_float+0xb6>
 800d90a:	4631      	mov	r1, r6
 800d90c:	4628      	mov	r0, r5
 800d90e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d912:	47b8      	blx	r7
 800d914:	3001      	adds	r0, #1
 800d916:	f43f ae70 	beq.w	800d5fa <_printf_float+0xb6>
 800d91a:	2200      	movs	r2, #0
 800d91c:	2300      	movs	r3, #0
 800d91e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d922:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d926:	f7f3 f8d3 	bl	8000ad0 <__aeabi_dcmpeq>
 800d92a:	b9c0      	cbnz	r0, 800d95e <_printf_float+0x41a>
 800d92c:	4653      	mov	r3, sl
 800d92e:	f108 0201 	add.w	r2, r8, #1
 800d932:	4631      	mov	r1, r6
 800d934:	4628      	mov	r0, r5
 800d936:	47b8      	blx	r7
 800d938:	3001      	adds	r0, #1
 800d93a:	d10c      	bne.n	800d956 <_printf_float+0x412>
 800d93c:	e65d      	b.n	800d5fa <_printf_float+0xb6>
 800d93e:	2301      	movs	r3, #1
 800d940:	465a      	mov	r2, fp
 800d942:	4631      	mov	r1, r6
 800d944:	4628      	mov	r0, r5
 800d946:	47b8      	blx	r7
 800d948:	3001      	adds	r0, #1
 800d94a:	f43f ae56 	beq.w	800d5fa <_printf_float+0xb6>
 800d94e:	f108 0801 	add.w	r8, r8, #1
 800d952:	45d0      	cmp	r8, sl
 800d954:	dbf3      	blt.n	800d93e <_printf_float+0x3fa>
 800d956:	464b      	mov	r3, r9
 800d958:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d95c:	e6df      	b.n	800d71e <_printf_float+0x1da>
 800d95e:	f04f 0800 	mov.w	r8, #0
 800d962:	f104 0b1a 	add.w	fp, r4, #26
 800d966:	e7f4      	b.n	800d952 <_printf_float+0x40e>
 800d968:	2301      	movs	r3, #1
 800d96a:	4642      	mov	r2, r8
 800d96c:	e7e1      	b.n	800d932 <_printf_float+0x3ee>
 800d96e:	2301      	movs	r3, #1
 800d970:	464a      	mov	r2, r9
 800d972:	4631      	mov	r1, r6
 800d974:	4628      	mov	r0, r5
 800d976:	47b8      	blx	r7
 800d978:	3001      	adds	r0, #1
 800d97a:	f43f ae3e 	beq.w	800d5fa <_printf_float+0xb6>
 800d97e:	f108 0801 	add.w	r8, r8, #1
 800d982:	68e3      	ldr	r3, [r4, #12]
 800d984:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d986:	1a5b      	subs	r3, r3, r1
 800d988:	4543      	cmp	r3, r8
 800d98a:	dcf0      	bgt.n	800d96e <_printf_float+0x42a>
 800d98c:	e6fc      	b.n	800d788 <_printf_float+0x244>
 800d98e:	f04f 0800 	mov.w	r8, #0
 800d992:	f104 0919 	add.w	r9, r4, #25
 800d996:	e7f4      	b.n	800d982 <_printf_float+0x43e>

0800d998 <_printf_common>:
 800d998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d99c:	4616      	mov	r6, r2
 800d99e:	4698      	mov	r8, r3
 800d9a0:	688a      	ldr	r2, [r1, #8]
 800d9a2:	4607      	mov	r7, r0
 800d9a4:	690b      	ldr	r3, [r1, #16]
 800d9a6:	460c      	mov	r4, r1
 800d9a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	bfb8      	it	lt
 800d9b0:	4613      	movlt	r3, r2
 800d9b2:	6033      	str	r3, [r6, #0]
 800d9b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d9b8:	b10a      	cbz	r2, 800d9be <_printf_common+0x26>
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	6033      	str	r3, [r6, #0]
 800d9be:	6823      	ldr	r3, [r4, #0]
 800d9c0:	0699      	lsls	r1, r3, #26
 800d9c2:	bf42      	ittt	mi
 800d9c4:	6833      	ldrmi	r3, [r6, #0]
 800d9c6:	3302      	addmi	r3, #2
 800d9c8:	6033      	strmi	r3, [r6, #0]
 800d9ca:	6825      	ldr	r5, [r4, #0]
 800d9cc:	f015 0506 	ands.w	r5, r5, #6
 800d9d0:	d106      	bne.n	800d9e0 <_printf_common+0x48>
 800d9d2:	f104 0a19 	add.w	sl, r4, #25
 800d9d6:	68e3      	ldr	r3, [r4, #12]
 800d9d8:	6832      	ldr	r2, [r6, #0]
 800d9da:	1a9b      	subs	r3, r3, r2
 800d9dc:	42ab      	cmp	r3, r5
 800d9de:	dc2b      	bgt.n	800da38 <_printf_common+0xa0>
 800d9e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d9e4:	6822      	ldr	r2, [r4, #0]
 800d9e6:	3b00      	subs	r3, #0
 800d9e8:	bf18      	it	ne
 800d9ea:	2301      	movne	r3, #1
 800d9ec:	0692      	lsls	r2, r2, #26
 800d9ee:	d430      	bmi.n	800da52 <_printf_common+0xba>
 800d9f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d9f4:	4641      	mov	r1, r8
 800d9f6:	4638      	mov	r0, r7
 800d9f8:	47c8      	blx	r9
 800d9fa:	3001      	adds	r0, #1
 800d9fc:	d023      	beq.n	800da46 <_printf_common+0xae>
 800d9fe:	6823      	ldr	r3, [r4, #0]
 800da00:	341a      	adds	r4, #26
 800da02:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800da06:	f003 0306 	and.w	r3, r3, #6
 800da0a:	2b04      	cmp	r3, #4
 800da0c:	bf0a      	itet	eq
 800da0e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800da12:	2500      	movne	r5, #0
 800da14:	6833      	ldreq	r3, [r6, #0]
 800da16:	f04f 0600 	mov.w	r6, #0
 800da1a:	bf08      	it	eq
 800da1c:	1aed      	subeq	r5, r5, r3
 800da1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800da22:	bf08      	it	eq
 800da24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da28:	4293      	cmp	r3, r2
 800da2a:	bfc4      	itt	gt
 800da2c:	1a9b      	subgt	r3, r3, r2
 800da2e:	18ed      	addgt	r5, r5, r3
 800da30:	42b5      	cmp	r5, r6
 800da32:	d11a      	bne.n	800da6a <_printf_common+0xd2>
 800da34:	2000      	movs	r0, #0
 800da36:	e008      	b.n	800da4a <_printf_common+0xb2>
 800da38:	2301      	movs	r3, #1
 800da3a:	4652      	mov	r2, sl
 800da3c:	4641      	mov	r1, r8
 800da3e:	4638      	mov	r0, r7
 800da40:	47c8      	blx	r9
 800da42:	3001      	adds	r0, #1
 800da44:	d103      	bne.n	800da4e <_printf_common+0xb6>
 800da46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da4e:	3501      	adds	r5, #1
 800da50:	e7c1      	b.n	800d9d6 <_printf_common+0x3e>
 800da52:	18e1      	adds	r1, r4, r3
 800da54:	1c5a      	adds	r2, r3, #1
 800da56:	2030      	movs	r0, #48	@ 0x30
 800da58:	3302      	adds	r3, #2
 800da5a:	4422      	add	r2, r4
 800da5c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da68:	e7c2      	b.n	800d9f0 <_printf_common+0x58>
 800da6a:	2301      	movs	r3, #1
 800da6c:	4622      	mov	r2, r4
 800da6e:	4641      	mov	r1, r8
 800da70:	4638      	mov	r0, r7
 800da72:	47c8      	blx	r9
 800da74:	3001      	adds	r0, #1
 800da76:	d0e6      	beq.n	800da46 <_printf_common+0xae>
 800da78:	3601      	adds	r6, #1
 800da7a:	e7d9      	b.n	800da30 <_printf_common+0x98>

0800da7c <_printf_i>:
 800da7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da80:	7e0f      	ldrb	r7, [r1, #24]
 800da82:	4691      	mov	r9, r2
 800da84:	4680      	mov	r8, r0
 800da86:	460c      	mov	r4, r1
 800da88:	2f78      	cmp	r7, #120	@ 0x78
 800da8a:	469a      	mov	sl, r3
 800da8c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da92:	d807      	bhi.n	800daa4 <_printf_i+0x28>
 800da94:	2f62      	cmp	r7, #98	@ 0x62
 800da96:	d80a      	bhi.n	800daae <_printf_i+0x32>
 800da98:	2f00      	cmp	r7, #0
 800da9a:	f000 80d2 	beq.w	800dc42 <_printf_i+0x1c6>
 800da9e:	2f58      	cmp	r7, #88	@ 0x58
 800daa0:	f000 80b9 	beq.w	800dc16 <_printf_i+0x19a>
 800daa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800daa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800daac:	e03a      	b.n	800db24 <_printf_i+0xa8>
 800daae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dab2:	2b15      	cmp	r3, #21
 800dab4:	d8f6      	bhi.n	800daa4 <_printf_i+0x28>
 800dab6:	a101      	add	r1, pc, #4	@ (adr r1, 800dabc <_printf_i+0x40>)
 800dab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dabc:	0800db15 	.word	0x0800db15
 800dac0:	0800db29 	.word	0x0800db29
 800dac4:	0800daa5 	.word	0x0800daa5
 800dac8:	0800daa5 	.word	0x0800daa5
 800dacc:	0800daa5 	.word	0x0800daa5
 800dad0:	0800daa5 	.word	0x0800daa5
 800dad4:	0800db29 	.word	0x0800db29
 800dad8:	0800daa5 	.word	0x0800daa5
 800dadc:	0800daa5 	.word	0x0800daa5
 800dae0:	0800daa5 	.word	0x0800daa5
 800dae4:	0800daa5 	.word	0x0800daa5
 800dae8:	0800dc29 	.word	0x0800dc29
 800daec:	0800db53 	.word	0x0800db53
 800daf0:	0800dbe3 	.word	0x0800dbe3
 800daf4:	0800daa5 	.word	0x0800daa5
 800daf8:	0800daa5 	.word	0x0800daa5
 800dafc:	0800dc4b 	.word	0x0800dc4b
 800db00:	0800daa5 	.word	0x0800daa5
 800db04:	0800db53 	.word	0x0800db53
 800db08:	0800daa5 	.word	0x0800daa5
 800db0c:	0800daa5 	.word	0x0800daa5
 800db10:	0800dbeb 	.word	0x0800dbeb
 800db14:	6833      	ldr	r3, [r6, #0]
 800db16:	1d1a      	adds	r2, r3, #4
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	6032      	str	r2, [r6, #0]
 800db1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db24:	2301      	movs	r3, #1
 800db26:	e09d      	b.n	800dc64 <_printf_i+0x1e8>
 800db28:	6833      	ldr	r3, [r6, #0]
 800db2a:	6820      	ldr	r0, [r4, #0]
 800db2c:	1d19      	adds	r1, r3, #4
 800db2e:	6031      	str	r1, [r6, #0]
 800db30:	0606      	lsls	r6, r0, #24
 800db32:	d501      	bpl.n	800db38 <_printf_i+0xbc>
 800db34:	681d      	ldr	r5, [r3, #0]
 800db36:	e003      	b.n	800db40 <_printf_i+0xc4>
 800db38:	0645      	lsls	r5, r0, #25
 800db3a:	d5fb      	bpl.n	800db34 <_printf_i+0xb8>
 800db3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db40:	2d00      	cmp	r5, #0
 800db42:	da03      	bge.n	800db4c <_printf_i+0xd0>
 800db44:	232d      	movs	r3, #45	@ 0x2d
 800db46:	426d      	negs	r5, r5
 800db48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db4c:	4859      	ldr	r0, [pc, #356]	@ (800dcb4 <_printf_i+0x238>)
 800db4e:	230a      	movs	r3, #10
 800db50:	e011      	b.n	800db76 <_printf_i+0xfa>
 800db52:	6821      	ldr	r1, [r4, #0]
 800db54:	6833      	ldr	r3, [r6, #0]
 800db56:	0608      	lsls	r0, r1, #24
 800db58:	f853 5b04 	ldr.w	r5, [r3], #4
 800db5c:	d402      	bmi.n	800db64 <_printf_i+0xe8>
 800db5e:	0649      	lsls	r1, r1, #25
 800db60:	bf48      	it	mi
 800db62:	b2ad      	uxthmi	r5, r5
 800db64:	2f6f      	cmp	r7, #111	@ 0x6f
 800db66:	6033      	str	r3, [r6, #0]
 800db68:	4852      	ldr	r0, [pc, #328]	@ (800dcb4 <_printf_i+0x238>)
 800db6a:	bf14      	ite	ne
 800db6c:	230a      	movne	r3, #10
 800db6e:	2308      	moveq	r3, #8
 800db70:	2100      	movs	r1, #0
 800db72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db76:	6866      	ldr	r6, [r4, #4]
 800db78:	2e00      	cmp	r6, #0
 800db7a:	60a6      	str	r6, [r4, #8]
 800db7c:	bfa2      	ittt	ge
 800db7e:	6821      	ldrge	r1, [r4, #0]
 800db80:	f021 0104 	bicge.w	r1, r1, #4
 800db84:	6021      	strge	r1, [r4, #0]
 800db86:	b90d      	cbnz	r5, 800db8c <_printf_i+0x110>
 800db88:	2e00      	cmp	r6, #0
 800db8a:	d04b      	beq.n	800dc24 <_printf_i+0x1a8>
 800db8c:	4616      	mov	r6, r2
 800db8e:	fbb5 f1f3 	udiv	r1, r5, r3
 800db92:	fb03 5711 	mls	r7, r3, r1, r5
 800db96:	5dc7      	ldrb	r7, [r0, r7]
 800db98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db9c:	462f      	mov	r7, r5
 800db9e:	460d      	mov	r5, r1
 800dba0:	42bb      	cmp	r3, r7
 800dba2:	d9f4      	bls.n	800db8e <_printf_i+0x112>
 800dba4:	2b08      	cmp	r3, #8
 800dba6:	d10b      	bne.n	800dbc0 <_printf_i+0x144>
 800dba8:	6823      	ldr	r3, [r4, #0]
 800dbaa:	07df      	lsls	r7, r3, #31
 800dbac:	d508      	bpl.n	800dbc0 <_printf_i+0x144>
 800dbae:	6923      	ldr	r3, [r4, #16]
 800dbb0:	6861      	ldr	r1, [r4, #4]
 800dbb2:	4299      	cmp	r1, r3
 800dbb4:	bfde      	ittt	le
 800dbb6:	2330      	movle	r3, #48	@ 0x30
 800dbb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbbc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800dbc0:	1b92      	subs	r2, r2, r6
 800dbc2:	6122      	str	r2, [r4, #16]
 800dbc4:	464b      	mov	r3, r9
 800dbc6:	aa03      	add	r2, sp, #12
 800dbc8:	4621      	mov	r1, r4
 800dbca:	4640      	mov	r0, r8
 800dbcc:	f8cd a000 	str.w	sl, [sp]
 800dbd0:	f7ff fee2 	bl	800d998 <_printf_common>
 800dbd4:	3001      	adds	r0, #1
 800dbd6:	d14a      	bne.n	800dc6e <_printf_i+0x1f2>
 800dbd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbdc:	b004      	add	sp, #16
 800dbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	f043 0320 	orr.w	r3, r3, #32
 800dbe8:	6023      	str	r3, [r4, #0]
 800dbea:	2778      	movs	r7, #120	@ 0x78
 800dbec:	4832      	ldr	r0, [pc, #200]	@ (800dcb8 <_printf_i+0x23c>)
 800dbee:	6823      	ldr	r3, [r4, #0]
 800dbf0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dbf4:	061f      	lsls	r7, r3, #24
 800dbf6:	6831      	ldr	r1, [r6, #0]
 800dbf8:	f851 5b04 	ldr.w	r5, [r1], #4
 800dbfc:	d402      	bmi.n	800dc04 <_printf_i+0x188>
 800dbfe:	065f      	lsls	r7, r3, #25
 800dc00:	bf48      	it	mi
 800dc02:	b2ad      	uxthmi	r5, r5
 800dc04:	6031      	str	r1, [r6, #0]
 800dc06:	07d9      	lsls	r1, r3, #31
 800dc08:	bf44      	itt	mi
 800dc0a:	f043 0320 	orrmi.w	r3, r3, #32
 800dc0e:	6023      	strmi	r3, [r4, #0]
 800dc10:	b11d      	cbz	r5, 800dc1a <_printf_i+0x19e>
 800dc12:	2310      	movs	r3, #16
 800dc14:	e7ac      	b.n	800db70 <_printf_i+0xf4>
 800dc16:	4827      	ldr	r0, [pc, #156]	@ (800dcb4 <_printf_i+0x238>)
 800dc18:	e7e9      	b.n	800dbee <_printf_i+0x172>
 800dc1a:	6823      	ldr	r3, [r4, #0]
 800dc1c:	f023 0320 	bic.w	r3, r3, #32
 800dc20:	6023      	str	r3, [r4, #0]
 800dc22:	e7f6      	b.n	800dc12 <_printf_i+0x196>
 800dc24:	4616      	mov	r6, r2
 800dc26:	e7bd      	b.n	800dba4 <_printf_i+0x128>
 800dc28:	6833      	ldr	r3, [r6, #0]
 800dc2a:	6825      	ldr	r5, [r4, #0]
 800dc2c:	1d18      	adds	r0, r3, #4
 800dc2e:	6961      	ldr	r1, [r4, #20]
 800dc30:	6030      	str	r0, [r6, #0]
 800dc32:	062e      	lsls	r6, r5, #24
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	d501      	bpl.n	800dc3c <_printf_i+0x1c0>
 800dc38:	6019      	str	r1, [r3, #0]
 800dc3a:	e002      	b.n	800dc42 <_printf_i+0x1c6>
 800dc3c:	0668      	lsls	r0, r5, #25
 800dc3e:	d5fb      	bpl.n	800dc38 <_printf_i+0x1bc>
 800dc40:	8019      	strh	r1, [r3, #0]
 800dc42:	2300      	movs	r3, #0
 800dc44:	4616      	mov	r6, r2
 800dc46:	6123      	str	r3, [r4, #16]
 800dc48:	e7bc      	b.n	800dbc4 <_printf_i+0x148>
 800dc4a:	6833      	ldr	r3, [r6, #0]
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	1d1a      	adds	r2, r3, #4
 800dc50:	6032      	str	r2, [r6, #0]
 800dc52:	681e      	ldr	r6, [r3, #0]
 800dc54:	6862      	ldr	r2, [r4, #4]
 800dc56:	4630      	mov	r0, r6
 800dc58:	f000 fa0f 	bl	800e07a <memchr>
 800dc5c:	b108      	cbz	r0, 800dc62 <_printf_i+0x1e6>
 800dc5e:	1b80      	subs	r0, r0, r6
 800dc60:	6060      	str	r0, [r4, #4]
 800dc62:	6863      	ldr	r3, [r4, #4]
 800dc64:	6123      	str	r3, [r4, #16]
 800dc66:	2300      	movs	r3, #0
 800dc68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc6c:	e7aa      	b.n	800dbc4 <_printf_i+0x148>
 800dc6e:	6923      	ldr	r3, [r4, #16]
 800dc70:	4632      	mov	r2, r6
 800dc72:	4649      	mov	r1, r9
 800dc74:	4640      	mov	r0, r8
 800dc76:	47d0      	blx	sl
 800dc78:	3001      	adds	r0, #1
 800dc7a:	d0ad      	beq.n	800dbd8 <_printf_i+0x15c>
 800dc7c:	6823      	ldr	r3, [r4, #0]
 800dc7e:	079b      	lsls	r3, r3, #30
 800dc80:	d413      	bmi.n	800dcaa <_printf_i+0x22e>
 800dc82:	68e0      	ldr	r0, [r4, #12]
 800dc84:	9b03      	ldr	r3, [sp, #12]
 800dc86:	4298      	cmp	r0, r3
 800dc88:	bfb8      	it	lt
 800dc8a:	4618      	movlt	r0, r3
 800dc8c:	e7a6      	b.n	800dbdc <_printf_i+0x160>
 800dc8e:	2301      	movs	r3, #1
 800dc90:	4632      	mov	r2, r6
 800dc92:	4649      	mov	r1, r9
 800dc94:	4640      	mov	r0, r8
 800dc96:	47d0      	blx	sl
 800dc98:	3001      	adds	r0, #1
 800dc9a:	d09d      	beq.n	800dbd8 <_printf_i+0x15c>
 800dc9c:	3501      	adds	r5, #1
 800dc9e:	68e3      	ldr	r3, [r4, #12]
 800dca0:	9903      	ldr	r1, [sp, #12]
 800dca2:	1a5b      	subs	r3, r3, r1
 800dca4:	42ab      	cmp	r3, r5
 800dca6:	dcf2      	bgt.n	800dc8e <_printf_i+0x212>
 800dca8:	e7eb      	b.n	800dc82 <_printf_i+0x206>
 800dcaa:	2500      	movs	r5, #0
 800dcac:	f104 0619 	add.w	r6, r4, #25
 800dcb0:	e7f5      	b.n	800dc9e <_printf_i+0x222>
 800dcb2:	bf00      	nop
 800dcb4:	08011ab2 	.word	0x08011ab2
 800dcb8:	08011ac3 	.word	0x08011ac3

0800dcbc <srand>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4b10      	ldr	r3, [pc, #64]	@ (800dd00 <srand+0x44>)
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	681d      	ldr	r5, [r3, #0]
 800dcc4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800dcc6:	b9b3      	cbnz	r3, 800dcf6 <srand+0x3a>
 800dcc8:	2018      	movs	r0, #24
 800dcca:	f001 f9a3 	bl	800f014 <malloc>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	6328      	str	r0, [r5, #48]	@ 0x30
 800dcd2:	b920      	cbnz	r0, 800dcde <srand+0x22>
 800dcd4:	4b0b      	ldr	r3, [pc, #44]	@ (800dd04 <srand+0x48>)
 800dcd6:	2146      	movs	r1, #70	@ 0x46
 800dcd8:	480b      	ldr	r0, [pc, #44]	@ (800dd08 <srand+0x4c>)
 800dcda:	f000 f9e9 	bl	800e0b0 <__assert_func>
 800dcde:	490b      	ldr	r1, [pc, #44]	@ (800dd0c <srand+0x50>)
 800dce0:	4b0b      	ldr	r3, [pc, #44]	@ (800dd10 <srand+0x54>)
 800dce2:	e9c0 1300 	strd	r1, r3, [r0]
 800dce6:	4b0b      	ldr	r3, [pc, #44]	@ (800dd14 <srand+0x58>)
 800dce8:	2100      	movs	r1, #0
 800dcea:	6083      	str	r3, [r0, #8]
 800dcec:	230b      	movs	r3, #11
 800dcee:	8183      	strh	r3, [r0, #12]
 800dcf0:	2001      	movs	r0, #1
 800dcf2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800dcf6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	611c      	str	r4, [r3, #16]
 800dcfc:	615a      	str	r2, [r3, #20]
 800dcfe:	bd38      	pop	{r3, r4, r5, pc}
 800dd00:	200000b8 	.word	0x200000b8
 800dd04:	08011ad4 	.word	0x08011ad4
 800dd08:	08011aeb 	.word	0x08011aeb
 800dd0c:	abcd330e 	.word	0xabcd330e
 800dd10:	e66d1234 	.word	0xe66d1234
 800dd14:	0005deec 	.word	0x0005deec

0800dd18 <rand>:
 800dd18:	4b16      	ldr	r3, [pc, #88]	@ (800dd74 <rand+0x5c>)
 800dd1a:	b510      	push	{r4, lr}
 800dd1c:	681c      	ldr	r4, [r3, #0]
 800dd1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dd20:	b9b3      	cbnz	r3, 800dd50 <rand+0x38>
 800dd22:	2018      	movs	r0, #24
 800dd24:	f001 f976 	bl	800f014 <malloc>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	6320      	str	r0, [r4, #48]	@ 0x30
 800dd2c:	b920      	cbnz	r0, 800dd38 <rand+0x20>
 800dd2e:	4b12      	ldr	r3, [pc, #72]	@ (800dd78 <rand+0x60>)
 800dd30:	2152      	movs	r1, #82	@ 0x52
 800dd32:	4812      	ldr	r0, [pc, #72]	@ (800dd7c <rand+0x64>)
 800dd34:	f000 f9bc 	bl	800e0b0 <__assert_func>
 800dd38:	4911      	ldr	r1, [pc, #68]	@ (800dd80 <rand+0x68>)
 800dd3a:	4b12      	ldr	r3, [pc, #72]	@ (800dd84 <rand+0x6c>)
 800dd3c:	e9c0 1300 	strd	r1, r3, [r0]
 800dd40:	4b11      	ldr	r3, [pc, #68]	@ (800dd88 <rand+0x70>)
 800dd42:	2100      	movs	r1, #0
 800dd44:	6083      	str	r3, [r0, #8]
 800dd46:	230b      	movs	r3, #11
 800dd48:	8183      	strh	r3, [r0, #12]
 800dd4a:	2001      	movs	r0, #1
 800dd4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800dd50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dd52:	480e      	ldr	r0, [pc, #56]	@ (800dd8c <rand+0x74>)
 800dd54:	690b      	ldr	r3, [r1, #16]
 800dd56:	694c      	ldr	r4, [r1, #20]
 800dd58:	4a0d      	ldr	r2, [pc, #52]	@ (800dd90 <rand+0x78>)
 800dd5a:	4358      	muls	r0, r3
 800dd5c:	fb02 0004 	mla	r0, r2, r4, r0
 800dd60:	fba3 3202 	umull	r3, r2, r3, r2
 800dd64:	3301      	adds	r3, #1
 800dd66:	eb40 0002 	adc.w	r0, r0, r2
 800dd6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800dd6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800dd72:	bd10      	pop	{r4, pc}
 800dd74:	200000b8 	.word	0x200000b8
 800dd78:	08011ad4 	.word	0x08011ad4
 800dd7c:	08011aeb 	.word	0x08011aeb
 800dd80:	abcd330e 	.word	0xabcd330e
 800dd84:	e66d1234 	.word	0xe66d1234
 800dd88:	0005deec 	.word	0x0005deec
 800dd8c:	5851f42d 	.word	0x5851f42d
 800dd90:	4c957f2d 	.word	0x4c957f2d

0800dd94 <std>:
 800dd94:	2300      	movs	r3, #0
 800dd96:	b510      	push	{r4, lr}
 800dd98:	4604      	mov	r4, r0
 800dd9a:	6083      	str	r3, [r0, #8]
 800dd9c:	8181      	strh	r1, [r0, #12]
 800dd9e:	4619      	mov	r1, r3
 800dda0:	6643      	str	r3, [r0, #100]	@ 0x64
 800dda2:	81c2      	strh	r2, [r0, #14]
 800dda4:	2208      	movs	r2, #8
 800dda6:	6183      	str	r3, [r0, #24]
 800dda8:	e9c0 3300 	strd	r3, r3, [r0]
 800ddac:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ddb0:	305c      	adds	r0, #92	@ 0x5c
 800ddb2:	f000 f929 	bl	800e008 <memset>
 800ddb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ddec <std+0x58>)
 800ddb8:	6224      	str	r4, [r4, #32]
 800ddba:	6263      	str	r3, [r4, #36]	@ 0x24
 800ddbc:	4b0c      	ldr	r3, [pc, #48]	@ (800ddf0 <std+0x5c>)
 800ddbe:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ddc0:	4b0c      	ldr	r3, [pc, #48]	@ (800ddf4 <std+0x60>)
 800ddc2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ddc4:	4b0c      	ldr	r3, [pc, #48]	@ (800ddf8 <std+0x64>)
 800ddc6:	6323      	str	r3, [r4, #48]	@ 0x30
 800ddc8:	4b0c      	ldr	r3, [pc, #48]	@ (800ddfc <std+0x68>)
 800ddca:	429c      	cmp	r4, r3
 800ddcc:	d006      	beq.n	800dddc <std+0x48>
 800ddce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ddd2:	4294      	cmp	r4, r2
 800ddd4:	d002      	beq.n	800dddc <std+0x48>
 800ddd6:	33d0      	adds	r3, #208	@ 0xd0
 800ddd8:	429c      	cmp	r4, r3
 800ddda:	d105      	bne.n	800dde8 <std+0x54>
 800dddc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dde0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dde4:	f000 b946 	b.w	800e074 <__retarget_lock_init_recursive>
 800dde8:	bd10      	pop	{r4, pc}
 800ddea:	bf00      	nop
 800ddec:	0800f9e9 	.word	0x0800f9e9
 800ddf0:	0800fa0b 	.word	0x0800fa0b
 800ddf4:	0800fa43 	.word	0x0800fa43
 800ddf8:	0800fa67 	.word	0x0800fa67
 800ddfc:	20000f74 	.word	0x20000f74

0800de00 <stdio_exit_handler>:
 800de00:	4a02      	ldr	r2, [pc, #8]	@ (800de0c <stdio_exit_handler+0xc>)
 800de02:	4903      	ldr	r1, [pc, #12]	@ (800de10 <stdio_exit_handler+0x10>)
 800de04:	4803      	ldr	r0, [pc, #12]	@ (800de14 <stdio_exit_handler+0x14>)
 800de06:	f000 b869 	b.w	800dedc <_fwalk_sglue>
 800de0a:	bf00      	nop
 800de0c:	200000ac 	.word	0x200000ac
 800de10:	0800f271 	.word	0x0800f271
 800de14:	200000bc 	.word	0x200000bc

0800de18 <cleanup_stdio>:
 800de18:	6841      	ldr	r1, [r0, #4]
 800de1a:	4b0c      	ldr	r3, [pc, #48]	@ (800de4c <cleanup_stdio+0x34>)
 800de1c:	4299      	cmp	r1, r3
 800de1e:	b510      	push	{r4, lr}
 800de20:	4604      	mov	r4, r0
 800de22:	d001      	beq.n	800de28 <cleanup_stdio+0x10>
 800de24:	f001 fa24 	bl	800f270 <_fflush_r>
 800de28:	68a1      	ldr	r1, [r4, #8]
 800de2a:	4b09      	ldr	r3, [pc, #36]	@ (800de50 <cleanup_stdio+0x38>)
 800de2c:	4299      	cmp	r1, r3
 800de2e:	d002      	beq.n	800de36 <cleanup_stdio+0x1e>
 800de30:	4620      	mov	r0, r4
 800de32:	f001 fa1d 	bl	800f270 <_fflush_r>
 800de36:	68e1      	ldr	r1, [r4, #12]
 800de38:	4b06      	ldr	r3, [pc, #24]	@ (800de54 <cleanup_stdio+0x3c>)
 800de3a:	4299      	cmp	r1, r3
 800de3c:	d004      	beq.n	800de48 <cleanup_stdio+0x30>
 800de3e:	4620      	mov	r0, r4
 800de40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de44:	f001 ba14 	b.w	800f270 <_fflush_r>
 800de48:	bd10      	pop	{r4, pc}
 800de4a:	bf00      	nop
 800de4c:	20000f74 	.word	0x20000f74
 800de50:	20000fdc 	.word	0x20000fdc
 800de54:	20001044 	.word	0x20001044

0800de58 <global_stdio_init.part.0>:
 800de58:	b510      	push	{r4, lr}
 800de5a:	4b0b      	ldr	r3, [pc, #44]	@ (800de88 <global_stdio_init.part.0+0x30>)
 800de5c:	2104      	movs	r1, #4
 800de5e:	4c0b      	ldr	r4, [pc, #44]	@ (800de8c <global_stdio_init.part.0+0x34>)
 800de60:	4a0b      	ldr	r2, [pc, #44]	@ (800de90 <global_stdio_init.part.0+0x38>)
 800de62:	4620      	mov	r0, r4
 800de64:	601a      	str	r2, [r3, #0]
 800de66:	2200      	movs	r2, #0
 800de68:	f7ff ff94 	bl	800dd94 <std>
 800de6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800de70:	2201      	movs	r2, #1
 800de72:	2109      	movs	r1, #9
 800de74:	f7ff ff8e 	bl	800dd94 <std>
 800de78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800de7c:	2202      	movs	r2, #2
 800de7e:	2112      	movs	r1, #18
 800de80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de84:	f7ff bf86 	b.w	800dd94 <std>
 800de88:	200010ac 	.word	0x200010ac
 800de8c:	20000f74 	.word	0x20000f74
 800de90:	0800de01 	.word	0x0800de01

0800de94 <__sfp_lock_acquire>:
 800de94:	4801      	ldr	r0, [pc, #4]	@ (800de9c <__sfp_lock_acquire+0x8>)
 800de96:	f000 b8ee 	b.w	800e076 <__retarget_lock_acquire_recursive>
 800de9a:	bf00      	nop
 800de9c:	200010b1 	.word	0x200010b1

0800dea0 <__sfp_lock_release>:
 800dea0:	4801      	ldr	r0, [pc, #4]	@ (800dea8 <__sfp_lock_release+0x8>)
 800dea2:	f000 b8e9 	b.w	800e078 <__retarget_lock_release_recursive>
 800dea6:	bf00      	nop
 800dea8:	200010b1 	.word	0x200010b1

0800deac <__sinit>:
 800deac:	b510      	push	{r4, lr}
 800deae:	4604      	mov	r4, r0
 800deb0:	f7ff fff0 	bl	800de94 <__sfp_lock_acquire>
 800deb4:	6a23      	ldr	r3, [r4, #32]
 800deb6:	b11b      	cbz	r3, 800dec0 <__sinit+0x14>
 800deb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800debc:	f7ff bff0 	b.w	800dea0 <__sfp_lock_release>
 800dec0:	4b04      	ldr	r3, [pc, #16]	@ (800ded4 <__sinit+0x28>)
 800dec2:	6223      	str	r3, [r4, #32]
 800dec4:	4b04      	ldr	r3, [pc, #16]	@ (800ded8 <__sinit+0x2c>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1f5      	bne.n	800deb8 <__sinit+0xc>
 800decc:	f7ff ffc4 	bl	800de58 <global_stdio_init.part.0>
 800ded0:	e7f2      	b.n	800deb8 <__sinit+0xc>
 800ded2:	bf00      	nop
 800ded4:	0800de19 	.word	0x0800de19
 800ded8:	200010ac 	.word	0x200010ac

0800dedc <_fwalk_sglue>:
 800dedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dee0:	4607      	mov	r7, r0
 800dee2:	4688      	mov	r8, r1
 800dee4:	4614      	mov	r4, r2
 800dee6:	2600      	movs	r6, #0
 800dee8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800deec:	f1b9 0901 	subs.w	r9, r9, #1
 800def0:	d505      	bpl.n	800defe <_fwalk_sglue+0x22>
 800def2:	6824      	ldr	r4, [r4, #0]
 800def4:	2c00      	cmp	r4, #0
 800def6:	d1f7      	bne.n	800dee8 <_fwalk_sglue+0xc>
 800def8:	4630      	mov	r0, r6
 800defa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800defe:	89ab      	ldrh	r3, [r5, #12]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d907      	bls.n	800df14 <_fwalk_sglue+0x38>
 800df04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df08:	3301      	adds	r3, #1
 800df0a:	d003      	beq.n	800df14 <_fwalk_sglue+0x38>
 800df0c:	4629      	mov	r1, r5
 800df0e:	4638      	mov	r0, r7
 800df10:	47c0      	blx	r8
 800df12:	4306      	orrs	r6, r0
 800df14:	3568      	adds	r5, #104	@ 0x68
 800df16:	e7e9      	b.n	800deec <_fwalk_sglue+0x10>

0800df18 <iprintf>:
 800df18:	b40f      	push	{r0, r1, r2, r3}
 800df1a:	b507      	push	{r0, r1, r2, lr}
 800df1c:	4906      	ldr	r1, [pc, #24]	@ (800df38 <iprintf+0x20>)
 800df1e:	ab04      	add	r3, sp, #16
 800df20:	6808      	ldr	r0, [r1, #0]
 800df22:	f853 2b04 	ldr.w	r2, [r3], #4
 800df26:	6881      	ldr	r1, [r0, #8]
 800df28:	9301      	str	r3, [sp, #4]
 800df2a:	f000 ff5b 	bl	800ede4 <_vfiprintf_r>
 800df2e:	b003      	add	sp, #12
 800df30:	f85d eb04 	ldr.w	lr, [sp], #4
 800df34:	b004      	add	sp, #16
 800df36:	4770      	bx	lr
 800df38:	200000b8 	.word	0x200000b8

0800df3c <putchar>:
 800df3c:	4b02      	ldr	r3, [pc, #8]	@ (800df48 <putchar+0xc>)
 800df3e:	4601      	mov	r1, r0
 800df40:	6818      	ldr	r0, [r3, #0]
 800df42:	6882      	ldr	r2, [r0, #8]
 800df44:	f001 be9b 	b.w	800fc7e <_putc_r>
 800df48:	200000b8 	.word	0x200000b8

0800df4c <_puts_r>:
 800df4c:	6a03      	ldr	r3, [r0, #32]
 800df4e:	b570      	push	{r4, r5, r6, lr}
 800df50:	4605      	mov	r5, r0
 800df52:	460e      	mov	r6, r1
 800df54:	6884      	ldr	r4, [r0, #8]
 800df56:	b90b      	cbnz	r3, 800df5c <_puts_r+0x10>
 800df58:	f7ff ffa8 	bl	800deac <__sinit>
 800df5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df5e:	07db      	lsls	r3, r3, #31
 800df60:	d405      	bmi.n	800df6e <_puts_r+0x22>
 800df62:	89a3      	ldrh	r3, [r4, #12]
 800df64:	0598      	lsls	r0, r3, #22
 800df66:	d402      	bmi.n	800df6e <_puts_r+0x22>
 800df68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df6a:	f000 f884 	bl	800e076 <__retarget_lock_acquire_recursive>
 800df6e:	89a3      	ldrh	r3, [r4, #12]
 800df70:	0719      	lsls	r1, r3, #28
 800df72:	d502      	bpl.n	800df7a <_puts_r+0x2e>
 800df74:	6923      	ldr	r3, [r4, #16]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d135      	bne.n	800dfe6 <_puts_r+0x9a>
 800df7a:	4621      	mov	r1, r4
 800df7c:	4628      	mov	r0, r5
 800df7e:	f001 fdc7 	bl	800fb10 <__swsetup_r>
 800df82:	b380      	cbz	r0, 800dfe6 <_puts_r+0x9a>
 800df84:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800df88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df8a:	07da      	lsls	r2, r3, #31
 800df8c:	d405      	bmi.n	800df9a <_puts_r+0x4e>
 800df8e:	89a3      	ldrh	r3, [r4, #12]
 800df90:	059b      	lsls	r3, r3, #22
 800df92:	d402      	bmi.n	800df9a <_puts_r+0x4e>
 800df94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df96:	f000 f86f 	bl	800e078 <__retarget_lock_release_recursive>
 800df9a:	4628      	mov	r0, r5
 800df9c:	bd70      	pop	{r4, r5, r6, pc}
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	da04      	bge.n	800dfac <_puts_r+0x60>
 800dfa2:	69a2      	ldr	r2, [r4, #24]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	dc17      	bgt.n	800dfd8 <_puts_r+0x8c>
 800dfa8:	290a      	cmp	r1, #10
 800dfaa:	d015      	beq.n	800dfd8 <_puts_r+0x8c>
 800dfac:	6823      	ldr	r3, [r4, #0]
 800dfae:	1c5a      	adds	r2, r3, #1
 800dfb0:	6022      	str	r2, [r4, #0]
 800dfb2:	7019      	strb	r1, [r3, #0]
 800dfb4:	68a3      	ldr	r3, [r4, #8]
 800dfb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dfba:	3b01      	subs	r3, #1
 800dfbc:	60a3      	str	r3, [r4, #8]
 800dfbe:	2900      	cmp	r1, #0
 800dfc0:	d1ed      	bne.n	800df9e <_puts_r+0x52>
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	da11      	bge.n	800dfea <_puts_r+0x9e>
 800dfc6:	4622      	mov	r2, r4
 800dfc8:	210a      	movs	r1, #10
 800dfca:	4628      	mov	r0, r5
 800dfcc:	f001 fd62 	bl	800fa94 <__swbuf_r>
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	d0d7      	beq.n	800df84 <_puts_r+0x38>
 800dfd4:	250a      	movs	r5, #10
 800dfd6:	e7d7      	b.n	800df88 <_puts_r+0x3c>
 800dfd8:	4622      	mov	r2, r4
 800dfda:	4628      	mov	r0, r5
 800dfdc:	f001 fd5a 	bl	800fa94 <__swbuf_r>
 800dfe0:	3001      	adds	r0, #1
 800dfe2:	d1e7      	bne.n	800dfb4 <_puts_r+0x68>
 800dfe4:	e7ce      	b.n	800df84 <_puts_r+0x38>
 800dfe6:	3e01      	subs	r6, #1
 800dfe8:	e7e4      	b.n	800dfb4 <_puts_r+0x68>
 800dfea:	6823      	ldr	r3, [r4, #0]
 800dfec:	1c5a      	adds	r2, r3, #1
 800dfee:	6022      	str	r2, [r4, #0]
 800dff0:	220a      	movs	r2, #10
 800dff2:	701a      	strb	r2, [r3, #0]
 800dff4:	e7ee      	b.n	800dfd4 <_puts_r+0x88>
	...

0800dff8 <puts>:
 800dff8:	4b02      	ldr	r3, [pc, #8]	@ (800e004 <puts+0xc>)
 800dffa:	4601      	mov	r1, r0
 800dffc:	6818      	ldr	r0, [r3, #0]
 800dffe:	f7ff bfa5 	b.w	800df4c <_puts_r>
 800e002:	bf00      	nop
 800e004:	200000b8 	.word	0x200000b8

0800e008 <memset>:
 800e008:	4402      	add	r2, r0
 800e00a:	4603      	mov	r3, r0
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d100      	bne.n	800e012 <memset+0xa>
 800e010:	4770      	bx	lr
 800e012:	f803 1b01 	strb.w	r1, [r3], #1
 800e016:	e7f9      	b.n	800e00c <memset+0x4>

0800e018 <_localeconv_r>:
 800e018:	4800      	ldr	r0, [pc, #0]	@ (800e01c <_localeconv_r+0x4>)
 800e01a:	4770      	bx	lr
 800e01c:	200001f8 	.word	0x200001f8

0800e020 <__errno>:
 800e020:	4b01      	ldr	r3, [pc, #4]	@ (800e028 <__errno+0x8>)
 800e022:	6818      	ldr	r0, [r3, #0]
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop
 800e028:	200000b8 	.word	0x200000b8

0800e02c <__libc_init_array>:
 800e02c:	b570      	push	{r4, r5, r6, lr}
 800e02e:	4d0d      	ldr	r5, [pc, #52]	@ (800e064 <__libc_init_array+0x38>)
 800e030:	2600      	movs	r6, #0
 800e032:	4c0d      	ldr	r4, [pc, #52]	@ (800e068 <__libc_init_array+0x3c>)
 800e034:	1b64      	subs	r4, r4, r5
 800e036:	10a4      	asrs	r4, r4, #2
 800e038:	42a6      	cmp	r6, r4
 800e03a:	d109      	bne.n	800e050 <__libc_init_array+0x24>
 800e03c:	4d0b      	ldr	r5, [pc, #44]	@ (800e06c <__libc_init_array+0x40>)
 800e03e:	2600      	movs	r6, #0
 800e040:	4c0b      	ldr	r4, [pc, #44]	@ (800e070 <__libc_init_array+0x44>)
 800e042:	f003 f9eb 	bl	801141c <_init>
 800e046:	1b64      	subs	r4, r4, r5
 800e048:	10a4      	asrs	r4, r4, #2
 800e04a:	42a6      	cmp	r6, r4
 800e04c:	d105      	bne.n	800e05a <__libc_init_array+0x2e>
 800e04e:	bd70      	pop	{r4, r5, r6, pc}
 800e050:	f855 3b04 	ldr.w	r3, [r5], #4
 800e054:	3601      	adds	r6, #1
 800e056:	4798      	blx	r3
 800e058:	e7ee      	b.n	800e038 <__libc_init_array+0xc>
 800e05a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e05e:	3601      	adds	r6, #1
 800e060:	4798      	blx	r3
 800e062:	e7f2      	b.n	800e04a <__libc_init_array+0x1e>
 800e064:	08011ec0 	.word	0x08011ec0
 800e068:	08011ec0 	.word	0x08011ec0
 800e06c:	08011ec0 	.word	0x08011ec0
 800e070:	08011ec4 	.word	0x08011ec4

0800e074 <__retarget_lock_init_recursive>:
 800e074:	4770      	bx	lr

0800e076 <__retarget_lock_acquire_recursive>:
 800e076:	4770      	bx	lr

0800e078 <__retarget_lock_release_recursive>:
 800e078:	4770      	bx	lr

0800e07a <memchr>:
 800e07a:	b2c9      	uxtb	r1, r1
 800e07c:	4603      	mov	r3, r0
 800e07e:	4402      	add	r2, r0
 800e080:	b510      	push	{r4, lr}
 800e082:	4293      	cmp	r3, r2
 800e084:	4618      	mov	r0, r3
 800e086:	d101      	bne.n	800e08c <memchr+0x12>
 800e088:	2000      	movs	r0, #0
 800e08a:	e003      	b.n	800e094 <memchr+0x1a>
 800e08c:	7804      	ldrb	r4, [r0, #0]
 800e08e:	3301      	adds	r3, #1
 800e090:	428c      	cmp	r4, r1
 800e092:	d1f6      	bne.n	800e082 <memchr+0x8>
 800e094:	bd10      	pop	{r4, pc}

0800e096 <memcpy>:
 800e096:	440a      	add	r2, r1
 800e098:	1e43      	subs	r3, r0, #1
 800e09a:	4291      	cmp	r1, r2
 800e09c:	d100      	bne.n	800e0a0 <memcpy+0xa>
 800e09e:	4770      	bx	lr
 800e0a0:	b510      	push	{r4, lr}
 800e0a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0a6:	4291      	cmp	r1, r2
 800e0a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0ac:	d1f9      	bne.n	800e0a2 <memcpy+0xc>
 800e0ae:	bd10      	pop	{r4, pc}

0800e0b0 <__assert_func>:
 800e0b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0b2:	4614      	mov	r4, r2
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	4b09      	ldr	r3, [pc, #36]	@ (800e0dc <__assert_func+0x2c>)
 800e0b8:	4605      	mov	r5, r0
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	68d8      	ldr	r0, [r3, #12]
 800e0be:	b954      	cbnz	r4, 800e0d6 <__assert_func+0x26>
 800e0c0:	4b07      	ldr	r3, [pc, #28]	@ (800e0e0 <__assert_func+0x30>)
 800e0c2:	461c      	mov	r4, r3
 800e0c4:	9100      	str	r1, [sp, #0]
 800e0c6:	4907      	ldr	r1, [pc, #28]	@ (800e0e4 <__assert_func+0x34>)
 800e0c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0cc:	462b      	mov	r3, r5
 800e0ce:	f001 fccf 	bl	800fa70 <fiprintf>
 800e0d2:	f001 fe81 	bl	800fdd8 <abort>
 800e0d6:	4b04      	ldr	r3, [pc, #16]	@ (800e0e8 <__assert_func+0x38>)
 800e0d8:	e7f4      	b.n	800e0c4 <__assert_func+0x14>
 800e0da:	bf00      	nop
 800e0dc:	200000b8 	.word	0x200000b8
 800e0e0:	08011b7e 	.word	0x08011b7e
 800e0e4:	08011b50 	.word	0x08011b50
 800e0e8:	08011b43 	.word	0x08011b43

0800e0ec <quorem>:
 800e0ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0f0:	6903      	ldr	r3, [r0, #16]
 800e0f2:	4607      	mov	r7, r0
 800e0f4:	690c      	ldr	r4, [r1, #16]
 800e0f6:	42a3      	cmp	r3, r4
 800e0f8:	f2c0 8083 	blt.w	800e202 <quorem+0x116>
 800e0fc:	3c01      	subs	r4, #1
 800e0fe:	f100 0514 	add.w	r5, r0, #20
 800e102:	f101 0814 	add.w	r8, r1, #20
 800e106:	00a3      	lsls	r3, r4, #2
 800e108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e10c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e110:	9300      	str	r3, [sp, #0]
 800e112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e116:	9301      	str	r3, [sp, #4]
 800e118:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e11c:	3301      	adds	r3, #1
 800e11e:	429a      	cmp	r2, r3
 800e120:	fbb2 f6f3 	udiv	r6, r2, r3
 800e124:	d331      	bcc.n	800e18a <quorem+0x9e>
 800e126:	f04f 0a00 	mov.w	sl, #0
 800e12a:	46c4      	mov	ip, r8
 800e12c:	46ae      	mov	lr, r5
 800e12e:	46d3      	mov	fp, sl
 800e130:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e134:	b298      	uxth	r0, r3
 800e136:	45e1      	cmp	r9, ip
 800e138:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800e13c:	fb06 a000 	mla	r0, r6, r0, sl
 800e140:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800e144:	b280      	uxth	r0, r0
 800e146:	fb06 2303 	mla	r3, r6, r3, r2
 800e14a:	f8de 2000 	ldr.w	r2, [lr]
 800e14e:	b292      	uxth	r2, r2
 800e150:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e154:	eba2 0200 	sub.w	r2, r2, r0
 800e158:	b29b      	uxth	r3, r3
 800e15a:	f8de 0000 	ldr.w	r0, [lr]
 800e15e:	445a      	add	r2, fp
 800e160:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e164:	b292      	uxth	r2, r2
 800e166:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e16a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e16e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e172:	f84e 2b04 	str.w	r2, [lr], #4
 800e176:	d2db      	bcs.n	800e130 <quorem+0x44>
 800e178:	9b00      	ldr	r3, [sp, #0]
 800e17a:	58eb      	ldr	r3, [r5, r3]
 800e17c:	b92b      	cbnz	r3, 800e18a <quorem+0x9e>
 800e17e:	9b01      	ldr	r3, [sp, #4]
 800e180:	3b04      	subs	r3, #4
 800e182:	429d      	cmp	r5, r3
 800e184:	461a      	mov	r2, r3
 800e186:	d330      	bcc.n	800e1ea <quorem+0xfe>
 800e188:	613c      	str	r4, [r7, #16]
 800e18a:	4638      	mov	r0, r7
 800e18c:	f001 fb20 	bl	800f7d0 <__mcmp>
 800e190:	2800      	cmp	r0, #0
 800e192:	db26      	blt.n	800e1e2 <quorem+0xf6>
 800e194:	4629      	mov	r1, r5
 800e196:	2000      	movs	r0, #0
 800e198:	f858 2b04 	ldr.w	r2, [r8], #4
 800e19c:	f8d1 c000 	ldr.w	ip, [r1]
 800e1a0:	fa1f fe82 	uxth.w	lr, r2
 800e1a4:	45c1      	cmp	r9, r8
 800e1a6:	fa1f f38c 	uxth.w	r3, ip
 800e1aa:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800e1ae:	eba3 030e 	sub.w	r3, r3, lr
 800e1b2:	4403      	add	r3, r0
 800e1b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e1be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e1c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e1c6:	f841 3b04 	str.w	r3, [r1], #4
 800e1ca:	d2e5      	bcs.n	800e198 <quorem+0xac>
 800e1cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1d4:	b922      	cbnz	r2, 800e1e0 <quorem+0xf4>
 800e1d6:	3b04      	subs	r3, #4
 800e1d8:	429d      	cmp	r5, r3
 800e1da:	461a      	mov	r2, r3
 800e1dc:	d30b      	bcc.n	800e1f6 <quorem+0x10a>
 800e1de:	613c      	str	r4, [r7, #16]
 800e1e0:	3601      	adds	r6, #1
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	b003      	add	sp, #12
 800e1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ea:	6812      	ldr	r2, [r2, #0]
 800e1ec:	3b04      	subs	r3, #4
 800e1ee:	2a00      	cmp	r2, #0
 800e1f0:	d1ca      	bne.n	800e188 <quorem+0x9c>
 800e1f2:	3c01      	subs	r4, #1
 800e1f4:	e7c5      	b.n	800e182 <quorem+0x96>
 800e1f6:	6812      	ldr	r2, [r2, #0]
 800e1f8:	3b04      	subs	r3, #4
 800e1fa:	2a00      	cmp	r2, #0
 800e1fc:	d1ef      	bne.n	800e1de <quorem+0xf2>
 800e1fe:	3c01      	subs	r4, #1
 800e200:	e7ea      	b.n	800e1d8 <quorem+0xec>
 800e202:	2000      	movs	r0, #0
 800e204:	e7ee      	b.n	800e1e4 <quorem+0xf8>
	...

0800e208 <_dtoa_r>:
 800e208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e20c:	69c7      	ldr	r7, [r0, #28]
 800e20e:	b099      	sub	sp, #100	@ 0x64
 800e210:	4683      	mov	fp, r0
 800e212:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e214:	9109      	str	r1, [sp, #36]	@ 0x24
 800e216:	920e      	str	r2, [sp, #56]	@ 0x38
 800e218:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e21a:	ec55 4b10 	vmov	r4, r5, d0
 800e21e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e222:	b97f      	cbnz	r7, 800e244 <_dtoa_r+0x3c>
 800e224:	2010      	movs	r0, #16
 800e226:	f000 fef5 	bl	800f014 <malloc>
 800e22a:	4602      	mov	r2, r0
 800e22c:	f8cb 001c 	str.w	r0, [fp, #28]
 800e230:	b920      	cbnz	r0, 800e23c <_dtoa_r+0x34>
 800e232:	4ba7      	ldr	r3, [pc, #668]	@ (800e4d0 <_dtoa_r+0x2c8>)
 800e234:	21ef      	movs	r1, #239	@ 0xef
 800e236:	48a7      	ldr	r0, [pc, #668]	@ (800e4d4 <_dtoa_r+0x2cc>)
 800e238:	f7ff ff3a 	bl	800e0b0 <__assert_func>
 800e23c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e240:	6007      	str	r7, [r0, #0]
 800e242:	60c7      	str	r7, [r0, #12]
 800e244:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e248:	6819      	ldr	r1, [r3, #0]
 800e24a:	b159      	cbz	r1, 800e264 <_dtoa_r+0x5c>
 800e24c:	685a      	ldr	r2, [r3, #4]
 800e24e:	2301      	movs	r3, #1
 800e250:	4658      	mov	r0, fp
 800e252:	4093      	lsls	r3, r2
 800e254:	604a      	str	r2, [r1, #4]
 800e256:	608b      	str	r3, [r1, #8]
 800e258:	f001 f87e 	bl	800f358 <_Bfree>
 800e25c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e260:	2200      	movs	r2, #0
 800e262:	601a      	str	r2, [r3, #0]
 800e264:	1e2b      	subs	r3, r5, #0
 800e266:	bfb7      	itett	lt
 800e268:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e26c:	2300      	movge	r3, #0
 800e26e:	2201      	movlt	r2, #1
 800e270:	9303      	strlt	r3, [sp, #12]
 800e272:	bfa8      	it	ge
 800e274:	6033      	strge	r3, [r6, #0]
 800e276:	9f03      	ldr	r7, [sp, #12]
 800e278:	4b97      	ldr	r3, [pc, #604]	@ (800e4d8 <_dtoa_r+0x2d0>)
 800e27a:	bfb8      	it	lt
 800e27c:	6032      	strlt	r2, [r6, #0]
 800e27e:	43bb      	bics	r3, r7
 800e280:	d112      	bne.n	800e2a8 <_dtoa_r+0xa0>
 800e282:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e286:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e288:	6013      	str	r3, [r2, #0]
 800e28a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e28e:	4323      	orrs	r3, r4
 800e290:	f000 854c 	beq.w	800ed2c <_dtoa_r+0xb24>
 800e294:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e296:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e4ec <_dtoa_r+0x2e4>
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	f000 854e 	beq.w	800ed3c <_dtoa_r+0xb34>
 800e2a0:	f10a 0303 	add.w	r3, sl, #3
 800e2a4:	f000 bd48 	b.w	800ed38 <_dtoa_r+0xb30>
 800e2a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	ec51 0b17 	vmov	r0, r1, d7
 800e2b4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e2b8:	f7f2 fc0a 	bl	8000ad0 <__aeabi_dcmpeq>
 800e2bc:	4680      	mov	r8, r0
 800e2be:	b158      	cbz	r0, 800e2d8 <_dtoa_r+0xd0>
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e2c4:	6013      	str	r3, [r2, #0]
 800e2c6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e2c8:	b113      	cbz	r3, 800e2d0 <_dtoa_r+0xc8>
 800e2ca:	4b84      	ldr	r3, [pc, #528]	@ (800e4dc <_dtoa_r+0x2d4>)
 800e2cc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e2ce:	6013      	str	r3, [r2, #0]
 800e2d0:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800e4f0 <_dtoa_r+0x2e8>
 800e2d4:	f000 bd32 	b.w	800ed3c <_dtoa_r+0xb34>
 800e2d8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e2dc:	aa16      	add	r2, sp, #88	@ 0x58
 800e2de:	a917      	add	r1, sp, #92	@ 0x5c
 800e2e0:	4658      	mov	r0, fp
 800e2e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e2e6:	f001 fb27 	bl	800f938 <__d2b>
 800e2ea:	4681      	mov	r9, r0
 800e2ec:	2e00      	cmp	r6, #0
 800e2ee:	d075      	beq.n	800e3dc <_dtoa_r+0x1d4>
 800e2f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2f2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e2f6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e2fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2fe:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e302:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e306:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e30a:	4619      	mov	r1, r3
 800e30c:	2200      	movs	r2, #0
 800e30e:	4b74      	ldr	r3, [pc, #464]	@ (800e4e0 <_dtoa_r+0x2d8>)
 800e310:	f7f1 ffbe 	bl	8000290 <__aeabi_dsub>
 800e314:	a368      	add	r3, pc, #416	@ (adr r3, 800e4b8 <_dtoa_r+0x2b0>)
 800e316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e31a:	f7f2 f971 	bl	8000600 <__aeabi_dmul>
 800e31e:	a368      	add	r3, pc, #416	@ (adr r3, 800e4c0 <_dtoa_r+0x2b8>)
 800e320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e324:	f7f1 ffb6 	bl	8000294 <__adddf3>
 800e328:	4604      	mov	r4, r0
 800e32a:	460d      	mov	r5, r1
 800e32c:	4630      	mov	r0, r6
 800e32e:	f7f2 f8fd 	bl	800052c <__aeabi_i2d>
 800e332:	a365      	add	r3, pc, #404	@ (adr r3, 800e4c8 <_dtoa_r+0x2c0>)
 800e334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e338:	f7f2 f962 	bl	8000600 <__aeabi_dmul>
 800e33c:	4602      	mov	r2, r0
 800e33e:	460b      	mov	r3, r1
 800e340:	4620      	mov	r0, r4
 800e342:	4629      	mov	r1, r5
 800e344:	f7f1 ffa6 	bl	8000294 <__adddf3>
 800e348:	4604      	mov	r4, r0
 800e34a:	460d      	mov	r5, r1
 800e34c:	f7f2 fc08 	bl	8000b60 <__aeabi_d2iz>
 800e350:	2200      	movs	r2, #0
 800e352:	4607      	mov	r7, r0
 800e354:	2300      	movs	r3, #0
 800e356:	4620      	mov	r0, r4
 800e358:	4629      	mov	r1, r5
 800e35a:	f7f2 fbc3 	bl	8000ae4 <__aeabi_dcmplt>
 800e35e:	b140      	cbz	r0, 800e372 <_dtoa_r+0x16a>
 800e360:	4638      	mov	r0, r7
 800e362:	f7f2 f8e3 	bl	800052c <__aeabi_i2d>
 800e366:	4622      	mov	r2, r4
 800e368:	462b      	mov	r3, r5
 800e36a:	f7f2 fbb1 	bl	8000ad0 <__aeabi_dcmpeq>
 800e36e:	b900      	cbnz	r0, 800e372 <_dtoa_r+0x16a>
 800e370:	3f01      	subs	r7, #1
 800e372:	2f16      	cmp	r7, #22
 800e374:	d851      	bhi.n	800e41a <_dtoa_r+0x212>
 800e376:	4b5b      	ldr	r3, [pc, #364]	@ (800e4e4 <_dtoa_r+0x2dc>)
 800e378:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e37c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e384:	f7f2 fbae 	bl	8000ae4 <__aeabi_dcmplt>
 800e388:	2800      	cmp	r0, #0
 800e38a:	d048      	beq.n	800e41e <_dtoa_r+0x216>
 800e38c:	3f01      	subs	r7, #1
 800e38e:	2300      	movs	r3, #0
 800e390:	9312      	str	r3, [sp, #72]	@ 0x48
 800e392:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e394:	1b9b      	subs	r3, r3, r6
 800e396:	1e5a      	subs	r2, r3, #1
 800e398:	bf46      	itte	mi
 800e39a:	f1c3 0801 	rsbmi	r8, r3, #1
 800e39e:	2300      	movmi	r3, #0
 800e3a0:	f04f 0800 	movpl.w	r8, #0
 800e3a4:	9208      	str	r2, [sp, #32]
 800e3a6:	bf48      	it	mi
 800e3a8:	9308      	strmi	r3, [sp, #32]
 800e3aa:	2f00      	cmp	r7, #0
 800e3ac:	db39      	blt.n	800e422 <_dtoa_r+0x21a>
 800e3ae:	9b08      	ldr	r3, [sp, #32]
 800e3b0:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e3b2:	443b      	add	r3, r7
 800e3b4:	9308      	str	r3, [sp, #32]
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3bc:	2b09      	cmp	r3, #9
 800e3be:	d864      	bhi.n	800e48a <_dtoa_r+0x282>
 800e3c0:	2b05      	cmp	r3, #5
 800e3c2:	bfc5      	ittet	gt
 800e3c4:	3b04      	subgt	r3, #4
 800e3c6:	2400      	movgt	r4, #0
 800e3c8:	2401      	movle	r4, #1
 800e3ca:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3ce:	3b02      	subs	r3, #2
 800e3d0:	2b03      	cmp	r3, #3
 800e3d2:	d865      	bhi.n	800e4a0 <_dtoa_r+0x298>
 800e3d4:	e8df f003 	tbb	[pc, r3]
 800e3d8:	5737392c 	.word	0x5737392c
 800e3dc:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e3e0:	441e      	add	r6, r3
 800e3e2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e3e6:	2b20      	cmp	r3, #32
 800e3e8:	bfc9      	itett	gt
 800e3ea:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e3ee:	f1c3 0320 	rsble	r3, r3, #32
 800e3f2:	409f      	lslgt	r7, r3
 800e3f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e3f8:	bfd8      	it	le
 800e3fa:	fa04 f003 	lslle.w	r0, r4, r3
 800e3fe:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800e402:	bfc4      	itt	gt
 800e404:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e408:	ea47 0003 	orrgt.w	r0, r7, r3
 800e40c:	f7f2 f87e 	bl	800050c <__aeabi_ui2d>
 800e410:	2201      	movs	r2, #1
 800e412:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e416:	9214      	str	r2, [sp, #80]	@ 0x50
 800e418:	e777      	b.n	800e30a <_dtoa_r+0x102>
 800e41a:	2301      	movs	r3, #1
 800e41c:	e7b8      	b.n	800e390 <_dtoa_r+0x188>
 800e41e:	9012      	str	r0, [sp, #72]	@ 0x48
 800e420:	e7b7      	b.n	800e392 <_dtoa_r+0x18a>
 800e422:	427b      	negs	r3, r7
 800e424:	eba8 0807 	sub.w	r8, r8, r7
 800e428:	930a      	str	r3, [sp, #40]	@ 0x28
 800e42a:	2300      	movs	r3, #0
 800e42c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e42e:	e7c4      	b.n	800e3ba <_dtoa_r+0x1b2>
 800e430:	2300      	movs	r3, #0
 800e432:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e436:	2b00      	cmp	r3, #0
 800e438:	dc35      	bgt.n	800e4a6 <_dtoa_r+0x29e>
 800e43a:	2301      	movs	r3, #1
 800e43c:	461a      	mov	r2, r3
 800e43e:	9300      	str	r3, [sp, #0]
 800e440:	9307      	str	r3, [sp, #28]
 800e442:	920e      	str	r2, [sp, #56]	@ 0x38
 800e444:	e00b      	b.n	800e45e <_dtoa_r+0x256>
 800e446:	2301      	movs	r3, #1
 800e448:	e7f3      	b.n	800e432 <_dtoa_r+0x22a>
 800e44a:	2300      	movs	r3, #0
 800e44c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e44e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e450:	18fb      	adds	r3, r7, r3
 800e452:	9300      	str	r3, [sp, #0]
 800e454:	3301      	adds	r3, #1
 800e456:	2b01      	cmp	r3, #1
 800e458:	9307      	str	r3, [sp, #28]
 800e45a:	bfb8      	it	lt
 800e45c:	2301      	movlt	r3, #1
 800e45e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e462:	2100      	movs	r1, #0
 800e464:	2204      	movs	r2, #4
 800e466:	f102 0514 	add.w	r5, r2, #20
 800e46a:	429d      	cmp	r5, r3
 800e46c:	d91f      	bls.n	800e4ae <_dtoa_r+0x2a6>
 800e46e:	6041      	str	r1, [r0, #4]
 800e470:	4658      	mov	r0, fp
 800e472:	f000 ff31 	bl	800f2d8 <_Balloc>
 800e476:	4682      	mov	sl, r0
 800e478:	2800      	cmp	r0, #0
 800e47a:	d13b      	bne.n	800e4f4 <_dtoa_r+0x2ec>
 800e47c:	4b1a      	ldr	r3, [pc, #104]	@ (800e4e8 <_dtoa_r+0x2e0>)
 800e47e:	4602      	mov	r2, r0
 800e480:	f240 11af 	movw	r1, #431	@ 0x1af
 800e484:	e6d7      	b.n	800e236 <_dtoa_r+0x2e>
 800e486:	2301      	movs	r3, #1
 800e488:	e7e0      	b.n	800e44c <_dtoa_r+0x244>
 800e48a:	2401      	movs	r4, #1
 800e48c:	2300      	movs	r3, #0
 800e48e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e490:	9309      	str	r3, [sp, #36]	@ 0x24
 800e492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e496:	2200      	movs	r2, #0
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	9307      	str	r3, [sp, #28]
 800e49c:	2312      	movs	r3, #18
 800e49e:	e7d0      	b.n	800e442 <_dtoa_r+0x23a>
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4a4:	e7f5      	b.n	800e492 <_dtoa_r+0x28a>
 800e4a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	9307      	str	r3, [sp, #28]
 800e4ac:	e7d7      	b.n	800e45e <_dtoa_r+0x256>
 800e4ae:	3101      	adds	r1, #1
 800e4b0:	0052      	lsls	r2, r2, #1
 800e4b2:	e7d8      	b.n	800e466 <_dtoa_r+0x25e>
 800e4b4:	f3af 8000 	nop.w
 800e4b8:	636f4361 	.word	0x636f4361
 800e4bc:	3fd287a7 	.word	0x3fd287a7
 800e4c0:	8b60c8b3 	.word	0x8b60c8b3
 800e4c4:	3fc68a28 	.word	0x3fc68a28
 800e4c8:	509f79fb 	.word	0x509f79fb
 800e4cc:	3fd34413 	.word	0x3fd34413
 800e4d0:	08011ad4 	.word	0x08011ad4
 800e4d4:	08011b8c 	.word	0x08011b8c
 800e4d8:	7ff00000 	.word	0x7ff00000
 800e4dc:	08011ab1 	.word	0x08011ab1
 800e4e0:	3ff80000 	.word	0x3ff80000
 800e4e4:	08011c98 	.word	0x08011c98
 800e4e8:	08011be4 	.word	0x08011be4
 800e4ec:	08011b88 	.word	0x08011b88
 800e4f0:	08011ab0 	.word	0x08011ab0
 800e4f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e4f8:	6018      	str	r0, [r3, #0]
 800e4fa:	9b07      	ldr	r3, [sp, #28]
 800e4fc:	2b0e      	cmp	r3, #14
 800e4fe:	f200 80a4 	bhi.w	800e64a <_dtoa_r+0x442>
 800e502:	2c00      	cmp	r4, #0
 800e504:	f000 80a1 	beq.w	800e64a <_dtoa_r+0x442>
 800e508:	2f00      	cmp	r7, #0
 800e50a:	dd33      	ble.n	800e574 <_dtoa_r+0x36c>
 800e50c:	f007 020f 	and.w	r2, r7, #15
 800e510:	4bac      	ldr	r3, [pc, #688]	@ (800e7c4 <_dtoa_r+0x5bc>)
 800e512:	05f8      	lsls	r0, r7, #23
 800e514:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e518:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e51c:	ed93 7b00 	vldr	d7, [r3]
 800e520:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e524:	d516      	bpl.n	800e554 <_dtoa_r+0x34c>
 800e526:	4ba8      	ldr	r3, [pc, #672]	@ (800e7c8 <_dtoa_r+0x5c0>)
 800e528:	f004 040f 	and.w	r4, r4, #15
 800e52c:	2603      	movs	r6, #3
 800e52e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e532:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e536:	f7f2 f98d 	bl	8000854 <__aeabi_ddiv>
 800e53a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e53e:	4da2      	ldr	r5, [pc, #648]	@ (800e7c8 <_dtoa_r+0x5c0>)
 800e540:	b954      	cbnz	r4, 800e558 <_dtoa_r+0x350>
 800e542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e54a:	f7f2 f983 	bl	8000854 <__aeabi_ddiv>
 800e54e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e552:	e028      	b.n	800e5a6 <_dtoa_r+0x39e>
 800e554:	2602      	movs	r6, #2
 800e556:	e7f2      	b.n	800e53e <_dtoa_r+0x336>
 800e558:	07e1      	lsls	r1, r4, #31
 800e55a:	d508      	bpl.n	800e56e <_dtoa_r+0x366>
 800e55c:	3601      	adds	r6, #1
 800e55e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e562:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e566:	f7f2 f84b 	bl	8000600 <__aeabi_dmul>
 800e56a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e56e:	1064      	asrs	r4, r4, #1
 800e570:	3508      	adds	r5, #8
 800e572:	e7e5      	b.n	800e540 <_dtoa_r+0x338>
 800e574:	f000 80d2 	beq.w	800e71c <_dtoa_r+0x514>
 800e578:	427c      	negs	r4, r7
 800e57a:	4b92      	ldr	r3, [pc, #584]	@ (800e7c4 <_dtoa_r+0x5bc>)
 800e57c:	4d92      	ldr	r5, [pc, #584]	@ (800e7c8 <_dtoa_r+0x5c0>)
 800e57e:	2602      	movs	r6, #2
 800e580:	f004 020f 	and.w	r2, r4, #15
 800e584:	1124      	asrs	r4, r4, #4
 800e586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e58a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e592:	f7f2 f835 	bl	8000600 <__aeabi_dmul>
 800e596:	2300      	movs	r3, #0
 800e598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e59c:	2c00      	cmp	r4, #0
 800e59e:	f040 80b2 	bne.w	800e706 <_dtoa_r+0x4fe>
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1d3      	bne.n	800e54e <_dtoa_r+0x346>
 800e5a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e5a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f000 80b7 	beq.w	800e720 <_dtoa_r+0x518>
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	4b85      	ldr	r3, [pc, #532]	@ (800e7cc <_dtoa_r+0x5c4>)
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	4629      	mov	r1, r5
 800e5ba:	f7f2 fa93 	bl	8000ae4 <__aeabi_dcmplt>
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	f000 80ae 	beq.w	800e720 <_dtoa_r+0x518>
 800e5c4:	9b07      	ldr	r3, [sp, #28]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	f000 80aa 	beq.w	800e720 <_dtoa_r+0x518>
 800e5cc:	9b00      	ldr	r3, [sp, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	dd37      	ble.n	800e642 <_dtoa_r+0x43a>
 800e5d2:	1e7b      	subs	r3, r7, #1
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	4629      	mov	r1, r5
 800e5da:	9304      	str	r3, [sp, #16]
 800e5dc:	3601      	adds	r6, #1
 800e5de:	4b7c      	ldr	r3, [pc, #496]	@ (800e7d0 <_dtoa_r+0x5c8>)
 800e5e0:	f7f2 f80e 	bl	8000600 <__aeabi_dmul>
 800e5e4:	9c00      	ldr	r4, [sp, #0]
 800e5e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5ea:	4630      	mov	r0, r6
 800e5ec:	f7f1 ff9e 	bl	800052c <__aeabi_i2d>
 800e5f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5f4:	f7f2 f804 	bl	8000600 <__aeabi_dmul>
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	4b76      	ldr	r3, [pc, #472]	@ (800e7d4 <_dtoa_r+0x5cc>)
 800e5fc:	f7f1 fe4a 	bl	8000294 <__adddf3>
 800e600:	4605      	mov	r5, r0
 800e602:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e606:	2c00      	cmp	r4, #0
 800e608:	f040 808d 	bne.w	800e726 <_dtoa_r+0x51e>
 800e60c:	2200      	movs	r2, #0
 800e60e:	4b72      	ldr	r3, [pc, #456]	@ (800e7d8 <_dtoa_r+0x5d0>)
 800e610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e614:	f7f1 fe3c 	bl	8000290 <__aeabi_dsub>
 800e618:	4602      	mov	r2, r0
 800e61a:	460b      	mov	r3, r1
 800e61c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e620:	462a      	mov	r2, r5
 800e622:	4633      	mov	r3, r6
 800e624:	f7f2 fa7c 	bl	8000b20 <__aeabi_dcmpgt>
 800e628:	2800      	cmp	r0, #0
 800e62a:	f040 828b 	bne.w	800eb44 <_dtoa_r+0x93c>
 800e62e:	462a      	mov	r2, r5
 800e630:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e638:	f7f2 fa54 	bl	8000ae4 <__aeabi_dcmplt>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	f040 8128 	bne.w	800e892 <_dtoa_r+0x68a>
 800e642:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e646:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e64a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f2c0 815a 	blt.w	800e906 <_dtoa_r+0x6fe>
 800e652:	2f0e      	cmp	r7, #14
 800e654:	f300 8157 	bgt.w	800e906 <_dtoa_r+0x6fe>
 800e658:	4b5a      	ldr	r3, [pc, #360]	@ (800e7c4 <_dtoa_r+0x5bc>)
 800e65a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e65e:	ed93 7b00 	vldr	d7, [r3]
 800e662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e664:	2b00      	cmp	r3, #0
 800e666:	ed8d 7b00 	vstr	d7, [sp]
 800e66a:	da03      	bge.n	800e674 <_dtoa_r+0x46c>
 800e66c:	9b07      	ldr	r3, [sp, #28]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	f340 8101 	ble.w	800e876 <_dtoa_r+0x66e>
 800e674:	4656      	mov	r6, sl
 800e676:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e67a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e67e:	4620      	mov	r0, r4
 800e680:	4629      	mov	r1, r5
 800e682:	f7f2 f8e7 	bl	8000854 <__aeabi_ddiv>
 800e686:	f7f2 fa6b 	bl	8000b60 <__aeabi_d2iz>
 800e68a:	4680      	mov	r8, r0
 800e68c:	f7f1 ff4e 	bl	800052c <__aeabi_i2d>
 800e690:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e694:	f7f1 ffb4 	bl	8000600 <__aeabi_dmul>
 800e698:	4602      	mov	r2, r0
 800e69a:	4620      	mov	r0, r4
 800e69c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	4629      	mov	r1, r5
 800e6a4:	f7f1 fdf4 	bl	8000290 <__aeabi_dsub>
 800e6a8:	9d07      	ldr	r5, [sp, #28]
 800e6aa:	f806 4b01 	strb.w	r4, [r6], #1
 800e6ae:	eba6 040a 	sub.w	r4, r6, sl
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	42a5      	cmp	r5, r4
 800e6b8:	f040 8117 	bne.w	800e8ea <_dtoa_r+0x6e2>
 800e6bc:	f7f1 fdea 	bl	8000294 <__adddf3>
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	460d      	mov	r5, r1
 800e6c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6c8:	f7f2 fa2a 	bl	8000b20 <__aeabi_dcmpgt>
 800e6cc:	2800      	cmp	r0, #0
 800e6ce:	f040 80f9 	bne.w	800e8c4 <_dtoa_r+0x6bc>
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	4629      	mov	r1, r5
 800e6d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6da:	f7f2 f9f9 	bl	8000ad0 <__aeabi_dcmpeq>
 800e6de:	b118      	cbz	r0, 800e6e8 <_dtoa_r+0x4e0>
 800e6e0:	f018 0f01 	tst.w	r8, #1
 800e6e4:	f040 80ee 	bne.w	800e8c4 <_dtoa_r+0x6bc>
 800e6e8:	4649      	mov	r1, r9
 800e6ea:	4658      	mov	r0, fp
 800e6ec:	f000 fe34 	bl	800f358 <_Bfree>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	3701      	adds	r7, #1
 800e6f4:	7033      	strb	r3, [r6, #0]
 800e6f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e6f8:	601f      	str	r7, [r3, #0]
 800e6fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	f000 831d 	beq.w	800ed3c <_dtoa_r+0xb34>
 800e702:	601e      	str	r6, [r3, #0]
 800e704:	e31a      	b.n	800ed3c <_dtoa_r+0xb34>
 800e706:	07e2      	lsls	r2, r4, #31
 800e708:	d505      	bpl.n	800e716 <_dtoa_r+0x50e>
 800e70a:	3601      	adds	r6, #1
 800e70c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e710:	f7f1 ff76 	bl	8000600 <__aeabi_dmul>
 800e714:	2301      	movs	r3, #1
 800e716:	1064      	asrs	r4, r4, #1
 800e718:	3508      	adds	r5, #8
 800e71a:	e73f      	b.n	800e59c <_dtoa_r+0x394>
 800e71c:	2602      	movs	r6, #2
 800e71e:	e742      	b.n	800e5a6 <_dtoa_r+0x39e>
 800e720:	9c07      	ldr	r4, [sp, #28]
 800e722:	9704      	str	r7, [sp, #16]
 800e724:	e761      	b.n	800e5ea <_dtoa_r+0x3e2>
 800e726:	4b27      	ldr	r3, [pc, #156]	@ (800e7c4 <_dtoa_r+0x5bc>)
 800e728:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e72a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e72e:	4454      	add	r4, sl
 800e730:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e734:	2900      	cmp	r1, #0
 800e736:	d053      	beq.n	800e7e0 <_dtoa_r+0x5d8>
 800e738:	2000      	movs	r0, #0
 800e73a:	4928      	ldr	r1, [pc, #160]	@ (800e7dc <_dtoa_r+0x5d4>)
 800e73c:	f7f2 f88a 	bl	8000854 <__aeabi_ddiv>
 800e740:	4633      	mov	r3, r6
 800e742:	4656      	mov	r6, sl
 800e744:	462a      	mov	r2, r5
 800e746:	f7f1 fda3 	bl	8000290 <__aeabi_dsub>
 800e74a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e74e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e752:	f7f2 fa05 	bl	8000b60 <__aeabi_d2iz>
 800e756:	4605      	mov	r5, r0
 800e758:	f7f1 fee8 	bl	800052c <__aeabi_i2d>
 800e75c:	4602      	mov	r2, r0
 800e75e:	460b      	mov	r3, r1
 800e760:	3530      	adds	r5, #48	@ 0x30
 800e762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e766:	f7f1 fd93 	bl	8000290 <__aeabi_dsub>
 800e76a:	4602      	mov	r2, r0
 800e76c:	460b      	mov	r3, r1
 800e76e:	f806 5b01 	strb.w	r5, [r6], #1
 800e772:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e776:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e77a:	f7f2 f9b3 	bl	8000ae4 <__aeabi_dcmplt>
 800e77e:	2800      	cmp	r0, #0
 800e780:	d171      	bne.n	800e866 <_dtoa_r+0x65e>
 800e782:	2000      	movs	r0, #0
 800e784:	4911      	ldr	r1, [pc, #68]	@ (800e7cc <_dtoa_r+0x5c4>)
 800e786:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e78a:	f7f1 fd81 	bl	8000290 <__aeabi_dsub>
 800e78e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e792:	f7f2 f9a7 	bl	8000ae4 <__aeabi_dcmplt>
 800e796:	2800      	cmp	r0, #0
 800e798:	f040 8095 	bne.w	800e8c6 <_dtoa_r+0x6be>
 800e79c:	42a6      	cmp	r6, r4
 800e79e:	f43f af50 	beq.w	800e642 <_dtoa_r+0x43a>
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	4b0a      	ldr	r3, [pc, #40]	@ (800e7d0 <_dtoa_r+0x5c8>)
 800e7a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e7aa:	f7f1 ff29 	bl	8000600 <__aeabi_dmul>
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	4b07      	ldr	r3, [pc, #28]	@ (800e7d0 <_dtoa_r+0x5c8>)
 800e7b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e7b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7ba:	f7f1 ff21 	bl	8000600 <__aeabi_dmul>
 800e7be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7c2:	e7c4      	b.n	800e74e <_dtoa_r+0x546>
 800e7c4:	08011c98 	.word	0x08011c98
 800e7c8:	08011c70 	.word	0x08011c70
 800e7cc:	3ff00000 	.word	0x3ff00000
 800e7d0:	40240000 	.word	0x40240000
 800e7d4:	401c0000 	.word	0x401c0000
 800e7d8:	40140000 	.word	0x40140000
 800e7dc:	3fe00000 	.word	0x3fe00000
 800e7e0:	4631      	mov	r1, r6
 800e7e2:	4656      	mov	r6, sl
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	f7f1 ff0b 	bl	8000600 <__aeabi_dmul>
 800e7ea:	9415      	str	r4, [sp, #84]	@ 0x54
 800e7ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e7f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7f4:	f7f2 f9b4 	bl	8000b60 <__aeabi_d2iz>
 800e7f8:	4605      	mov	r5, r0
 800e7fa:	f7f1 fe97 	bl	800052c <__aeabi_i2d>
 800e7fe:	4602      	mov	r2, r0
 800e800:	3530      	adds	r5, #48	@ 0x30
 800e802:	460b      	mov	r3, r1
 800e804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e808:	f7f1 fd42 	bl	8000290 <__aeabi_dsub>
 800e80c:	f806 5b01 	strb.w	r5, [r6], #1
 800e810:	4602      	mov	r2, r0
 800e812:	460b      	mov	r3, r1
 800e814:	42a6      	cmp	r6, r4
 800e816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e81a:	f04f 0200 	mov.w	r2, #0
 800e81e:	d124      	bne.n	800e86a <_dtoa_r+0x662>
 800e820:	4bac      	ldr	r3, [pc, #688]	@ (800ead4 <_dtoa_r+0x8cc>)
 800e822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e826:	f7f1 fd35 	bl	8000294 <__adddf3>
 800e82a:	4602      	mov	r2, r0
 800e82c:	460b      	mov	r3, r1
 800e82e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e832:	f7f2 f975 	bl	8000b20 <__aeabi_dcmpgt>
 800e836:	2800      	cmp	r0, #0
 800e838:	d145      	bne.n	800e8c6 <_dtoa_r+0x6be>
 800e83a:	2000      	movs	r0, #0
 800e83c:	49a5      	ldr	r1, [pc, #660]	@ (800ead4 <_dtoa_r+0x8cc>)
 800e83e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e842:	f7f1 fd25 	bl	8000290 <__aeabi_dsub>
 800e846:	4602      	mov	r2, r0
 800e848:	460b      	mov	r3, r1
 800e84a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e84e:	f7f2 f949 	bl	8000ae4 <__aeabi_dcmplt>
 800e852:	2800      	cmp	r0, #0
 800e854:	f43f aef5 	beq.w	800e642 <_dtoa_r+0x43a>
 800e858:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e85a:	1e73      	subs	r3, r6, #1
 800e85c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e85e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e862:	2b30      	cmp	r3, #48	@ 0x30
 800e864:	d0f8      	beq.n	800e858 <_dtoa_r+0x650>
 800e866:	9f04      	ldr	r7, [sp, #16]
 800e868:	e73e      	b.n	800e6e8 <_dtoa_r+0x4e0>
 800e86a:	4b9b      	ldr	r3, [pc, #620]	@ (800ead8 <_dtoa_r+0x8d0>)
 800e86c:	f7f1 fec8 	bl	8000600 <__aeabi_dmul>
 800e870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e874:	e7bc      	b.n	800e7f0 <_dtoa_r+0x5e8>
 800e876:	d10c      	bne.n	800e892 <_dtoa_r+0x68a>
 800e878:	2200      	movs	r2, #0
 800e87a:	4b98      	ldr	r3, [pc, #608]	@ (800eadc <_dtoa_r+0x8d4>)
 800e87c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e880:	f7f1 febe 	bl	8000600 <__aeabi_dmul>
 800e884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e888:	f7f2 f940 	bl	8000b0c <__aeabi_dcmpge>
 800e88c:	2800      	cmp	r0, #0
 800e88e:	f000 8157 	beq.w	800eb40 <_dtoa_r+0x938>
 800e892:	2400      	movs	r4, #0
 800e894:	4625      	mov	r5, r4
 800e896:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e898:	4656      	mov	r6, sl
 800e89a:	43db      	mvns	r3, r3
 800e89c:	9304      	str	r3, [sp, #16]
 800e89e:	2700      	movs	r7, #0
 800e8a0:	4621      	mov	r1, r4
 800e8a2:	4658      	mov	r0, fp
 800e8a4:	f000 fd58 	bl	800f358 <_Bfree>
 800e8a8:	2d00      	cmp	r5, #0
 800e8aa:	d0dc      	beq.n	800e866 <_dtoa_r+0x65e>
 800e8ac:	b12f      	cbz	r7, 800e8ba <_dtoa_r+0x6b2>
 800e8ae:	42af      	cmp	r7, r5
 800e8b0:	d003      	beq.n	800e8ba <_dtoa_r+0x6b2>
 800e8b2:	4639      	mov	r1, r7
 800e8b4:	4658      	mov	r0, fp
 800e8b6:	f000 fd4f 	bl	800f358 <_Bfree>
 800e8ba:	4629      	mov	r1, r5
 800e8bc:	4658      	mov	r0, fp
 800e8be:	f000 fd4b 	bl	800f358 <_Bfree>
 800e8c2:	e7d0      	b.n	800e866 <_dtoa_r+0x65e>
 800e8c4:	9704      	str	r7, [sp, #16]
 800e8c6:	4633      	mov	r3, r6
 800e8c8:	461e      	mov	r6, r3
 800e8ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e8ce:	2a39      	cmp	r2, #57	@ 0x39
 800e8d0:	d107      	bne.n	800e8e2 <_dtoa_r+0x6da>
 800e8d2:	459a      	cmp	sl, r3
 800e8d4:	d1f8      	bne.n	800e8c8 <_dtoa_r+0x6c0>
 800e8d6:	9a04      	ldr	r2, [sp, #16]
 800e8d8:	3201      	adds	r2, #1
 800e8da:	9204      	str	r2, [sp, #16]
 800e8dc:	2230      	movs	r2, #48	@ 0x30
 800e8de:	f88a 2000 	strb.w	r2, [sl]
 800e8e2:	781a      	ldrb	r2, [r3, #0]
 800e8e4:	3201      	adds	r2, #1
 800e8e6:	701a      	strb	r2, [r3, #0]
 800e8e8:	e7bd      	b.n	800e866 <_dtoa_r+0x65e>
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	4b7a      	ldr	r3, [pc, #488]	@ (800ead8 <_dtoa_r+0x8d0>)
 800e8ee:	f7f1 fe87 	bl	8000600 <__aeabi_dmul>
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	4604      	mov	r4, r0
 800e8f8:	460d      	mov	r5, r1
 800e8fa:	f7f2 f8e9 	bl	8000ad0 <__aeabi_dcmpeq>
 800e8fe:	2800      	cmp	r0, #0
 800e900:	f43f aebb 	beq.w	800e67a <_dtoa_r+0x472>
 800e904:	e6f0      	b.n	800e6e8 <_dtoa_r+0x4e0>
 800e906:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e908:	2a00      	cmp	r2, #0
 800e90a:	f000 80db 	beq.w	800eac4 <_dtoa_r+0x8bc>
 800e90e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e910:	2a01      	cmp	r2, #1
 800e912:	f300 80bf 	bgt.w	800ea94 <_dtoa_r+0x88c>
 800e916:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e918:	2a00      	cmp	r2, #0
 800e91a:	f000 80b7 	beq.w	800ea8c <_dtoa_r+0x884>
 800e91e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e922:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e924:	4646      	mov	r6, r8
 800e926:	9a08      	ldr	r2, [sp, #32]
 800e928:	2101      	movs	r1, #1
 800e92a:	4658      	mov	r0, fp
 800e92c:	4498      	add	r8, r3
 800e92e:	441a      	add	r2, r3
 800e930:	9208      	str	r2, [sp, #32]
 800e932:	f000 fdc7 	bl	800f4c4 <__i2b>
 800e936:	4605      	mov	r5, r0
 800e938:	b15e      	cbz	r6, 800e952 <_dtoa_r+0x74a>
 800e93a:	9b08      	ldr	r3, [sp, #32]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	dd08      	ble.n	800e952 <_dtoa_r+0x74a>
 800e940:	42b3      	cmp	r3, r6
 800e942:	9a08      	ldr	r2, [sp, #32]
 800e944:	bfa8      	it	ge
 800e946:	4633      	movge	r3, r6
 800e948:	eba8 0803 	sub.w	r8, r8, r3
 800e94c:	1af6      	subs	r6, r6, r3
 800e94e:	1ad3      	subs	r3, r2, r3
 800e950:	9308      	str	r3, [sp, #32]
 800e952:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e954:	b1f3      	cbz	r3, 800e994 <_dtoa_r+0x78c>
 800e956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e958:	2b00      	cmp	r3, #0
 800e95a:	f000 80b7 	beq.w	800eacc <_dtoa_r+0x8c4>
 800e95e:	b18c      	cbz	r4, 800e984 <_dtoa_r+0x77c>
 800e960:	4629      	mov	r1, r5
 800e962:	4622      	mov	r2, r4
 800e964:	4658      	mov	r0, fp
 800e966:	f000 fe6d 	bl	800f644 <__pow5mult>
 800e96a:	464a      	mov	r2, r9
 800e96c:	4601      	mov	r1, r0
 800e96e:	4605      	mov	r5, r0
 800e970:	4658      	mov	r0, fp
 800e972:	f000 fdbd 	bl	800f4f0 <__multiply>
 800e976:	4649      	mov	r1, r9
 800e978:	9004      	str	r0, [sp, #16]
 800e97a:	4658      	mov	r0, fp
 800e97c:	f000 fcec 	bl	800f358 <_Bfree>
 800e980:	9b04      	ldr	r3, [sp, #16]
 800e982:	4699      	mov	r9, r3
 800e984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e986:	1b1a      	subs	r2, r3, r4
 800e988:	d004      	beq.n	800e994 <_dtoa_r+0x78c>
 800e98a:	4649      	mov	r1, r9
 800e98c:	4658      	mov	r0, fp
 800e98e:	f000 fe59 	bl	800f644 <__pow5mult>
 800e992:	4681      	mov	r9, r0
 800e994:	2101      	movs	r1, #1
 800e996:	4658      	mov	r0, fp
 800e998:	f000 fd94 	bl	800f4c4 <__i2b>
 800e99c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e99e:	4604      	mov	r4, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f000 81cf 	beq.w	800ed44 <_dtoa_r+0xb3c>
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	4601      	mov	r1, r0
 800e9aa:	4658      	mov	r0, fp
 800e9ac:	f000 fe4a 	bl	800f644 <__pow5mult>
 800e9b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	f300 8095 	bgt.w	800eae4 <_dtoa_r+0x8dc>
 800e9ba:	9b02      	ldr	r3, [sp, #8]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	f040 8087 	bne.w	800ead0 <_dtoa_r+0x8c8>
 800e9c2:	9b03      	ldr	r3, [sp, #12]
 800e9c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f040 8089 	bne.w	800eae0 <_dtoa_r+0x8d8>
 800e9ce:	9b03      	ldr	r3, [sp, #12]
 800e9d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e9d4:	0d1b      	lsrs	r3, r3, #20
 800e9d6:	051b      	lsls	r3, r3, #20
 800e9d8:	b12b      	cbz	r3, 800e9e6 <_dtoa_r+0x7de>
 800e9da:	9b08      	ldr	r3, [sp, #32]
 800e9dc:	f108 0801 	add.w	r8, r8, #1
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	9308      	str	r3, [sp, #32]
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	f000 81b0 	beq.w	800ed50 <_dtoa_r+0xb48>
 800e9f0:	6923      	ldr	r3, [r4, #16]
 800e9f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e9f6:	6918      	ldr	r0, [r3, #16]
 800e9f8:	f000 fd18 	bl	800f42c <__hi0bits>
 800e9fc:	f1c0 0020 	rsb	r0, r0, #32
 800ea00:	9b08      	ldr	r3, [sp, #32]
 800ea02:	4418      	add	r0, r3
 800ea04:	f010 001f 	ands.w	r0, r0, #31
 800ea08:	d077      	beq.n	800eafa <_dtoa_r+0x8f2>
 800ea0a:	f1c0 0320 	rsb	r3, r0, #32
 800ea0e:	2b04      	cmp	r3, #4
 800ea10:	dd6b      	ble.n	800eaea <_dtoa_r+0x8e2>
 800ea12:	f1c0 001c 	rsb	r0, r0, #28
 800ea16:	9b08      	ldr	r3, [sp, #32]
 800ea18:	4480      	add	r8, r0
 800ea1a:	4403      	add	r3, r0
 800ea1c:	4406      	add	r6, r0
 800ea1e:	9308      	str	r3, [sp, #32]
 800ea20:	f1b8 0f00 	cmp.w	r8, #0
 800ea24:	dd05      	ble.n	800ea32 <_dtoa_r+0x82a>
 800ea26:	4649      	mov	r1, r9
 800ea28:	4642      	mov	r2, r8
 800ea2a:	4658      	mov	r0, fp
 800ea2c:	f000 fe64 	bl	800f6f8 <__lshift>
 800ea30:	4681      	mov	r9, r0
 800ea32:	9b08      	ldr	r3, [sp, #32]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	dd05      	ble.n	800ea44 <_dtoa_r+0x83c>
 800ea38:	4621      	mov	r1, r4
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	4658      	mov	r0, fp
 800ea3e:	f000 fe5b 	bl	800f6f8 <__lshift>
 800ea42:	4604      	mov	r4, r0
 800ea44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d059      	beq.n	800eafe <_dtoa_r+0x8f6>
 800ea4a:	4621      	mov	r1, r4
 800ea4c:	4648      	mov	r0, r9
 800ea4e:	f000 febf 	bl	800f7d0 <__mcmp>
 800ea52:	2800      	cmp	r0, #0
 800ea54:	da53      	bge.n	800eafe <_dtoa_r+0x8f6>
 800ea56:	1e7b      	subs	r3, r7, #1
 800ea58:	4649      	mov	r1, r9
 800ea5a:	220a      	movs	r2, #10
 800ea5c:	4658      	mov	r0, fp
 800ea5e:	9304      	str	r3, [sp, #16]
 800ea60:	2300      	movs	r3, #0
 800ea62:	f000 fc9b 	bl	800f39c <__multadd>
 800ea66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea68:	4681      	mov	r9, r0
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	f000 8172 	beq.w	800ed54 <_dtoa_r+0xb4c>
 800ea70:	2300      	movs	r3, #0
 800ea72:	4629      	mov	r1, r5
 800ea74:	220a      	movs	r2, #10
 800ea76:	4658      	mov	r0, fp
 800ea78:	f000 fc90 	bl	800f39c <__multadd>
 800ea7c:	9b00      	ldr	r3, [sp, #0]
 800ea7e:	4605      	mov	r5, r0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	dc67      	bgt.n	800eb54 <_dtoa_r+0x94c>
 800ea84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea86:	2b02      	cmp	r3, #2
 800ea88:	dc41      	bgt.n	800eb0e <_dtoa_r+0x906>
 800ea8a:	e063      	b.n	800eb54 <_dtoa_r+0x94c>
 800ea8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ea8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ea92:	e746      	b.n	800e922 <_dtoa_r+0x71a>
 800ea94:	9b07      	ldr	r3, [sp, #28]
 800ea96:	1e5c      	subs	r4, r3, #1
 800ea98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea9a:	42a3      	cmp	r3, r4
 800ea9c:	bfb7      	itett	lt
 800ea9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800eaa0:	1b1c      	subge	r4, r3, r4
 800eaa2:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800eaa4:	1ae3      	sublt	r3, r4, r3
 800eaa6:	bfbe      	ittt	lt
 800eaa8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800eaaa:	2400      	movlt	r4, #0
 800eaac:	18d2      	addlt	r2, r2, r3
 800eaae:	9b07      	ldr	r3, [sp, #28]
 800eab0:	bfb8      	it	lt
 800eab2:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	bfb5      	itete	lt
 800eab8:	eba8 0603 	sublt.w	r6, r8, r3
 800eabc:	4646      	movge	r6, r8
 800eabe:	2300      	movlt	r3, #0
 800eac0:	9b07      	ldrge	r3, [sp, #28]
 800eac2:	e730      	b.n	800e926 <_dtoa_r+0x71e>
 800eac4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800eac6:	4646      	mov	r6, r8
 800eac8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800eaca:	e735      	b.n	800e938 <_dtoa_r+0x730>
 800eacc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eace:	e75c      	b.n	800e98a <_dtoa_r+0x782>
 800ead0:	2300      	movs	r3, #0
 800ead2:	e788      	b.n	800e9e6 <_dtoa_r+0x7de>
 800ead4:	3fe00000 	.word	0x3fe00000
 800ead8:	40240000 	.word	0x40240000
 800eadc:	40140000 	.word	0x40140000
 800eae0:	9b02      	ldr	r3, [sp, #8]
 800eae2:	e780      	b.n	800e9e6 <_dtoa_r+0x7de>
 800eae4:	2300      	movs	r3, #0
 800eae6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eae8:	e782      	b.n	800e9f0 <_dtoa_r+0x7e8>
 800eaea:	d099      	beq.n	800ea20 <_dtoa_r+0x818>
 800eaec:	331c      	adds	r3, #28
 800eaee:	9a08      	ldr	r2, [sp, #32]
 800eaf0:	441a      	add	r2, r3
 800eaf2:	4498      	add	r8, r3
 800eaf4:	441e      	add	r6, r3
 800eaf6:	9208      	str	r2, [sp, #32]
 800eaf8:	e792      	b.n	800ea20 <_dtoa_r+0x818>
 800eafa:	4603      	mov	r3, r0
 800eafc:	e7f6      	b.n	800eaec <_dtoa_r+0x8e4>
 800eafe:	9b07      	ldr	r3, [sp, #28]
 800eb00:	9704      	str	r7, [sp, #16]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	dc20      	bgt.n	800eb48 <_dtoa_r+0x940>
 800eb06:	9300      	str	r3, [sp, #0]
 800eb08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb0a:	2b02      	cmp	r3, #2
 800eb0c:	dd1e      	ble.n	800eb4c <_dtoa_r+0x944>
 800eb0e:	9b00      	ldr	r3, [sp, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	f47f aec0 	bne.w	800e896 <_dtoa_r+0x68e>
 800eb16:	4621      	mov	r1, r4
 800eb18:	2205      	movs	r2, #5
 800eb1a:	4658      	mov	r0, fp
 800eb1c:	f000 fc3e 	bl	800f39c <__multadd>
 800eb20:	4601      	mov	r1, r0
 800eb22:	4604      	mov	r4, r0
 800eb24:	4648      	mov	r0, r9
 800eb26:	f000 fe53 	bl	800f7d0 <__mcmp>
 800eb2a:	2800      	cmp	r0, #0
 800eb2c:	f77f aeb3 	ble.w	800e896 <_dtoa_r+0x68e>
 800eb30:	2331      	movs	r3, #49	@ 0x31
 800eb32:	4656      	mov	r6, sl
 800eb34:	f806 3b01 	strb.w	r3, [r6], #1
 800eb38:	9b04      	ldr	r3, [sp, #16]
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	9304      	str	r3, [sp, #16]
 800eb3e:	e6ae      	b.n	800e89e <_dtoa_r+0x696>
 800eb40:	9c07      	ldr	r4, [sp, #28]
 800eb42:	9704      	str	r7, [sp, #16]
 800eb44:	4625      	mov	r5, r4
 800eb46:	e7f3      	b.n	800eb30 <_dtoa_r+0x928>
 800eb48:	9b07      	ldr	r3, [sp, #28]
 800eb4a:	9300      	str	r3, [sp, #0]
 800eb4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	f000 8104 	beq.w	800ed5c <_dtoa_r+0xb54>
 800eb54:	2e00      	cmp	r6, #0
 800eb56:	dd05      	ble.n	800eb64 <_dtoa_r+0x95c>
 800eb58:	4629      	mov	r1, r5
 800eb5a:	4632      	mov	r2, r6
 800eb5c:	4658      	mov	r0, fp
 800eb5e:	f000 fdcb 	bl	800f6f8 <__lshift>
 800eb62:	4605      	mov	r5, r0
 800eb64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d05a      	beq.n	800ec20 <_dtoa_r+0xa18>
 800eb6a:	6869      	ldr	r1, [r5, #4]
 800eb6c:	4658      	mov	r0, fp
 800eb6e:	f000 fbb3 	bl	800f2d8 <_Balloc>
 800eb72:	4606      	mov	r6, r0
 800eb74:	b928      	cbnz	r0, 800eb82 <_dtoa_r+0x97a>
 800eb76:	4b84      	ldr	r3, [pc, #528]	@ (800ed88 <_dtoa_r+0xb80>)
 800eb78:	4602      	mov	r2, r0
 800eb7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eb7e:	f7ff bb5a 	b.w	800e236 <_dtoa_r+0x2e>
 800eb82:	692a      	ldr	r2, [r5, #16]
 800eb84:	f105 010c 	add.w	r1, r5, #12
 800eb88:	300c      	adds	r0, #12
 800eb8a:	3202      	adds	r2, #2
 800eb8c:	0092      	lsls	r2, r2, #2
 800eb8e:	f7ff fa82 	bl	800e096 <memcpy>
 800eb92:	2201      	movs	r2, #1
 800eb94:	4631      	mov	r1, r6
 800eb96:	4658      	mov	r0, fp
 800eb98:	f000 fdae 	bl	800f6f8 <__lshift>
 800eb9c:	f10a 0301 	add.w	r3, sl, #1
 800eba0:	462f      	mov	r7, r5
 800eba2:	4605      	mov	r5, r0
 800eba4:	9307      	str	r3, [sp, #28]
 800eba6:	9b00      	ldr	r3, [sp, #0]
 800eba8:	4453      	add	r3, sl
 800ebaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebac:	9b02      	ldr	r3, [sp, #8]
 800ebae:	f003 0301 	and.w	r3, r3, #1
 800ebb2:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebb4:	9b07      	ldr	r3, [sp, #28]
 800ebb6:	4621      	mov	r1, r4
 800ebb8:	4648      	mov	r0, r9
 800ebba:	3b01      	subs	r3, #1
 800ebbc:	9300      	str	r3, [sp, #0]
 800ebbe:	f7ff fa95 	bl	800e0ec <quorem>
 800ebc2:	4639      	mov	r1, r7
 800ebc4:	9002      	str	r0, [sp, #8]
 800ebc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ebca:	4648      	mov	r0, r9
 800ebcc:	f000 fe00 	bl	800f7d0 <__mcmp>
 800ebd0:	462a      	mov	r2, r5
 800ebd2:	9008      	str	r0, [sp, #32]
 800ebd4:	4621      	mov	r1, r4
 800ebd6:	4658      	mov	r0, fp
 800ebd8:	f000 fe16 	bl	800f808 <__mdiff>
 800ebdc:	68c2      	ldr	r2, [r0, #12]
 800ebde:	4606      	mov	r6, r0
 800ebe0:	bb02      	cbnz	r2, 800ec24 <_dtoa_r+0xa1c>
 800ebe2:	4601      	mov	r1, r0
 800ebe4:	4648      	mov	r0, r9
 800ebe6:	f000 fdf3 	bl	800f7d0 <__mcmp>
 800ebea:	4602      	mov	r2, r0
 800ebec:	4631      	mov	r1, r6
 800ebee:	4658      	mov	r0, fp
 800ebf0:	920e      	str	r2, [sp, #56]	@ 0x38
 800ebf2:	f000 fbb1 	bl	800f358 <_Bfree>
 800ebf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ebfa:	9e07      	ldr	r6, [sp, #28]
 800ebfc:	ea43 0102 	orr.w	r1, r3, r2
 800ec00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec02:	4319      	orrs	r1, r3
 800ec04:	d110      	bne.n	800ec28 <_dtoa_r+0xa20>
 800ec06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec0a:	d029      	beq.n	800ec60 <_dtoa_r+0xa58>
 800ec0c:	9b08      	ldr	r3, [sp, #32]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	dd02      	ble.n	800ec18 <_dtoa_r+0xa10>
 800ec12:	9b02      	ldr	r3, [sp, #8]
 800ec14:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ec18:	9b00      	ldr	r3, [sp, #0]
 800ec1a:	f883 8000 	strb.w	r8, [r3]
 800ec1e:	e63f      	b.n	800e8a0 <_dtoa_r+0x698>
 800ec20:	4628      	mov	r0, r5
 800ec22:	e7bb      	b.n	800eb9c <_dtoa_r+0x994>
 800ec24:	2201      	movs	r2, #1
 800ec26:	e7e1      	b.n	800ebec <_dtoa_r+0x9e4>
 800ec28:	9b08      	ldr	r3, [sp, #32]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	db04      	blt.n	800ec38 <_dtoa_r+0xa30>
 800ec2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ec30:	430b      	orrs	r3, r1
 800ec32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec34:	430b      	orrs	r3, r1
 800ec36:	d120      	bne.n	800ec7a <_dtoa_r+0xa72>
 800ec38:	2a00      	cmp	r2, #0
 800ec3a:	dded      	ble.n	800ec18 <_dtoa_r+0xa10>
 800ec3c:	4649      	mov	r1, r9
 800ec3e:	2201      	movs	r2, #1
 800ec40:	4658      	mov	r0, fp
 800ec42:	f000 fd59 	bl	800f6f8 <__lshift>
 800ec46:	4621      	mov	r1, r4
 800ec48:	4681      	mov	r9, r0
 800ec4a:	f000 fdc1 	bl	800f7d0 <__mcmp>
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	dc03      	bgt.n	800ec5a <_dtoa_r+0xa52>
 800ec52:	d1e1      	bne.n	800ec18 <_dtoa_r+0xa10>
 800ec54:	f018 0f01 	tst.w	r8, #1
 800ec58:	d0de      	beq.n	800ec18 <_dtoa_r+0xa10>
 800ec5a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec5e:	d1d8      	bne.n	800ec12 <_dtoa_r+0xa0a>
 800ec60:	2339      	movs	r3, #57	@ 0x39
 800ec62:	9a00      	ldr	r2, [sp, #0]
 800ec64:	7013      	strb	r3, [r2, #0]
 800ec66:	4633      	mov	r3, r6
 800ec68:	461e      	mov	r6, r3
 800ec6a:	3b01      	subs	r3, #1
 800ec6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ec70:	2a39      	cmp	r2, #57	@ 0x39
 800ec72:	d052      	beq.n	800ed1a <_dtoa_r+0xb12>
 800ec74:	3201      	adds	r2, #1
 800ec76:	701a      	strb	r2, [r3, #0]
 800ec78:	e612      	b.n	800e8a0 <_dtoa_r+0x698>
 800ec7a:	2a00      	cmp	r2, #0
 800ec7c:	dd07      	ble.n	800ec8e <_dtoa_r+0xa86>
 800ec7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec82:	d0ed      	beq.n	800ec60 <_dtoa_r+0xa58>
 800ec84:	f108 0301 	add.w	r3, r8, #1
 800ec88:	9a00      	ldr	r2, [sp, #0]
 800ec8a:	7013      	strb	r3, [r2, #0]
 800ec8c:	e608      	b.n	800e8a0 <_dtoa_r+0x698>
 800ec8e:	9b07      	ldr	r3, [sp, #28]
 800ec90:	9a07      	ldr	r2, [sp, #28]
 800ec92:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ec96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d028      	beq.n	800ecee <_dtoa_r+0xae6>
 800ec9c:	4649      	mov	r1, r9
 800ec9e:	2300      	movs	r3, #0
 800eca0:	220a      	movs	r2, #10
 800eca2:	4658      	mov	r0, fp
 800eca4:	f000 fb7a 	bl	800f39c <__multadd>
 800eca8:	42af      	cmp	r7, r5
 800ecaa:	4681      	mov	r9, r0
 800ecac:	f04f 0300 	mov.w	r3, #0
 800ecb0:	f04f 020a 	mov.w	r2, #10
 800ecb4:	4639      	mov	r1, r7
 800ecb6:	4658      	mov	r0, fp
 800ecb8:	d107      	bne.n	800ecca <_dtoa_r+0xac2>
 800ecba:	f000 fb6f 	bl	800f39c <__multadd>
 800ecbe:	4607      	mov	r7, r0
 800ecc0:	4605      	mov	r5, r0
 800ecc2:	9b07      	ldr	r3, [sp, #28]
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	9307      	str	r3, [sp, #28]
 800ecc8:	e774      	b.n	800ebb4 <_dtoa_r+0x9ac>
 800ecca:	f000 fb67 	bl	800f39c <__multadd>
 800ecce:	4629      	mov	r1, r5
 800ecd0:	4607      	mov	r7, r0
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	220a      	movs	r2, #10
 800ecd6:	4658      	mov	r0, fp
 800ecd8:	f000 fb60 	bl	800f39c <__multadd>
 800ecdc:	4605      	mov	r5, r0
 800ecde:	e7f0      	b.n	800ecc2 <_dtoa_r+0xaba>
 800ece0:	9b00      	ldr	r3, [sp, #0]
 800ece2:	2700      	movs	r7, #0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	bfcc      	ite	gt
 800ece8:	461e      	movgt	r6, r3
 800ecea:	2601      	movle	r6, #1
 800ecec:	4456      	add	r6, sl
 800ecee:	4649      	mov	r1, r9
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	4658      	mov	r0, fp
 800ecf4:	f000 fd00 	bl	800f6f8 <__lshift>
 800ecf8:	4621      	mov	r1, r4
 800ecfa:	4681      	mov	r9, r0
 800ecfc:	f000 fd68 	bl	800f7d0 <__mcmp>
 800ed00:	2800      	cmp	r0, #0
 800ed02:	dcb0      	bgt.n	800ec66 <_dtoa_r+0xa5e>
 800ed04:	d102      	bne.n	800ed0c <_dtoa_r+0xb04>
 800ed06:	f018 0f01 	tst.w	r8, #1
 800ed0a:	d1ac      	bne.n	800ec66 <_dtoa_r+0xa5e>
 800ed0c:	4633      	mov	r3, r6
 800ed0e:	461e      	mov	r6, r3
 800ed10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed14:	2a30      	cmp	r2, #48	@ 0x30
 800ed16:	d0fa      	beq.n	800ed0e <_dtoa_r+0xb06>
 800ed18:	e5c2      	b.n	800e8a0 <_dtoa_r+0x698>
 800ed1a:	459a      	cmp	sl, r3
 800ed1c:	d1a4      	bne.n	800ec68 <_dtoa_r+0xa60>
 800ed1e:	9b04      	ldr	r3, [sp, #16]
 800ed20:	3301      	adds	r3, #1
 800ed22:	9304      	str	r3, [sp, #16]
 800ed24:	2331      	movs	r3, #49	@ 0x31
 800ed26:	f88a 3000 	strb.w	r3, [sl]
 800ed2a:	e5b9      	b.n	800e8a0 <_dtoa_r+0x698>
 800ed2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ed2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ed8c <_dtoa_r+0xb84>
 800ed32:	b11b      	cbz	r3, 800ed3c <_dtoa_r+0xb34>
 800ed34:	f10a 0308 	add.w	r3, sl, #8
 800ed38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ed3a:	6013      	str	r3, [r2, #0]
 800ed3c:	4650      	mov	r0, sl
 800ed3e:	b019      	add	sp, #100	@ 0x64
 800ed40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed46:	2b01      	cmp	r3, #1
 800ed48:	f77f ae37 	ble.w	800e9ba <_dtoa_r+0x7b2>
 800ed4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed50:	2001      	movs	r0, #1
 800ed52:	e655      	b.n	800ea00 <_dtoa_r+0x7f8>
 800ed54:	9b00      	ldr	r3, [sp, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	f77f aed6 	ble.w	800eb08 <_dtoa_r+0x900>
 800ed5c:	4656      	mov	r6, sl
 800ed5e:	4621      	mov	r1, r4
 800ed60:	4648      	mov	r0, r9
 800ed62:	f7ff f9c3 	bl	800e0ec <quorem>
 800ed66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ed6a:	9b00      	ldr	r3, [sp, #0]
 800ed6c:	f806 8b01 	strb.w	r8, [r6], #1
 800ed70:	eba6 020a 	sub.w	r2, r6, sl
 800ed74:	4293      	cmp	r3, r2
 800ed76:	ddb3      	ble.n	800ece0 <_dtoa_r+0xad8>
 800ed78:	4649      	mov	r1, r9
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	220a      	movs	r2, #10
 800ed7e:	4658      	mov	r0, fp
 800ed80:	f000 fb0c 	bl	800f39c <__multadd>
 800ed84:	4681      	mov	r9, r0
 800ed86:	e7ea      	b.n	800ed5e <_dtoa_r+0xb56>
 800ed88:	08011be4 	.word	0x08011be4
 800ed8c:	08011b7f 	.word	0x08011b7f

0800ed90 <__sfputc_r>:
 800ed90:	6893      	ldr	r3, [r2, #8]
 800ed92:	3b01      	subs	r3, #1
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	6093      	str	r3, [r2, #8]
 800ed98:	b410      	push	{r4}
 800ed9a:	da08      	bge.n	800edae <__sfputc_r+0x1e>
 800ed9c:	6994      	ldr	r4, [r2, #24]
 800ed9e:	42a3      	cmp	r3, r4
 800eda0:	db01      	blt.n	800eda6 <__sfputc_r+0x16>
 800eda2:	290a      	cmp	r1, #10
 800eda4:	d103      	bne.n	800edae <__sfputc_r+0x1e>
 800eda6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edaa:	f000 be73 	b.w	800fa94 <__swbuf_r>
 800edae:	6813      	ldr	r3, [r2, #0]
 800edb0:	1c58      	adds	r0, r3, #1
 800edb2:	6010      	str	r0, [r2, #0]
 800edb4:	4608      	mov	r0, r1
 800edb6:	7019      	strb	r1, [r3, #0]
 800edb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edbc:	4770      	bx	lr

0800edbe <__sfputs_r>:
 800edbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edc0:	4606      	mov	r6, r0
 800edc2:	460f      	mov	r7, r1
 800edc4:	4614      	mov	r4, r2
 800edc6:	18d5      	adds	r5, r2, r3
 800edc8:	42ac      	cmp	r4, r5
 800edca:	d101      	bne.n	800edd0 <__sfputs_r+0x12>
 800edcc:	2000      	movs	r0, #0
 800edce:	e007      	b.n	800ede0 <__sfputs_r+0x22>
 800edd0:	463a      	mov	r2, r7
 800edd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edd6:	4630      	mov	r0, r6
 800edd8:	f7ff ffda 	bl	800ed90 <__sfputc_r>
 800eddc:	1c43      	adds	r3, r0, #1
 800edde:	d1f3      	bne.n	800edc8 <__sfputs_r+0xa>
 800ede0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ede4 <_vfiprintf_r>:
 800ede4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede8:	460d      	mov	r5, r1
 800edea:	b09d      	sub	sp, #116	@ 0x74
 800edec:	4614      	mov	r4, r2
 800edee:	4698      	mov	r8, r3
 800edf0:	4606      	mov	r6, r0
 800edf2:	b118      	cbz	r0, 800edfc <_vfiprintf_r+0x18>
 800edf4:	6a03      	ldr	r3, [r0, #32]
 800edf6:	b90b      	cbnz	r3, 800edfc <_vfiprintf_r+0x18>
 800edf8:	f7ff f858 	bl	800deac <__sinit>
 800edfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edfe:	07d9      	lsls	r1, r3, #31
 800ee00:	d405      	bmi.n	800ee0e <_vfiprintf_r+0x2a>
 800ee02:	89ab      	ldrh	r3, [r5, #12]
 800ee04:	059a      	lsls	r2, r3, #22
 800ee06:	d402      	bmi.n	800ee0e <_vfiprintf_r+0x2a>
 800ee08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee0a:	f7ff f934 	bl	800e076 <__retarget_lock_acquire_recursive>
 800ee0e:	89ab      	ldrh	r3, [r5, #12]
 800ee10:	071b      	lsls	r3, r3, #28
 800ee12:	d501      	bpl.n	800ee18 <_vfiprintf_r+0x34>
 800ee14:	692b      	ldr	r3, [r5, #16]
 800ee16:	b99b      	cbnz	r3, 800ee40 <_vfiprintf_r+0x5c>
 800ee18:	4629      	mov	r1, r5
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	f000 fe78 	bl	800fb10 <__swsetup_r>
 800ee20:	b170      	cbz	r0, 800ee40 <_vfiprintf_r+0x5c>
 800ee22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee24:	07dc      	lsls	r4, r3, #31
 800ee26:	d504      	bpl.n	800ee32 <_vfiprintf_r+0x4e>
 800ee28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee2c:	b01d      	add	sp, #116	@ 0x74
 800ee2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee32:	89ab      	ldrh	r3, [r5, #12]
 800ee34:	0598      	lsls	r0, r3, #22
 800ee36:	d4f7      	bmi.n	800ee28 <_vfiprintf_r+0x44>
 800ee38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee3a:	f7ff f91d 	bl	800e078 <__retarget_lock_release_recursive>
 800ee3e:	e7f3      	b.n	800ee28 <_vfiprintf_r+0x44>
 800ee40:	2300      	movs	r3, #0
 800ee42:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee46:	f04f 0901 	mov.w	r9, #1
 800ee4a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800f000 <_vfiprintf_r+0x21c>
 800ee4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee50:	2320      	movs	r3, #32
 800ee52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee56:	2330      	movs	r3, #48	@ 0x30
 800ee58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee5c:	4623      	mov	r3, r4
 800ee5e:	469a      	mov	sl, r3
 800ee60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee64:	b10a      	cbz	r2, 800ee6a <_vfiprintf_r+0x86>
 800ee66:	2a25      	cmp	r2, #37	@ 0x25
 800ee68:	d1f9      	bne.n	800ee5e <_vfiprintf_r+0x7a>
 800ee6a:	ebba 0b04 	subs.w	fp, sl, r4
 800ee6e:	d00b      	beq.n	800ee88 <_vfiprintf_r+0xa4>
 800ee70:	465b      	mov	r3, fp
 800ee72:	4622      	mov	r2, r4
 800ee74:	4629      	mov	r1, r5
 800ee76:	4630      	mov	r0, r6
 800ee78:	f7ff ffa1 	bl	800edbe <__sfputs_r>
 800ee7c:	3001      	adds	r0, #1
 800ee7e:	f000 80a7 	beq.w	800efd0 <_vfiprintf_r+0x1ec>
 800ee82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee84:	445a      	add	r2, fp
 800ee86:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee88:	f89a 3000 	ldrb.w	r3, [sl]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f000 809f 	beq.w	800efd0 <_vfiprintf_r+0x1ec>
 800ee92:	2300      	movs	r3, #0
 800ee94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ee98:	f10a 0a01 	add.w	sl, sl, #1
 800ee9c:	9304      	str	r3, [sp, #16]
 800ee9e:	9307      	str	r3, [sp, #28]
 800eea0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eea4:	931a      	str	r3, [sp, #104]	@ 0x68
 800eea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eeaa:	4654      	mov	r4, sl
 800eeac:	2205      	movs	r2, #5
 800eeae:	4854      	ldr	r0, [pc, #336]	@ (800f000 <_vfiprintf_r+0x21c>)
 800eeb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeb4:	f7ff f8e1 	bl	800e07a <memchr>
 800eeb8:	9a04      	ldr	r2, [sp, #16]
 800eeba:	b9d8      	cbnz	r0, 800eef4 <_vfiprintf_r+0x110>
 800eebc:	06d1      	lsls	r1, r2, #27
 800eebe:	bf44      	itt	mi
 800eec0:	2320      	movmi	r3, #32
 800eec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eec6:	0713      	lsls	r3, r2, #28
 800eec8:	bf44      	itt	mi
 800eeca:	232b      	movmi	r3, #43	@ 0x2b
 800eecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eed0:	f89a 3000 	ldrb.w	r3, [sl]
 800eed4:	2b2a      	cmp	r3, #42	@ 0x2a
 800eed6:	d015      	beq.n	800ef04 <_vfiprintf_r+0x120>
 800eed8:	9a07      	ldr	r2, [sp, #28]
 800eeda:	4654      	mov	r4, sl
 800eedc:	2000      	movs	r0, #0
 800eede:	f04f 0c0a 	mov.w	ip, #10
 800eee2:	4621      	mov	r1, r4
 800eee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eee8:	3b30      	subs	r3, #48	@ 0x30
 800eeea:	2b09      	cmp	r3, #9
 800eeec:	d94b      	bls.n	800ef86 <_vfiprintf_r+0x1a2>
 800eeee:	b1b0      	cbz	r0, 800ef1e <_vfiprintf_r+0x13a>
 800eef0:	9207      	str	r2, [sp, #28]
 800eef2:	e014      	b.n	800ef1e <_vfiprintf_r+0x13a>
 800eef4:	eba0 0308 	sub.w	r3, r0, r8
 800eef8:	46a2      	mov	sl, r4
 800eefa:	fa09 f303 	lsl.w	r3, r9, r3
 800eefe:	4313      	orrs	r3, r2
 800ef00:	9304      	str	r3, [sp, #16]
 800ef02:	e7d2      	b.n	800eeaa <_vfiprintf_r+0xc6>
 800ef04:	9b03      	ldr	r3, [sp, #12]
 800ef06:	1d19      	adds	r1, r3, #4
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	9103      	str	r1, [sp, #12]
 800ef0e:	bfbb      	ittet	lt
 800ef10:	425b      	neglt	r3, r3
 800ef12:	f042 0202 	orrlt.w	r2, r2, #2
 800ef16:	9307      	strge	r3, [sp, #28]
 800ef18:	9307      	strlt	r3, [sp, #28]
 800ef1a:	bfb8      	it	lt
 800ef1c:	9204      	strlt	r2, [sp, #16]
 800ef1e:	7823      	ldrb	r3, [r4, #0]
 800ef20:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef22:	d10a      	bne.n	800ef3a <_vfiprintf_r+0x156>
 800ef24:	7863      	ldrb	r3, [r4, #1]
 800ef26:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef28:	d132      	bne.n	800ef90 <_vfiprintf_r+0x1ac>
 800ef2a:	9b03      	ldr	r3, [sp, #12]
 800ef2c:	3402      	adds	r4, #2
 800ef2e:	1d1a      	adds	r2, r3, #4
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef36:	9203      	str	r2, [sp, #12]
 800ef38:	9305      	str	r3, [sp, #20]
 800ef3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f010 <_vfiprintf_r+0x22c>
 800ef3e:	2203      	movs	r2, #3
 800ef40:	7821      	ldrb	r1, [r4, #0]
 800ef42:	4650      	mov	r0, sl
 800ef44:	f7ff f899 	bl	800e07a <memchr>
 800ef48:	b138      	cbz	r0, 800ef5a <_vfiprintf_r+0x176>
 800ef4a:	eba0 000a 	sub.w	r0, r0, sl
 800ef4e:	2240      	movs	r2, #64	@ 0x40
 800ef50:	9b04      	ldr	r3, [sp, #16]
 800ef52:	3401      	adds	r4, #1
 800ef54:	4082      	lsls	r2, r0
 800ef56:	4313      	orrs	r3, r2
 800ef58:	9304      	str	r3, [sp, #16]
 800ef5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef5e:	2206      	movs	r2, #6
 800ef60:	4828      	ldr	r0, [pc, #160]	@ (800f004 <_vfiprintf_r+0x220>)
 800ef62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef66:	f7ff f888 	bl	800e07a <memchr>
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	d03f      	beq.n	800efee <_vfiprintf_r+0x20a>
 800ef6e:	4b26      	ldr	r3, [pc, #152]	@ (800f008 <_vfiprintf_r+0x224>)
 800ef70:	bb1b      	cbnz	r3, 800efba <_vfiprintf_r+0x1d6>
 800ef72:	9b03      	ldr	r3, [sp, #12]
 800ef74:	3307      	adds	r3, #7
 800ef76:	f023 0307 	bic.w	r3, r3, #7
 800ef7a:	3308      	adds	r3, #8
 800ef7c:	9303      	str	r3, [sp, #12]
 800ef7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef80:	443b      	add	r3, r7
 800ef82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef84:	e76a      	b.n	800ee5c <_vfiprintf_r+0x78>
 800ef86:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef8a:	460c      	mov	r4, r1
 800ef8c:	2001      	movs	r0, #1
 800ef8e:	e7a8      	b.n	800eee2 <_vfiprintf_r+0xfe>
 800ef90:	2300      	movs	r3, #0
 800ef92:	3401      	adds	r4, #1
 800ef94:	f04f 0c0a 	mov.w	ip, #10
 800ef98:	4619      	mov	r1, r3
 800ef9a:	9305      	str	r3, [sp, #20]
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efa2:	3a30      	subs	r2, #48	@ 0x30
 800efa4:	2a09      	cmp	r2, #9
 800efa6:	d903      	bls.n	800efb0 <_vfiprintf_r+0x1cc>
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d0c6      	beq.n	800ef3a <_vfiprintf_r+0x156>
 800efac:	9105      	str	r1, [sp, #20]
 800efae:	e7c4      	b.n	800ef3a <_vfiprintf_r+0x156>
 800efb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800efb4:	4604      	mov	r4, r0
 800efb6:	2301      	movs	r3, #1
 800efb8:	e7f0      	b.n	800ef9c <_vfiprintf_r+0x1b8>
 800efba:	ab03      	add	r3, sp, #12
 800efbc:	462a      	mov	r2, r5
 800efbe:	a904      	add	r1, sp, #16
 800efc0:	4630      	mov	r0, r6
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	4b11      	ldr	r3, [pc, #68]	@ (800f00c <_vfiprintf_r+0x228>)
 800efc6:	f7fe fabd 	bl	800d544 <_printf_float>
 800efca:	4607      	mov	r7, r0
 800efcc:	1c78      	adds	r0, r7, #1
 800efce:	d1d6      	bne.n	800ef7e <_vfiprintf_r+0x19a>
 800efd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efd2:	07d9      	lsls	r1, r3, #31
 800efd4:	d405      	bmi.n	800efe2 <_vfiprintf_r+0x1fe>
 800efd6:	89ab      	ldrh	r3, [r5, #12]
 800efd8:	059a      	lsls	r2, r3, #22
 800efda:	d402      	bmi.n	800efe2 <_vfiprintf_r+0x1fe>
 800efdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efde:	f7ff f84b 	bl	800e078 <__retarget_lock_release_recursive>
 800efe2:	89ab      	ldrh	r3, [r5, #12]
 800efe4:	065b      	lsls	r3, r3, #25
 800efe6:	f53f af1f 	bmi.w	800ee28 <_vfiprintf_r+0x44>
 800efea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800efec:	e71e      	b.n	800ee2c <_vfiprintf_r+0x48>
 800efee:	ab03      	add	r3, sp, #12
 800eff0:	462a      	mov	r2, r5
 800eff2:	a904      	add	r1, sp, #16
 800eff4:	4630      	mov	r0, r6
 800eff6:	9300      	str	r3, [sp, #0]
 800eff8:	4b04      	ldr	r3, [pc, #16]	@ (800f00c <_vfiprintf_r+0x228>)
 800effa:	f7fe fd3f 	bl	800da7c <_printf_i>
 800effe:	e7e4      	b.n	800efca <_vfiprintf_r+0x1e6>
 800f000:	08011bf5 	.word	0x08011bf5
 800f004:	08011bff 	.word	0x08011bff
 800f008:	0800d545 	.word	0x0800d545
 800f00c:	0800edbf 	.word	0x0800edbf
 800f010:	08011bfb 	.word	0x08011bfb

0800f014 <malloc>:
 800f014:	4b02      	ldr	r3, [pc, #8]	@ (800f020 <malloc+0xc>)
 800f016:	4601      	mov	r1, r0
 800f018:	6818      	ldr	r0, [r3, #0]
 800f01a:	f000 b825 	b.w	800f068 <_malloc_r>
 800f01e:	bf00      	nop
 800f020:	200000b8 	.word	0x200000b8

0800f024 <sbrk_aligned>:
 800f024:	b570      	push	{r4, r5, r6, lr}
 800f026:	4e0f      	ldr	r6, [pc, #60]	@ (800f064 <sbrk_aligned+0x40>)
 800f028:	460c      	mov	r4, r1
 800f02a:	4605      	mov	r5, r0
 800f02c:	6831      	ldr	r1, [r6, #0]
 800f02e:	b911      	cbnz	r1, 800f036 <sbrk_aligned+0x12>
 800f030:	f000 feb0 	bl	800fd94 <_sbrk_r>
 800f034:	6030      	str	r0, [r6, #0]
 800f036:	4621      	mov	r1, r4
 800f038:	4628      	mov	r0, r5
 800f03a:	f000 feab 	bl	800fd94 <_sbrk_r>
 800f03e:	1c43      	adds	r3, r0, #1
 800f040:	d103      	bne.n	800f04a <sbrk_aligned+0x26>
 800f042:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f046:	4620      	mov	r0, r4
 800f048:	bd70      	pop	{r4, r5, r6, pc}
 800f04a:	1cc4      	adds	r4, r0, #3
 800f04c:	f024 0403 	bic.w	r4, r4, #3
 800f050:	42a0      	cmp	r0, r4
 800f052:	d0f8      	beq.n	800f046 <sbrk_aligned+0x22>
 800f054:	1a21      	subs	r1, r4, r0
 800f056:	4628      	mov	r0, r5
 800f058:	f000 fe9c 	bl	800fd94 <_sbrk_r>
 800f05c:	3001      	adds	r0, #1
 800f05e:	d1f2      	bne.n	800f046 <sbrk_aligned+0x22>
 800f060:	e7ef      	b.n	800f042 <sbrk_aligned+0x1e>
 800f062:	bf00      	nop
 800f064:	200010b4 	.word	0x200010b4

0800f068 <_malloc_r>:
 800f068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f06c:	1ccd      	adds	r5, r1, #3
 800f06e:	4606      	mov	r6, r0
 800f070:	f025 0503 	bic.w	r5, r5, #3
 800f074:	3508      	adds	r5, #8
 800f076:	2d0c      	cmp	r5, #12
 800f078:	bf38      	it	cc
 800f07a:	250c      	movcc	r5, #12
 800f07c:	2d00      	cmp	r5, #0
 800f07e:	db01      	blt.n	800f084 <_malloc_r+0x1c>
 800f080:	42a9      	cmp	r1, r5
 800f082:	d904      	bls.n	800f08e <_malloc_r+0x26>
 800f084:	230c      	movs	r3, #12
 800f086:	6033      	str	r3, [r6, #0]
 800f088:	2000      	movs	r0, #0
 800f08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f08e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f164 <_malloc_r+0xfc>
 800f092:	f000 f915 	bl	800f2c0 <__malloc_lock>
 800f096:	f8d8 3000 	ldr.w	r3, [r8]
 800f09a:	461c      	mov	r4, r3
 800f09c:	bb44      	cbnz	r4, 800f0f0 <_malloc_r+0x88>
 800f09e:	4629      	mov	r1, r5
 800f0a0:	4630      	mov	r0, r6
 800f0a2:	f7ff ffbf 	bl	800f024 <sbrk_aligned>
 800f0a6:	1c43      	adds	r3, r0, #1
 800f0a8:	4604      	mov	r4, r0
 800f0aa:	d158      	bne.n	800f15e <_malloc_r+0xf6>
 800f0ac:	f8d8 4000 	ldr.w	r4, [r8]
 800f0b0:	4627      	mov	r7, r4
 800f0b2:	2f00      	cmp	r7, #0
 800f0b4:	d143      	bne.n	800f13e <_malloc_r+0xd6>
 800f0b6:	2c00      	cmp	r4, #0
 800f0b8:	d04b      	beq.n	800f152 <_malloc_r+0xea>
 800f0ba:	6823      	ldr	r3, [r4, #0]
 800f0bc:	4639      	mov	r1, r7
 800f0be:	4630      	mov	r0, r6
 800f0c0:	eb04 0903 	add.w	r9, r4, r3
 800f0c4:	f000 fe66 	bl	800fd94 <_sbrk_r>
 800f0c8:	4581      	cmp	r9, r0
 800f0ca:	d142      	bne.n	800f152 <_malloc_r+0xea>
 800f0cc:	6821      	ldr	r1, [r4, #0]
 800f0ce:	4630      	mov	r0, r6
 800f0d0:	1a6d      	subs	r5, r5, r1
 800f0d2:	4629      	mov	r1, r5
 800f0d4:	f7ff ffa6 	bl	800f024 <sbrk_aligned>
 800f0d8:	3001      	adds	r0, #1
 800f0da:	d03a      	beq.n	800f152 <_malloc_r+0xea>
 800f0dc:	6823      	ldr	r3, [r4, #0]
 800f0de:	442b      	add	r3, r5
 800f0e0:	6023      	str	r3, [r4, #0]
 800f0e2:	f8d8 3000 	ldr.w	r3, [r8]
 800f0e6:	685a      	ldr	r2, [r3, #4]
 800f0e8:	bb62      	cbnz	r2, 800f144 <_malloc_r+0xdc>
 800f0ea:	f8c8 7000 	str.w	r7, [r8]
 800f0ee:	e00f      	b.n	800f110 <_malloc_r+0xa8>
 800f0f0:	6822      	ldr	r2, [r4, #0]
 800f0f2:	1b52      	subs	r2, r2, r5
 800f0f4:	d420      	bmi.n	800f138 <_malloc_r+0xd0>
 800f0f6:	2a0b      	cmp	r2, #11
 800f0f8:	d917      	bls.n	800f12a <_malloc_r+0xc2>
 800f0fa:	1961      	adds	r1, r4, r5
 800f0fc:	42a3      	cmp	r3, r4
 800f0fe:	6025      	str	r5, [r4, #0]
 800f100:	bf18      	it	ne
 800f102:	6059      	strne	r1, [r3, #4]
 800f104:	6863      	ldr	r3, [r4, #4]
 800f106:	bf08      	it	eq
 800f108:	f8c8 1000 	streq.w	r1, [r8]
 800f10c:	5162      	str	r2, [r4, r5]
 800f10e:	604b      	str	r3, [r1, #4]
 800f110:	4630      	mov	r0, r6
 800f112:	f000 f8db 	bl	800f2cc <__malloc_unlock>
 800f116:	f104 000b 	add.w	r0, r4, #11
 800f11a:	1d23      	adds	r3, r4, #4
 800f11c:	f020 0007 	bic.w	r0, r0, #7
 800f120:	1ac2      	subs	r2, r0, r3
 800f122:	bf1c      	itt	ne
 800f124:	1a1b      	subne	r3, r3, r0
 800f126:	50a3      	strne	r3, [r4, r2]
 800f128:	e7af      	b.n	800f08a <_malloc_r+0x22>
 800f12a:	6862      	ldr	r2, [r4, #4]
 800f12c:	42a3      	cmp	r3, r4
 800f12e:	bf0c      	ite	eq
 800f130:	f8c8 2000 	streq.w	r2, [r8]
 800f134:	605a      	strne	r2, [r3, #4]
 800f136:	e7eb      	b.n	800f110 <_malloc_r+0xa8>
 800f138:	4623      	mov	r3, r4
 800f13a:	6864      	ldr	r4, [r4, #4]
 800f13c:	e7ae      	b.n	800f09c <_malloc_r+0x34>
 800f13e:	463c      	mov	r4, r7
 800f140:	687f      	ldr	r7, [r7, #4]
 800f142:	e7b6      	b.n	800f0b2 <_malloc_r+0x4a>
 800f144:	461a      	mov	r2, r3
 800f146:	685b      	ldr	r3, [r3, #4]
 800f148:	42a3      	cmp	r3, r4
 800f14a:	d1fb      	bne.n	800f144 <_malloc_r+0xdc>
 800f14c:	2300      	movs	r3, #0
 800f14e:	6053      	str	r3, [r2, #4]
 800f150:	e7de      	b.n	800f110 <_malloc_r+0xa8>
 800f152:	230c      	movs	r3, #12
 800f154:	4630      	mov	r0, r6
 800f156:	6033      	str	r3, [r6, #0]
 800f158:	f000 f8b8 	bl	800f2cc <__malloc_unlock>
 800f15c:	e794      	b.n	800f088 <_malloc_r+0x20>
 800f15e:	6005      	str	r5, [r0, #0]
 800f160:	e7d6      	b.n	800f110 <_malloc_r+0xa8>
 800f162:	bf00      	nop
 800f164:	200010b8 	.word	0x200010b8

0800f168 <__sflush_r>:
 800f168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f170:	0716      	lsls	r6, r2, #28
 800f172:	4605      	mov	r5, r0
 800f174:	460c      	mov	r4, r1
 800f176:	d454      	bmi.n	800f222 <__sflush_r+0xba>
 800f178:	684b      	ldr	r3, [r1, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	dc02      	bgt.n	800f184 <__sflush_r+0x1c>
 800f17e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f180:	2b00      	cmp	r3, #0
 800f182:	dd48      	ble.n	800f216 <__sflush_r+0xae>
 800f184:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f186:	2e00      	cmp	r6, #0
 800f188:	d045      	beq.n	800f216 <__sflush_r+0xae>
 800f18a:	2300      	movs	r3, #0
 800f18c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f190:	682f      	ldr	r7, [r5, #0]
 800f192:	6a21      	ldr	r1, [r4, #32]
 800f194:	602b      	str	r3, [r5, #0]
 800f196:	d030      	beq.n	800f1fa <__sflush_r+0x92>
 800f198:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f19a:	89a3      	ldrh	r3, [r4, #12]
 800f19c:	0759      	lsls	r1, r3, #29
 800f19e:	d505      	bpl.n	800f1ac <__sflush_r+0x44>
 800f1a0:	6863      	ldr	r3, [r4, #4]
 800f1a2:	1ad2      	subs	r2, r2, r3
 800f1a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f1a6:	b10b      	cbz	r3, 800f1ac <__sflush_r+0x44>
 800f1a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f1aa:	1ad2      	subs	r2, r2, r3
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f1b0:	6a21      	ldr	r1, [r4, #32]
 800f1b2:	4628      	mov	r0, r5
 800f1b4:	47b0      	blx	r6
 800f1b6:	1c43      	adds	r3, r0, #1
 800f1b8:	89a3      	ldrh	r3, [r4, #12]
 800f1ba:	d106      	bne.n	800f1ca <__sflush_r+0x62>
 800f1bc:	6829      	ldr	r1, [r5, #0]
 800f1be:	291d      	cmp	r1, #29
 800f1c0:	d82b      	bhi.n	800f21a <__sflush_r+0xb2>
 800f1c2:	4a2a      	ldr	r2, [pc, #168]	@ (800f26c <__sflush_r+0x104>)
 800f1c4:	410a      	asrs	r2, r1
 800f1c6:	07d6      	lsls	r6, r2, #31
 800f1c8:	d427      	bmi.n	800f21a <__sflush_r+0xb2>
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	04d9      	lsls	r1, r3, #19
 800f1ce:	6062      	str	r2, [r4, #4]
 800f1d0:	6922      	ldr	r2, [r4, #16]
 800f1d2:	6022      	str	r2, [r4, #0]
 800f1d4:	d504      	bpl.n	800f1e0 <__sflush_r+0x78>
 800f1d6:	1c42      	adds	r2, r0, #1
 800f1d8:	d101      	bne.n	800f1de <__sflush_r+0x76>
 800f1da:	682b      	ldr	r3, [r5, #0]
 800f1dc:	b903      	cbnz	r3, 800f1e0 <__sflush_r+0x78>
 800f1de:	6560      	str	r0, [r4, #84]	@ 0x54
 800f1e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1e2:	602f      	str	r7, [r5, #0]
 800f1e4:	b1b9      	cbz	r1, 800f216 <__sflush_r+0xae>
 800f1e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1ea:	4299      	cmp	r1, r3
 800f1ec:	d002      	beq.n	800f1f4 <__sflush_r+0x8c>
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	f000 fe0e 	bl	800fe10 <_free_r>
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1f8:	e00d      	b.n	800f216 <__sflush_r+0xae>
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	47b0      	blx	r6
 800f200:	4602      	mov	r2, r0
 800f202:	1c50      	adds	r0, r2, #1
 800f204:	d1c9      	bne.n	800f19a <__sflush_r+0x32>
 800f206:	682b      	ldr	r3, [r5, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d0c6      	beq.n	800f19a <__sflush_r+0x32>
 800f20c:	2b1d      	cmp	r3, #29
 800f20e:	d001      	beq.n	800f214 <__sflush_r+0xac>
 800f210:	2b16      	cmp	r3, #22
 800f212:	d11d      	bne.n	800f250 <__sflush_r+0xe8>
 800f214:	602f      	str	r7, [r5, #0]
 800f216:	2000      	movs	r0, #0
 800f218:	e021      	b.n	800f25e <__sflush_r+0xf6>
 800f21a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f21e:	b21b      	sxth	r3, r3
 800f220:	e01a      	b.n	800f258 <__sflush_r+0xf0>
 800f222:	690f      	ldr	r7, [r1, #16]
 800f224:	2f00      	cmp	r7, #0
 800f226:	d0f6      	beq.n	800f216 <__sflush_r+0xae>
 800f228:	0793      	lsls	r3, r2, #30
 800f22a:	680e      	ldr	r6, [r1, #0]
 800f22c:	600f      	str	r7, [r1, #0]
 800f22e:	bf0c      	ite	eq
 800f230:	694b      	ldreq	r3, [r1, #20]
 800f232:	2300      	movne	r3, #0
 800f234:	eba6 0807 	sub.w	r8, r6, r7
 800f238:	608b      	str	r3, [r1, #8]
 800f23a:	f1b8 0f00 	cmp.w	r8, #0
 800f23e:	ddea      	ble.n	800f216 <__sflush_r+0xae>
 800f240:	4643      	mov	r3, r8
 800f242:	463a      	mov	r2, r7
 800f244:	6a21      	ldr	r1, [r4, #32]
 800f246:	4628      	mov	r0, r5
 800f248:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f24a:	47b0      	blx	r6
 800f24c:	2800      	cmp	r0, #0
 800f24e:	dc08      	bgt.n	800f262 <__sflush_r+0xfa>
 800f250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f258:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f25c:	81a3      	strh	r3, [r4, #12]
 800f25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f262:	4407      	add	r7, r0
 800f264:	eba8 0800 	sub.w	r8, r8, r0
 800f268:	e7e7      	b.n	800f23a <__sflush_r+0xd2>
 800f26a:	bf00      	nop
 800f26c:	dfbffffe 	.word	0xdfbffffe

0800f270 <_fflush_r>:
 800f270:	b538      	push	{r3, r4, r5, lr}
 800f272:	690b      	ldr	r3, [r1, #16]
 800f274:	4605      	mov	r5, r0
 800f276:	460c      	mov	r4, r1
 800f278:	b913      	cbnz	r3, 800f280 <_fflush_r+0x10>
 800f27a:	2500      	movs	r5, #0
 800f27c:	4628      	mov	r0, r5
 800f27e:	bd38      	pop	{r3, r4, r5, pc}
 800f280:	b118      	cbz	r0, 800f28a <_fflush_r+0x1a>
 800f282:	6a03      	ldr	r3, [r0, #32]
 800f284:	b90b      	cbnz	r3, 800f28a <_fflush_r+0x1a>
 800f286:	f7fe fe11 	bl	800deac <__sinit>
 800f28a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d0f3      	beq.n	800f27a <_fflush_r+0xa>
 800f292:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f294:	07d0      	lsls	r0, r2, #31
 800f296:	d404      	bmi.n	800f2a2 <_fflush_r+0x32>
 800f298:	0599      	lsls	r1, r3, #22
 800f29a:	d402      	bmi.n	800f2a2 <_fflush_r+0x32>
 800f29c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f29e:	f7fe feea 	bl	800e076 <__retarget_lock_acquire_recursive>
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	4621      	mov	r1, r4
 800f2a6:	f7ff ff5f 	bl	800f168 <__sflush_r>
 800f2aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f2ac:	4605      	mov	r5, r0
 800f2ae:	07da      	lsls	r2, r3, #31
 800f2b0:	d4e4      	bmi.n	800f27c <_fflush_r+0xc>
 800f2b2:	89a3      	ldrh	r3, [r4, #12]
 800f2b4:	059b      	lsls	r3, r3, #22
 800f2b6:	d4e1      	bmi.n	800f27c <_fflush_r+0xc>
 800f2b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2ba:	f7fe fedd 	bl	800e078 <__retarget_lock_release_recursive>
 800f2be:	e7dd      	b.n	800f27c <_fflush_r+0xc>

0800f2c0 <__malloc_lock>:
 800f2c0:	4801      	ldr	r0, [pc, #4]	@ (800f2c8 <__malloc_lock+0x8>)
 800f2c2:	f7fe bed8 	b.w	800e076 <__retarget_lock_acquire_recursive>
 800f2c6:	bf00      	nop
 800f2c8:	200010b0 	.word	0x200010b0

0800f2cc <__malloc_unlock>:
 800f2cc:	4801      	ldr	r0, [pc, #4]	@ (800f2d4 <__malloc_unlock+0x8>)
 800f2ce:	f7fe bed3 	b.w	800e078 <__retarget_lock_release_recursive>
 800f2d2:	bf00      	nop
 800f2d4:	200010b0 	.word	0x200010b0

0800f2d8 <_Balloc>:
 800f2d8:	b570      	push	{r4, r5, r6, lr}
 800f2da:	69c6      	ldr	r6, [r0, #28]
 800f2dc:	4604      	mov	r4, r0
 800f2de:	460d      	mov	r5, r1
 800f2e0:	b976      	cbnz	r6, 800f300 <_Balloc+0x28>
 800f2e2:	2010      	movs	r0, #16
 800f2e4:	f7ff fe96 	bl	800f014 <malloc>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	61e0      	str	r0, [r4, #28]
 800f2ec:	b920      	cbnz	r0, 800f2f8 <_Balloc+0x20>
 800f2ee:	4b18      	ldr	r3, [pc, #96]	@ (800f350 <_Balloc+0x78>)
 800f2f0:	216b      	movs	r1, #107	@ 0x6b
 800f2f2:	4818      	ldr	r0, [pc, #96]	@ (800f354 <_Balloc+0x7c>)
 800f2f4:	f7fe fedc 	bl	800e0b0 <__assert_func>
 800f2f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2fc:	6006      	str	r6, [r0, #0]
 800f2fe:	60c6      	str	r6, [r0, #12]
 800f300:	69e6      	ldr	r6, [r4, #28]
 800f302:	68f3      	ldr	r3, [r6, #12]
 800f304:	b183      	cbz	r3, 800f328 <_Balloc+0x50>
 800f306:	69e3      	ldr	r3, [r4, #28]
 800f308:	68db      	ldr	r3, [r3, #12]
 800f30a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f30e:	b9b8      	cbnz	r0, 800f340 <_Balloc+0x68>
 800f310:	2101      	movs	r1, #1
 800f312:	4620      	mov	r0, r4
 800f314:	fa01 f605 	lsl.w	r6, r1, r5
 800f318:	1d72      	adds	r2, r6, #5
 800f31a:	0092      	lsls	r2, r2, #2
 800f31c:	f000 fd63 	bl	800fde6 <_calloc_r>
 800f320:	b160      	cbz	r0, 800f33c <_Balloc+0x64>
 800f322:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f326:	e00e      	b.n	800f346 <_Balloc+0x6e>
 800f328:	2221      	movs	r2, #33	@ 0x21
 800f32a:	2104      	movs	r1, #4
 800f32c:	4620      	mov	r0, r4
 800f32e:	f000 fd5a 	bl	800fde6 <_calloc_r>
 800f332:	69e3      	ldr	r3, [r4, #28]
 800f334:	60f0      	str	r0, [r6, #12]
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d1e4      	bne.n	800f306 <_Balloc+0x2e>
 800f33c:	2000      	movs	r0, #0
 800f33e:	bd70      	pop	{r4, r5, r6, pc}
 800f340:	6802      	ldr	r2, [r0, #0]
 800f342:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f346:	2300      	movs	r3, #0
 800f348:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f34c:	e7f7      	b.n	800f33e <_Balloc+0x66>
 800f34e:	bf00      	nop
 800f350:	08011ad4 	.word	0x08011ad4
 800f354:	08011c06 	.word	0x08011c06

0800f358 <_Bfree>:
 800f358:	b570      	push	{r4, r5, r6, lr}
 800f35a:	69c6      	ldr	r6, [r0, #28]
 800f35c:	4605      	mov	r5, r0
 800f35e:	460c      	mov	r4, r1
 800f360:	b976      	cbnz	r6, 800f380 <_Bfree+0x28>
 800f362:	2010      	movs	r0, #16
 800f364:	f7ff fe56 	bl	800f014 <malloc>
 800f368:	4602      	mov	r2, r0
 800f36a:	61e8      	str	r0, [r5, #28]
 800f36c:	b920      	cbnz	r0, 800f378 <_Bfree+0x20>
 800f36e:	4b09      	ldr	r3, [pc, #36]	@ (800f394 <_Bfree+0x3c>)
 800f370:	218f      	movs	r1, #143	@ 0x8f
 800f372:	4809      	ldr	r0, [pc, #36]	@ (800f398 <_Bfree+0x40>)
 800f374:	f7fe fe9c 	bl	800e0b0 <__assert_func>
 800f378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f37c:	6006      	str	r6, [r0, #0]
 800f37e:	60c6      	str	r6, [r0, #12]
 800f380:	b13c      	cbz	r4, 800f392 <_Bfree+0x3a>
 800f382:	69eb      	ldr	r3, [r5, #28]
 800f384:	6862      	ldr	r2, [r4, #4]
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f38c:	6021      	str	r1, [r4, #0]
 800f38e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f392:	bd70      	pop	{r4, r5, r6, pc}
 800f394:	08011ad4 	.word	0x08011ad4
 800f398:	08011c06 	.word	0x08011c06

0800f39c <__multadd>:
 800f39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a0:	f101 0c14 	add.w	ip, r1, #20
 800f3a4:	4607      	mov	r7, r0
 800f3a6:	460c      	mov	r4, r1
 800f3a8:	461e      	mov	r6, r3
 800f3aa:	690d      	ldr	r5, [r1, #16]
 800f3ac:	2000      	movs	r0, #0
 800f3ae:	f8dc 3000 	ldr.w	r3, [ip]
 800f3b2:	3001      	adds	r0, #1
 800f3b4:	b299      	uxth	r1, r3
 800f3b6:	4285      	cmp	r5, r0
 800f3b8:	fb02 6101 	mla	r1, r2, r1, r6
 800f3bc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f3c0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800f3c4:	b289      	uxth	r1, r1
 800f3c6:	fb02 3306 	mla	r3, r2, r6, r3
 800f3ca:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f3ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f3d2:	f84c 1b04 	str.w	r1, [ip], #4
 800f3d6:	dcea      	bgt.n	800f3ae <__multadd+0x12>
 800f3d8:	b30e      	cbz	r6, 800f41e <__multadd+0x82>
 800f3da:	68a3      	ldr	r3, [r4, #8]
 800f3dc:	42ab      	cmp	r3, r5
 800f3de:	dc19      	bgt.n	800f414 <__multadd+0x78>
 800f3e0:	6861      	ldr	r1, [r4, #4]
 800f3e2:	4638      	mov	r0, r7
 800f3e4:	3101      	adds	r1, #1
 800f3e6:	f7ff ff77 	bl	800f2d8 <_Balloc>
 800f3ea:	4680      	mov	r8, r0
 800f3ec:	b928      	cbnz	r0, 800f3fa <__multadd+0x5e>
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	4b0c      	ldr	r3, [pc, #48]	@ (800f424 <__multadd+0x88>)
 800f3f2:	21ba      	movs	r1, #186	@ 0xba
 800f3f4:	480c      	ldr	r0, [pc, #48]	@ (800f428 <__multadd+0x8c>)
 800f3f6:	f7fe fe5b 	bl	800e0b0 <__assert_func>
 800f3fa:	6922      	ldr	r2, [r4, #16]
 800f3fc:	f104 010c 	add.w	r1, r4, #12
 800f400:	300c      	adds	r0, #12
 800f402:	3202      	adds	r2, #2
 800f404:	0092      	lsls	r2, r2, #2
 800f406:	f7fe fe46 	bl	800e096 <memcpy>
 800f40a:	4621      	mov	r1, r4
 800f40c:	4644      	mov	r4, r8
 800f40e:	4638      	mov	r0, r7
 800f410:	f7ff ffa2 	bl	800f358 <_Bfree>
 800f414:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f418:	3501      	adds	r5, #1
 800f41a:	615e      	str	r6, [r3, #20]
 800f41c:	6125      	str	r5, [r4, #16]
 800f41e:	4620      	mov	r0, r4
 800f420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f424:	08011be4 	.word	0x08011be4
 800f428:	08011c06 	.word	0x08011c06

0800f42c <__hi0bits>:
 800f42c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f430:	4603      	mov	r3, r0
 800f432:	bf36      	itet	cc
 800f434:	0403      	lslcc	r3, r0, #16
 800f436:	2000      	movcs	r0, #0
 800f438:	2010      	movcc	r0, #16
 800f43a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f43e:	bf3c      	itt	cc
 800f440:	021b      	lslcc	r3, r3, #8
 800f442:	3008      	addcc	r0, #8
 800f444:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f448:	bf3c      	itt	cc
 800f44a:	011b      	lslcc	r3, r3, #4
 800f44c:	3004      	addcc	r0, #4
 800f44e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f452:	bf3c      	itt	cc
 800f454:	009b      	lslcc	r3, r3, #2
 800f456:	3002      	addcc	r0, #2
 800f458:	2b00      	cmp	r3, #0
 800f45a:	db05      	blt.n	800f468 <__hi0bits+0x3c>
 800f45c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f460:	f100 0001 	add.w	r0, r0, #1
 800f464:	bf08      	it	eq
 800f466:	2020      	moveq	r0, #32
 800f468:	4770      	bx	lr

0800f46a <__lo0bits>:
 800f46a:	6803      	ldr	r3, [r0, #0]
 800f46c:	4602      	mov	r2, r0
 800f46e:	f013 0007 	ands.w	r0, r3, #7
 800f472:	d00b      	beq.n	800f48c <__lo0bits+0x22>
 800f474:	07d9      	lsls	r1, r3, #31
 800f476:	d421      	bmi.n	800f4bc <__lo0bits+0x52>
 800f478:	0798      	lsls	r0, r3, #30
 800f47a:	bf47      	ittee	mi
 800f47c:	085b      	lsrmi	r3, r3, #1
 800f47e:	2001      	movmi	r0, #1
 800f480:	089b      	lsrpl	r3, r3, #2
 800f482:	2002      	movpl	r0, #2
 800f484:	bf4c      	ite	mi
 800f486:	6013      	strmi	r3, [r2, #0]
 800f488:	6013      	strpl	r3, [r2, #0]
 800f48a:	4770      	bx	lr
 800f48c:	b299      	uxth	r1, r3
 800f48e:	b909      	cbnz	r1, 800f494 <__lo0bits+0x2a>
 800f490:	0c1b      	lsrs	r3, r3, #16
 800f492:	2010      	movs	r0, #16
 800f494:	b2d9      	uxtb	r1, r3
 800f496:	b909      	cbnz	r1, 800f49c <__lo0bits+0x32>
 800f498:	3008      	adds	r0, #8
 800f49a:	0a1b      	lsrs	r3, r3, #8
 800f49c:	0719      	lsls	r1, r3, #28
 800f49e:	bf04      	itt	eq
 800f4a0:	091b      	lsreq	r3, r3, #4
 800f4a2:	3004      	addeq	r0, #4
 800f4a4:	0799      	lsls	r1, r3, #30
 800f4a6:	bf04      	itt	eq
 800f4a8:	089b      	lsreq	r3, r3, #2
 800f4aa:	3002      	addeq	r0, #2
 800f4ac:	07d9      	lsls	r1, r3, #31
 800f4ae:	d403      	bmi.n	800f4b8 <__lo0bits+0x4e>
 800f4b0:	085b      	lsrs	r3, r3, #1
 800f4b2:	f100 0001 	add.w	r0, r0, #1
 800f4b6:	d003      	beq.n	800f4c0 <__lo0bits+0x56>
 800f4b8:	6013      	str	r3, [r2, #0]
 800f4ba:	4770      	bx	lr
 800f4bc:	2000      	movs	r0, #0
 800f4be:	4770      	bx	lr
 800f4c0:	2020      	movs	r0, #32
 800f4c2:	4770      	bx	lr

0800f4c4 <__i2b>:
 800f4c4:	b510      	push	{r4, lr}
 800f4c6:	460c      	mov	r4, r1
 800f4c8:	2101      	movs	r1, #1
 800f4ca:	f7ff ff05 	bl	800f2d8 <_Balloc>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	b928      	cbnz	r0, 800f4de <__i2b+0x1a>
 800f4d2:	4b05      	ldr	r3, [pc, #20]	@ (800f4e8 <__i2b+0x24>)
 800f4d4:	f240 1145 	movw	r1, #325	@ 0x145
 800f4d8:	4804      	ldr	r0, [pc, #16]	@ (800f4ec <__i2b+0x28>)
 800f4da:	f7fe fde9 	bl	800e0b0 <__assert_func>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	6144      	str	r4, [r0, #20]
 800f4e2:	6103      	str	r3, [r0, #16]
 800f4e4:	bd10      	pop	{r4, pc}
 800f4e6:	bf00      	nop
 800f4e8:	08011be4 	.word	0x08011be4
 800f4ec:	08011c06 	.word	0x08011c06

0800f4f0 <__multiply>:
 800f4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f4:	4614      	mov	r4, r2
 800f4f6:	690a      	ldr	r2, [r1, #16]
 800f4f8:	460f      	mov	r7, r1
 800f4fa:	b085      	sub	sp, #20
 800f4fc:	6923      	ldr	r3, [r4, #16]
 800f4fe:	429a      	cmp	r2, r3
 800f500:	bfa2      	ittt	ge
 800f502:	4623      	movge	r3, r4
 800f504:	460c      	movge	r4, r1
 800f506:	461f      	movge	r7, r3
 800f508:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f50c:	68a3      	ldr	r3, [r4, #8]
 800f50e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f512:	6861      	ldr	r1, [r4, #4]
 800f514:	eb0a 0609 	add.w	r6, sl, r9
 800f518:	42b3      	cmp	r3, r6
 800f51a:	bfb8      	it	lt
 800f51c:	3101      	addlt	r1, #1
 800f51e:	f7ff fedb 	bl	800f2d8 <_Balloc>
 800f522:	b930      	cbnz	r0, 800f532 <__multiply+0x42>
 800f524:	4602      	mov	r2, r0
 800f526:	4b45      	ldr	r3, [pc, #276]	@ (800f63c <__multiply+0x14c>)
 800f528:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f52c:	4844      	ldr	r0, [pc, #272]	@ (800f640 <__multiply+0x150>)
 800f52e:	f7fe fdbf 	bl	800e0b0 <__assert_func>
 800f532:	f100 0514 	add.w	r5, r0, #20
 800f536:	2200      	movs	r2, #0
 800f538:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f53c:	462b      	mov	r3, r5
 800f53e:	4543      	cmp	r3, r8
 800f540:	d321      	bcc.n	800f586 <__multiply+0x96>
 800f542:	f107 0114 	add.w	r1, r7, #20
 800f546:	f104 0214 	add.w	r2, r4, #20
 800f54a:	f104 0715 	add.w	r7, r4, #21
 800f54e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f552:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f556:	9302      	str	r3, [sp, #8]
 800f558:	1b13      	subs	r3, r2, r4
 800f55a:	3b15      	subs	r3, #21
 800f55c:	f023 0303 	bic.w	r3, r3, #3
 800f560:	3304      	adds	r3, #4
 800f562:	42ba      	cmp	r2, r7
 800f564:	bf38      	it	cc
 800f566:	2304      	movcc	r3, #4
 800f568:	9301      	str	r3, [sp, #4]
 800f56a:	9b02      	ldr	r3, [sp, #8]
 800f56c:	9103      	str	r1, [sp, #12]
 800f56e:	428b      	cmp	r3, r1
 800f570:	d80c      	bhi.n	800f58c <__multiply+0x9c>
 800f572:	2e00      	cmp	r6, #0
 800f574:	dd03      	ble.n	800f57e <__multiply+0x8e>
 800f576:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d05b      	beq.n	800f636 <__multiply+0x146>
 800f57e:	6106      	str	r6, [r0, #16]
 800f580:	b005      	add	sp, #20
 800f582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f586:	f843 2b04 	str.w	r2, [r3], #4
 800f58a:	e7d8      	b.n	800f53e <__multiply+0x4e>
 800f58c:	f8b1 a000 	ldrh.w	sl, [r1]
 800f590:	f1ba 0f00 	cmp.w	sl, #0
 800f594:	d024      	beq.n	800f5e0 <__multiply+0xf0>
 800f596:	f104 0e14 	add.w	lr, r4, #20
 800f59a:	46a9      	mov	r9, r5
 800f59c:	f04f 0c00 	mov.w	ip, #0
 800f5a0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f5a4:	f8d9 3000 	ldr.w	r3, [r9]
 800f5a8:	fa1f fb87 	uxth.w	fp, r7
 800f5ac:	4572      	cmp	r2, lr
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	fb0a 330b 	mla	r3, sl, fp, r3
 800f5b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f5b8:	f8d9 7000 	ldr.w	r7, [r9]
 800f5bc:	4463      	add	r3, ip
 800f5be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f5c2:	fb0a c70b 	mla	r7, sl, fp, ip
 800f5c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f5d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f5d4:	f849 3b04 	str.w	r3, [r9], #4
 800f5d8:	d8e2      	bhi.n	800f5a0 <__multiply+0xb0>
 800f5da:	9b01      	ldr	r3, [sp, #4]
 800f5dc:	f845 c003 	str.w	ip, [r5, r3]
 800f5e0:	9b03      	ldr	r3, [sp, #12]
 800f5e2:	3104      	adds	r1, #4
 800f5e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f5e8:	f1b9 0f00 	cmp.w	r9, #0
 800f5ec:	d021      	beq.n	800f632 <__multiply+0x142>
 800f5ee:	682b      	ldr	r3, [r5, #0]
 800f5f0:	f104 0c14 	add.w	ip, r4, #20
 800f5f4:	46ae      	mov	lr, r5
 800f5f6:	f04f 0a00 	mov.w	sl, #0
 800f5fa:	f8bc b000 	ldrh.w	fp, [ip]
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f604:	fb09 770b 	mla	r7, r9, fp, r7
 800f608:	4457      	add	r7, sl
 800f60a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f60e:	f84e 3b04 	str.w	r3, [lr], #4
 800f612:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f616:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f61a:	f8be 3000 	ldrh.w	r3, [lr]
 800f61e:	4562      	cmp	r2, ip
 800f620:	fb09 330a 	mla	r3, r9, sl, r3
 800f624:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f628:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f62c:	d8e5      	bhi.n	800f5fa <__multiply+0x10a>
 800f62e:	9f01      	ldr	r7, [sp, #4]
 800f630:	51eb      	str	r3, [r5, r7]
 800f632:	3504      	adds	r5, #4
 800f634:	e799      	b.n	800f56a <__multiply+0x7a>
 800f636:	3e01      	subs	r6, #1
 800f638:	e79b      	b.n	800f572 <__multiply+0x82>
 800f63a:	bf00      	nop
 800f63c:	08011be4 	.word	0x08011be4
 800f640:	08011c06 	.word	0x08011c06

0800f644 <__pow5mult>:
 800f644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f648:	4615      	mov	r5, r2
 800f64a:	f012 0203 	ands.w	r2, r2, #3
 800f64e:	4607      	mov	r7, r0
 800f650:	460e      	mov	r6, r1
 800f652:	d007      	beq.n	800f664 <__pow5mult+0x20>
 800f654:	3a01      	subs	r2, #1
 800f656:	4c25      	ldr	r4, [pc, #148]	@ (800f6ec <__pow5mult+0xa8>)
 800f658:	2300      	movs	r3, #0
 800f65a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f65e:	f7ff fe9d 	bl	800f39c <__multadd>
 800f662:	4606      	mov	r6, r0
 800f664:	10ad      	asrs	r5, r5, #2
 800f666:	d03d      	beq.n	800f6e4 <__pow5mult+0xa0>
 800f668:	69fc      	ldr	r4, [r7, #28]
 800f66a:	b97c      	cbnz	r4, 800f68c <__pow5mult+0x48>
 800f66c:	2010      	movs	r0, #16
 800f66e:	f7ff fcd1 	bl	800f014 <malloc>
 800f672:	4602      	mov	r2, r0
 800f674:	61f8      	str	r0, [r7, #28]
 800f676:	b928      	cbnz	r0, 800f684 <__pow5mult+0x40>
 800f678:	4b1d      	ldr	r3, [pc, #116]	@ (800f6f0 <__pow5mult+0xac>)
 800f67a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f67e:	481d      	ldr	r0, [pc, #116]	@ (800f6f4 <__pow5mult+0xb0>)
 800f680:	f7fe fd16 	bl	800e0b0 <__assert_func>
 800f684:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f688:	6004      	str	r4, [r0, #0]
 800f68a:	60c4      	str	r4, [r0, #12]
 800f68c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f690:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f694:	b94c      	cbnz	r4, 800f6aa <__pow5mult+0x66>
 800f696:	f240 2171 	movw	r1, #625	@ 0x271
 800f69a:	4638      	mov	r0, r7
 800f69c:	f7ff ff12 	bl	800f4c4 <__i2b>
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	4604      	mov	r4, r0
 800f6a4:	f8c8 0008 	str.w	r0, [r8, #8]
 800f6a8:	6003      	str	r3, [r0, #0]
 800f6aa:	f04f 0900 	mov.w	r9, #0
 800f6ae:	07eb      	lsls	r3, r5, #31
 800f6b0:	d50a      	bpl.n	800f6c8 <__pow5mult+0x84>
 800f6b2:	4631      	mov	r1, r6
 800f6b4:	4622      	mov	r2, r4
 800f6b6:	4638      	mov	r0, r7
 800f6b8:	f7ff ff1a 	bl	800f4f0 <__multiply>
 800f6bc:	4680      	mov	r8, r0
 800f6be:	4631      	mov	r1, r6
 800f6c0:	4638      	mov	r0, r7
 800f6c2:	4646      	mov	r6, r8
 800f6c4:	f7ff fe48 	bl	800f358 <_Bfree>
 800f6c8:	106d      	asrs	r5, r5, #1
 800f6ca:	d00b      	beq.n	800f6e4 <__pow5mult+0xa0>
 800f6cc:	6820      	ldr	r0, [r4, #0]
 800f6ce:	b938      	cbnz	r0, 800f6e0 <__pow5mult+0x9c>
 800f6d0:	4622      	mov	r2, r4
 800f6d2:	4621      	mov	r1, r4
 800f6d4:	4638      	mov	r0, r7
 800f6d6:	f7ff ff0b 	bl	800f4f0 <__multiply>
 800f6da:	6020      	str	r0, [r4, #0]
 800f6dc:	f8c0 9000 	str.w	r9, [r0]
 800f6e0:	4604      	mov	r4, r0
 800f6e2:	e7e4      	b.n	800f6ae <__pow5mult+0x6a>
 800f6e4:	4630      	mov	r0, r6
 800f6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6ea:	bf00      	nop
 800f6ec:	08011c60 	.word	0x08011c60
 800f6f0:	08011ad4 	.word	0x08011ad4
 800f6f4:	08011c06 	.word	0x08011c06

0800f6f8 <__lshift>:
 800f6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6fc:	460c      	mov	r4, r1
 800f6fe:	4607      	mov	r7, r0
 800f700:	4691      	mov	r9, r2
 800f702:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f706:	6923      	ldr	r3, [r4, #16]
 800f708:	6849      	ldr	r1, [r1, #4]
 800f70a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f70e:	68a3      	ldr	r3, [r4, #8]
 800f710:	f108 0601 	add.w	r6, r8, #1
 800f714:	42b3      	cmp	r3, r6
 800f716:	db0b      	blt.n	800f730 <__lshift+0x38>
 800f718:	4638      	mov	r0, r7
 800f71a:	f7ff fddd 	bl	800f2d8 <_Balloc>
 800f71e:	4605      	mov	r5, r0
 800f720:	b948      	cbnz	r0, 800f736 <__lshift+0x3e>
 800f722:	4602      	mov	r2, r0
 800f724:	4b28      	ldr	r3, [pc, #160]	@ (800f7c8 <__lshift+0xd0>)
 800f726:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f72a:	4828      	ldr	r0, [pc, #160]	@ (800f7cc <__lshift+0xd4>)
 800f72c:	f7fe fcc0 	bl	800e0b0 <__assert_func>
 800f730:	3101      	adds	r1, #1
 800f732:	005b      	lsls	r3, r3, #1
 800f734:	e7ee      	b.n	800f714 <__lshift+0x1c>
 800f736:	2300      	movs	r3, #0
 800f738:	f100 0114 	add.w	r1, r0, #20
 800f73c:	f100 0210 	add.w	r2, r0, #16
 800f740:	4618      	mov	r0, r3
 800f742:	4553      	cmp	r3, sl
 800f744:	db33      	blt.n	800f7ae <__lshift+0xb6>
 800f746:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f74a:	f104 0314 	add.w	r3, r4, #20
 800f74e:	6920      	ldr	r0, [r4, #16]
 800f750:	f019 091f 	ands.w	r9, r9, #31
 800f754:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f758:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f75c:	d02b      	beq.n	800f7b6 <__lshift+0xbe>
 800f75e:	f1c9 0e20 	rsb	lr, r9, #32
 800f762:	468a      	mov	sl, r1
 800f764:	2200      	movs	r2, #0
 800f766:	6818      	ldr	r0, [r3, #0]
 800f768:	fa00 f009 	lsl.w	r0, r0, r9
 800f76c:	4310      	orrs	r0, r2
 800f76e:	f84a 0b04 	str.w	r0, [sl], #4
 800f772:	f853 2b04 	ldr.w	r2, [r3], #4
 800f776:	459c      	cmp	ip, r3
 800f778:	fa22 f20e 	lsr.w	r2, r2, lr
 800f77c:	d8f3      	bhi.n	800f766 <__lshift+0x6e>
 800f77e:	ebac 0304 	sub.w	r3, ip, r4
 800f782:	f104 0015 	add.w	r0, r4, #21
 800f786:	3b15      	subs	r3, #21
 800f788:	f023 0303 	bic.w	r3, r3, #3
 800f78c:	3304      	adds	r3, #4
 800f78e:	4584      	cmp	ip, r0
 800f790:	bf38      	it	cc
 800f792:	2304      	movcc	r3, #4
 800f794:	50ca      	str	r2, [r1, r3]
 800f796:	b10a      	cbz	r2, 800f79c <__lshift+0xa4>
 800f798:	f108 0602 	add.w	r6, r8, #2
 800f79c:	3e01      	subs	r6, #1
 800f79e:	4638      	mov	r0, r7
 800f7a0:	4621      	mov	r1, r4
 800f7a2:	612e      	str	r6, [r5, #16]
 800f7a4:	f7ff fdd8 	bl	800f358 <_Bfree>
 800f7a8:	4628      	mov	r0, r5
 800f7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	f842 0f04 	str.w	r0, [r2, #4]!
 800f7b4:	e7c5      	b.n	800f742 <__lshift+0x4a>
 800f7b6:	3904      	subs	r1, #4
 800f7b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7bc:	459c      	cmp	ip, r3
 800f7be:	f841 2f04 	str.w	r2, [r1, #4]!
 800f7c2:	d8f9      	bhi.n	800f7b8 <__lshift+0xc0>
 800f7c4:	e7ea      	b.n	800f79c <__lshift+0xa4>
 800f7c6:	bf00      	nop
 800f7c8:	08011be4 	.word	0x08011be4
 800f7cc:	08011c06 	.word	0x08011c06

0800f7d0 <__mcmp>:
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	690a      	ldr	r2, [r1, #16]
 800f7d4:	6900      	ldr	r0, [r0, #16]
 800f7d6:	1a80      	subs	r0, r0, r2
 800f7d8:	b530      	push	{r4, r5, lr}
 800f7da:	d10e      	bne.n	800f7fa <__mcmp+0x2a>
 800f7dc:	3314      	adds	r3, #20
 800f7de:	3114      	adds	r1, #20
 800f7e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f7e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f7e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f7ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f7f0:	4295      	cmp	r5, r2
 800f7f2:	d003      	beq.n	800f7fc <__mcmp+0x2c>
 800f7f4:	d205      	bcs.n	800f802 <__mcmp+0x32>
 800f7f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f7fa:	bd30      	pop	{r4, r5, pc}
 800f7fc:	42a3      	cmp	r3, r4
 800f7fe:	d3f3      	bcc.n	800f7e8 <__mcmp+0x18>
 800f800:	e7fb      	b.n	800f7fa <__mcmp+0x2a>
 800f802:	2001      	movs	r0, #1
 800f804:	e7f9      	b.n	800f7fa <__mcmp+0x2a>
	...

0800f808 <__mdiff>:
 800f808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f80c:	4689      	mov	r9, r1
 800f80e:	4606      	mov	r6, r0
 800f810:	4611      	mov	r1, r2
 800f812:	4614      	mov	r4, r2
 800f814:	4648      	mov	r0, r9
 800f816:	f7ff ffdb 	bl	800f7d0 <__mcmp>
 800f81a:	1e05      	subs	r5, r0, #0
 800f81c:	d112      	bne.n	800f844 <__mdiff+0x3c>
 800f81e:	4629      	mov	r1, r5
 800f820:	4630      	mov	r0, r6
 800f822:	f7ff fd59 	bl	800f2d8 <_Balloc>
 800f826:	4602      	mov	r2, r0
 800f828:	b928      	cbnz	r0, 800f836 <__mdiff+0x2e>
 800f82a:	4b41      	ldr	r3, [pc, #260]	@ (800f930 <__mdiff+0x128>)
 800f82c:	f240 2137 	movw	r1, #567	@ 0x237
 800f830:	4840      	ldr	r0, [pc, #256]	@ (800f934 <__mdiff+0x12c>)
 800f832:	f7fe fc3d 	bl	800e0b0 <__assert_func>
 800f836:	2301      	movs	r3, #1
 800f838:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f83c:	4610      	mov	r0, r2
 800f83e:	b003      	add	sp, #12
 800f840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f844:	bfbc      	itt	lt
 800f846:	464b      	movlt	r3, r9
 800f848:	46a1      	movlt	r9, r4
 800f84a:	4630      	mov	r0, r6
 800f84c:	bfb8      	it	lt
 800f84e:	2501      	movlt	r5, #1
 800f850:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f854:	bfb4      	ite	lt
 800f856:	461c      	movlt	r4, r3
 800f858:	2500      	movge	r5, #0
 800f85a:	f7ff fd3d 	bl	800f2d8 <_Balloc>
 800f85e:	4602      	mov	r2, r0
 800f860:	b918      	cbnz	r0, 800f86a <__mdiff+0x62>
 800f862:	4b33      	ldr	r3, [pc, #204]	@ (800f930 <__mdiff+0x128>)
 800f864:	f240 2145 	movw	r1, #581	@ 0x245
 800f868:	e7e2      	b.n	800f830 <__mdiff+0x28>
 800f86a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f86e:	f104 0e14 	add.w	lr, r4, #20
 800f872:	6926      	ldr	r6, [r4, #16]
 800f874:	f100 0b14 	add.w	fp, r0, #20
 800f878:	60c5      	str	r5, [r0, #12]
 800f87a:	f109 0514 	add.w	r5, r9, #20
 800f87e:	f109 0310 	add.w	r3, r9, #16
 800f882:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f886:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f88a:	46d9      	mov	r9, fp
 800f88c:	f04f 0c00 	mov.w	ip, #0
 800f890:	9301      	str	r3, [sp, #4]
 800f892:	9b01      	ldr	r3, [sp, #4]
 800f894:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f898:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f89c:	4576      	cmp	r6, lr
 800f89e:	9301      	str	r3, [sp, #4]
 800f8a0:	fa1f f38a 	uxth.w	r3, sl
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	b283      	uxth	r3, r0
 800f8a8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800f8ac:	eba1 0303 	sub.w	r3, r1, r3
 800f8b0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f8b4:	4463      	add	r3, ip
 800f8b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f8ba:	b29b      	uxth	r3, r3
 800f8bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f8c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f8c4:	f849 3b04 	str.w	r3, [r9], #4
 800f8c8:	d8e3      	bhi.n	800f892 <__mdiff+0x8a>
 800f8ca:	1b33      	subs	r3, r6, r4
 800f8cc:	3415      	adds	r4, #21
 800f8ce:	3b15      	subs	r3, #21
 800f8d0:	f023 0303 	bic.w	r3, r3, #3
 800f8d4:	3304      	adds	r3, #4
 800f8d6:	42a6      	cmp	r6, r4
 800f8d8:	bf38      	it	cc
 800f8da:	2304      	movcc	r3, #4
 800f8dc:	441d      	add	r5, r3
 800f8de:	445b      	add	r3, fp
 800f8e0:	462c      	mov	r4, r5
 800f8e2:	461e      	mov	r6, r3
 800f8e4:	4544      	cmp	r4, r8
 800f8e6:	d30e      	bcc.n	800f906 <__mdiff+0xfe>
 800f8e8:	f108 0103 	add.w	r1, r8, #3
 800f8ec:	1b49      	subs	r1, r1, r5
 800f8ee:	3d03      	subs	r5, #3
 800f8f0:	f021 0103 	bic.w	r1, r1, #3
 800f8f4:	45a8      	cmp	r8, r5
 800f8f6:	bf38      	it	cc
 800f8f8:	2100      	movcc	r1, #0
 800f8fa:	440b      	add	r3, r1
 800f8fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f900:	b199      	cbz	r1, 800f92a <__mdiff+0x122>
 800f902:	6117      	str	r7, [r2, #16]
 800f904:	e79a      	b.n	800f83c <__mdiff+0x34>
 800f906:	f854 1b04 	ldr.w	r1, [r4], #4
 800f90a:	46e6      	mov	lr, ip
 800f90c:	fa1f fc81 	uxth.w	ip, r1
 800f910:	0c08      	lsrs	r0, r1, #16
 800f912:	4471      	add	r1, lr
 800f914:	44f4      	add	ip, lr
 800f916:	b289      	uxth	r1, r1
 800f918:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f91c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f920:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f924:	f846 1b04 	str.w	r1, [r6], #4
 800f928:	e7dc      	b.n	800f8e4 <__mdiff+0xdc>
 800f92a:	3f01      	subs	r7, #1
 800f92c:	e7e6      	b.n	800f8fc <__mdiff+0xf4>
 800f92e:	bf00      	nop
 800f930:	08011be4 	.word	0x08011be4
 800f934:	08011c06 	.word	0x08011c06

0800f938 <__d2b>:
 800f938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f93c:	460f      	mov	r7, r1
 800f93e:	2101      	movs	r1, #1
 800f940:	4616      	mov	r6, r2
 800f942:	ec59 8b10 	vmov	r8, r9, d0
 800f946:	f7ff fcc7 	bl	800f2d8 <_Balloc>
 800f94a:	4604      	mov	r4, r0
 800f94c:	b930      	cbnz	r0, 800f95c <__d2b+0x24>
 800f94e:	4602      	mov	r2, r0
 800f950:	4b23      	ldr	r3, [pc, #140]	@ (800f9e0 <__d2b+0xa8>)
 800f952:	f240 310f 	movw	r1, #783	@ 0x30f
 800f956:	4823      	ldr	r0, [pc, #140]	@ (800f9e4 <__d2b+0xac>)
 800f958:	f7fe fbaa 	bl	800e0b0 <__assert_func>
 800f95c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f960:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f964:	b10d      	cbz	r5, 800f96a <__d2b+0x32>
 800f966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f96a:	9301      	str	r3, [sp, #4]
 800f96c:	f1b8 0300 	subs.w	r3, r8, #0
 800f970:	d023      	beq.n	800f9ba <__d2b+0x82>
 800f972:	4668      	mov	r0, sp
 800f974:	9300      	str	r3, [sp, #0]
 800f976:	f7ff fd78 	bl	800f46a <__lo0bits>
 800f97a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f97e:	b1d0      	cbz	r0, 800f9b6 <__d2b+0x7e>
 800f980:	f1c0 0320 	rsb	r3, r0, #32
 800f984:	fa02 f303 	lsl.w	r3, r2, r3
 800f988:	40c2      	lsrs	r2, r0
 800f98a:	430b      	orrs	r3, r1
 800f98c:	9201      	str	r2, [sp, #4]
 800f98e:	6163      	str	r3, [r4, #20]
 800f990:	9b01      	ldr	r3, [sp, #4]
 800f992:	2b00      	cmp	r3, #0
 800f994:	61a3      	str	r3, [r4, #24]
 800f996:	bf0c      	ite	eq
 800f998:	2201      	moveq	r2, #1
 800f99a:	2202      	movne	r2, #2
 800f99c:	6122      	str	r2, [r4, #16]
 800f99e:	b1a5      	cbz	r5, 800f9ca <__d2b+0x92>
 800f9a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f9a4:	4405      	add	r5, r0
 800f9a6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f9aa:	603d      	str	r5, [r7, #0]
 800f9ac:	6030      	str	r0, [r6, #0]
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	b003      	add	sp, #12
 800f9b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9b6:	6161      	str	r1, [r4, #20]
 800f9b8:	e7ea      	b.n	800f990 <__d2b+0x58>
 800f9ba:	a801      	add	r0, sp, #4
 800f9bc:	f7ff fd55 	bl	800f46a <__lo0bits>
 800f9c0:	9b01      	ldr	r3, [sp, #4]
 800f9c2:	3020      	adds	r0, #32
 800f9c4:	2201      	movs	r2, #1
 800f9c6:	6163      	str	r3, [r4, #20]
 800f9c8:	e7e8      	b.n	800f99c <__d2b+0x64>
 800f9ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f9ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f9d2:	6038      	str	r0, [r7, #0]
 800f9d4:	6918      	ldr	r0, [r3, #16]
 800f9d6:	f7ff fd29 	bl	800f42c <__hi0bits>
 800f9da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f9de:	e7e5      	b.n	800f9ac <__d2b+0x74>
 800f9e0:	08011be4 	.word	0x08011be4
 800f9e4:	08011c06 	.word	0x08011c06

0800f9e8 <__sread>:
 800f9e8:	b510      	push	{r4, lr}
 800f9ea:	460c      	mov	r4, r1
 800f9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9f0:	f000 f9be 	bl	800fd70 <_read_r>
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	bfab      	itete	ge
 800f9f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f9fa:	89a3      	ldrhlt	r3, [r4, #12]
 800f9fc:	181b      	addge	r3, r3, r0
 800f9fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fa02:	bfac      	ite	ge
 800fa04:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fa06:	81a3      	strhlt	r3, [r4, #12]
 800fa08:	bd10      	pop	{r4, pc}

0800fa0a <__swrite>:
 800fa0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa0e:	461f      	mov	r7, r3
 800fa10:	898b      	ldrh	r3, [r1, #12]
 800fa12:	4605      	mov	r5, r0
 800fa14:	460c      	mov	r4, r1
 800fa16:	05db      	lsls	r3, r3, #23
 800fa18:	4616      	mov	r6, r2
 800fa1a:	d505      	bpl.n	800fa28 <__swrite+0x1e>
 800fa1c:	2302      	movs	r3, #2
 800fa1e:	2200      	movs	r2, #0
 800fa20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa24:	f000 f992 	bl	800fd4c <_lseek_r>
 800fa28:	89a3      	ldrh	r3, [r4, #12]
 800fa2a:	4632      	mov	r2, r6
 800fa2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa30:	4628      	mov	r0, r5
 800fa32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa36:	81a3      	strh	r3, [r4, #12]
 800fa38:	463b      	mov	r3, r7
 800fa3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa3e:	f000 b9b9 	b.w	800fdb4 <_write_r>

0800fa42 <__sseek>:
 800fa42:	b510      	push	{r4, lr}
 800fa44:	460c      	mov	r4, r1
 800fa46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa4a:	f000 f97f 	bl	800fd4c <_lseek_r>
 800fa4e:	1c43      	adds	r3, r0, #1
 800fa50:	89a3      	ldrh	r3, [r4, #12]
 800fa52:	bf15      	itete	ne
 800fa54:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fa56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fa5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fa5e:	81a3      	strheq	r3, [r4, #12]
 800fa60:	bf18      	it	ne
 800fa62:	81a3      	strhne	r3, [r4, #12]
 800fa64:	bd10      	pop	{r4, pc}

0800fa66 <__sclose>:
 800fa66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa6a:	f000 b93d 	b.w	800fce8 <_close_r>
	...

0800fa70 <fiprintf>:
 800fa70:	b40e      	push	{r1, r2, r3}
 800fa72:	b503      	push	{r0, r1, lr}
 800fa74:	ab03      	add	r3, sp, #12
 800fa76:	4601      	mov	r1, r0
 800fa78:	4805      	ldr	r0, [pc, #20]	@ (800fa90 <fiprintf+0x20>)
 800fa7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa7e:	6800      	ldr	r0, [r0, #0]
 800fa80:	9301      	str	r3, [sp, #4]
 800fa82:	f7ff f9af 	bl	800ede4 <_vfiprintf_r>
 800fa86:	b002      	add	sp, #8
 800fa88:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa8c:	b003      	add	sp, #12
 800fa8e:	4770      	bx	lr
 800fa90:	200000b8 	.word	0x200000b8

0800fa94 <__swbuf_r>:
 800fa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa96:	460e      	mov	r6, r1
 800fa98:	4614      	mov	r4, r2
 800fa9a:	4605      	mov	r5, r0
 800fa9c:	b118      	cbz	r0, 800faa6 <__swbuf_r+0x12>
 800fa9e:	6a03      	ldr	r3, [r0, #32]
 800faa0:	b90b      	cbnz	r3, 800faa6 <__swbuf_r+0x12>
 800faa2:	f7fe fa03 	bl	800deac <__sinit>
 800faa6:	69a3      	ldr	r3, [r4, #24]
 800faa8:	60a3      	str	r3, [r4, #8]
 800faaa:	89a3      	ldrh	r3, [r4, #12]
 800faac:	071a      	lsls	r2, r3, #28
 800faae:	d501      	bpl.n	800fab4 <__swbuf_r+0x20>
 800fab0:	6923      	ldr	r3, [r4, #16]
 800fab2:	b943      	cbnz	r3, 800fac6 <__swbuf_r+0x32>
 800fab4:	4621      	mov	r1, r4
 800fab6:	4628      	mov	r0, r5
 800fab8:	f000 f82a 	bl	800fb10 <__swsetup_r>
 800fabc:	b118      	cbz	r0, 800fac6 <__swbuf_r+0x32>
 800fabe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fac2:	4638      	mov	r0, r7
 800fac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fac6:	6823      	ldr	r3, [r4, #0]
 800fac8:	b2f6      	uxtb	r6, r6
 800faca:	6922      	ldr	r2, [r4, #16]
 800facc:	4637      	mov	r7, r6
 800face:	1a98      	subs	r0, r3, r2
 800fad0:	6963      	ldr	r3, [r4, #20]
 800fad2:	4283      	cmp	r3, r0
 800fad4:	dc05      	bgt.n	800fae2 <__swbuf_r+0x4e>
 800fad6:	4621      	mov	r1, r4
 800fad8:	4628      	mov	r0, r5
 800fada:	f7ff fbc9 	bl	800f270 <_fflush_r>
 800fade:	2800      	cmp	r0, #0
 800fae0:	d1ed      	bne.n	800fabe <__swbuf_r+0x2a>
 800fae2:	68a3      	ldr	r3, [r4, #8]
 800fae4:	3b01      	subs	r3, #1
 800fae6:	60a3      	str	r3, [r4, #8]
 800fae8:	6823      	ldr	r3, [r4, #0]
 800faea:	1c5a      	adds	r2, r3, #1
 800faec:	6022      	str	r2, [r4, #0]
 800faee:	701e      	strb	r6, [r3, #0]
 800faf0:	1c43      	adds	r3, r0, #1
 800faf2:	6962      	ldr	r2, [r4, #20]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d004      	beq.n	800fb02 <__swbuf_r+0x6e>
 800faf8:	89a3      	ldrh	r3, [r4, #12]
 800fafa:	07db      	lsls	r3, r3, #31
 800fafc:	d5e1      	bpl.n	800fac2 <__swbuf_r+0x2e>
 800fafe:	2e0a      	cmp	r6, #10
 800fb00:	d1df      	bne.n	800fac2 <__swbuf_r+0x2e>
 800fb02:	4621      	mov	r1, r4
 800fb04:	4628      	mov	r0, r5
 800fb06:	f7ff fbb3 	bl	800f270 <_fflush_r>
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	d0d9      	beq.n	800fac2 <__swbuf_r+0x2e>
 800fb0e:	e7d6      	b.n	800fabe <__swbuf_r+0x2a>

0800fb10 <__swsetup_r>:
 800fb10:	b538      	push	{r3, r4, r5, lr}
 800fb12:	4b29      	ldr	r3, [pc, #164]	@ (800fbb8 <__swsetup_r+0xa8>)
 800fb14:	4605      	mov	r5, r0
 800fb16:	460c      	mov	r4, r1
 800fb18:	6818      	ldr	r0, [r3, #0]
 800fb1a:	b118      	cbz	r0, 800fb24 <__swsetup_r+0x14>
 800fb1c:	6a03      	ldr	r3, [r0, #32]
 800fb1e:	b90b      	cbnz	r3, 800fb24 <__swsetup_r+0x14>
 800fb20:	f7fe f9c4 	bl	800deac <__sinit>
 800fb24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb28:	0719      	lsls	r1, r3, #28
 800fb2a:	d422      	bmi.n	800fb72 <__swsetup_r+0x62>
 800fb2c:	06da      	lsls	r2, r3, #27
 800fb2e:	d407      	bmi.n	800fb40 <__swsetup_r+0x30>
 800fb30:	2209      	movs	r2, #9
 800fb32:	602a      	str	r2, [r5, #0]
 800fb34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fb3c:	81a3      	strh	r3, [r4, #12]
 800fb3e:	e033      	b.n	800fba8 <__swsetup_r+0x98>
 800fb40:	0758      	lsls	r0, r3, #29
 800fb42:	d512      	bpl.n	800fb6a <__swsetup_r+0x5a>
 800fb44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb46:	b141      	cbz	r1, 800fb5a <__swsetup_r+0x4a>
 800fb48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb4c:	4299      	cmp	r1, r3
 800fb4e:	d002      	beq.n	800fb56 <__swsetup_r+0x46>
 800fb50:	4628      	mov	r0, r5
 800fb52:	f000 f95d 	bl	800fe10 <_free_r>
 800fb56:	2300      	movs	r3, #0
 800fb58:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb5a:	89a3      	ldrh	r3, [r4, #12]
 800fb5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fb60:	81a3      	strh	r3, [r4, #12]
 800fb62:	2300      	movs	r3, #0
 800fb64:	6063      	str	r3, [r4, #4]
 800fb66:	6923      	ldr	r3, [r4, #16]
 800fb68:	6023      	str	r3, [r4, #0]
 800fb6a:	89a3      	ldrh	r3, [r4, #12]
 800fb6c:	f043 0308 	orr.w	r3, r3, #8
 800fb70:	81a3      	strh	r3, [r4, #12]
 800fb72:	6923      	ldr	r3, [r4, #16]
 800fb74:	b94b      	cbnz	r3, 800fb8a <__swsetup_r+0x7a>
 800fb76:	89a3      	ldrh	r3, [r4, #12]
 800fb78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fb7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb80:	d003      	beq.n	800fb8a <__swsetup_r+0x7a>
 800fb82:	4621      	mov	r1, r4
 800fb84:	4628      	mov	r0, r5
 800fb86:	f000 f83e 	bl	800fc06 <__smakebuf_r>
 800fb8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb8e:	f013 0201 	ands.w	r2, r3, #1
 800fb92:	d00a      	beq.n	800fbaa <__swsetup_r+0x9a>
 800fb94:	2200      	movs	r2, #0
 800fb96:	60a2      	str	r2, [r4, #8]
 800fb98:	6962      	ldr	r2, [r4, #20]
 800fb9a:	4252      	negs	r2, r2
 800fb9c:	61a2      	str	r2, [r4, #24]
 800fb9e:	6922      	ldr	r2, [r4, #16]
 800fba0:	b942      	cbnz	r2, 800fbb4 <__swsetup_r+0xa4>
 800fba2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fba6:	d1c5      	bne.n	800fb34 <__swsetup_r+0x24>
 800fba8:	bd38      	pop	{r3, r4, r5, pc}
 800fbaa:	0799      	lsls	r1, r3, #30
 800fbac:	bf58      	it	pl
 800fbae:	6962      	ldrpl	r2, [r4, #20]
 800fbb0:	60a2      	str	r2, [r4, #8]
 800fbb2:	e7f4      	b.n	800fb9e <__swsetup_r+0x8e>
 800fbb4:	2000      	movs	r0, #0
 800fbb6:	e7f7      	b.n	800fba8 <__swsetup_r+0x98>
 800fbb8:	200000b8 	.word	0x200000b8

0800fbbc <__swhatbuf_r>:
 800fbbc:	b570      	push	{r4, r5, r6, lr}
 800fbbe:	460c      	mov	r4, r1
 800fbc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbc4:	b096      	sub	sp, #88	@ 0x58
 800fbc6:	4615      	mov	r5, r2
 800fbc8:	2900      	cmp	r1, #0
 800fbca:	461e      	mov	r6, r3
 800fbcc:	da0c      	bge.n	800fbe8 <__swhatbuf_r+0x2c>
 800fbce:	89a3      	ldrh	r3, [r4, #12]
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fbd6:	bf14      	ite	ne
 800fbd8:	2340      	movne	r3, #64	@ 0x40
 800fbda:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fbde:	2000      	movs	r0, #0
 800fbe0:	6031      	str	r1, [r6, #0]
 800fbe2:	602b      	str	r3, [r5, #0]
 800fbe4:	b016      	add	sp, #88	@ 0x58
 800fbe6:	bd70      	pop	{r4, r5, r6, pc}
 800fbe8:	466a      	mov	r2, sp
 800fbea:	f000 f88d 	bl	800fd08 <_fstat_r>
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	dbed      	blt.n	800fbce <__swhatbuf_r+0x12>
 800fbf2:	9901      	ldr	r1, [sp, #4]
 800fbf4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fbf8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fbfc:	4259      	negs	r1, r3
 800fbfe:	4159      	adcs	r1, r3
 800fc00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc04:	e7eb      	b.n	800fbde <__swhatbuf_r+0x22>

0800fc06 <__smakebuf_r>:
 800fc06:	898b      	ldrh	r3, [r1, #12]
 800fc08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc0a:	079d      	lsls	r5, r3, #30
 800fc0c:	4606      	mov	r6, r0
 800fc0e:	460c      	mov	r4, r1
 800fc10:	d507      	bpl.n	800fc22 <__smakebuf_r+0x1c>
 800fc12:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc16:	6023      	str	r3, [r4, #0]
 800fc18:	6123      	str	r3, [r4, #16]
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	6163      	str	r3, [r4, #20]
 800fc1e:	b003      	add	sp, #12
 800fc20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc22:	ab01      	add	r3, sp, #4
 800fc24:	466a      	mov	r2, sp
 800fc26:	f7ff ffc9 	bl	800fbbc <__swhatbuf_r>
 800fc2a:	9f00      	ldr	r7, [sp, #0]
 800fc2c:	4605      	mov	r5, r0
 800fc2e:	4630      	mov	r0, r6
 800fc30:	4639      	mov	r1, r7
 800fc32:	f7ff fa19 	bl	800f068 <_malloc_r>
 800fc36:	b948      	cbnz	r0, 800fc4c <__smakebuf_r+0x46>
 800fc38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc3c:	059a      	lsls	r2, r3, #22
 800fc3e:	d4ee      	bmi.n	800fc1e <__smakebuf_r+0x18>
 800fc40:	f023 0303 	bic.w	r3, r3, #3
 800fc44:	f043 0302 	orr.w	r3, r3, #2
 800fc48:	81a3      	strh	r3, [r4, #12]
 800fc4a:	e7e2      	b.n	800fc12 <__smakebuf_r+0xc>
 800fc4c:	89a3      	ldrh	r3, [r4, #12]
 800fc4e:	6020      	str	r0, [r4, #0]
 800fc50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc54:	81a3      	strh	r3, [r4, #12]
 800fc56:	9b01      	ldr	r3, [sp, #4]
 800fc58:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fc5c:	b15b      	cbz	r3, 800fc76 <__smakebuf_r+0x70>
 800fc5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc62:	4630      	mov	r0, r6
 800fc64:	f000 f862 	bl	800fd2c <_isatty_r>
 800fc68:	b128      	cbz	r0, 800fc76 <__smakebuf_r+0x70>
 800fc6a:	89a3      	ldrh	r3, [r4, #12]
 800fc6c:	f023 0303 	bic.w	r3, r3, #3
 800fc70:	f043 0301 	orr.w	r3, r3, #1
 800fc74:	81a3      	strh	r3, [r4, #12]
 800fc76:	89a3      	ldrh	r3, [r4, #12]
 800fc78:	431d      	orrs	r5, r3
 800fc7a:	81a5      	strh	r5, [r4, #12]
 800fc7c:	e7cf      	b.n	800fc1e <__smakebuf_r+0x18>

0800fc7e <_putc_r>:
 800fc7e:	b570      	push	{r4, r5, r6, lr}
 800fc80:	460d      	mov	r5, r1
 800fc82:	4614      	mov	r4, r2
 800fc84:	4606      	mov	r6, r0
 800fc86:	b118      	cbz	r0, 800fc90 <_putc_r+0x12>
 800fc88:	6a03      	ldr	r3, [r0, #32]
 800fc8a:	b90b      	cbnz	r3, 800fc90 <_putc_r+0x12>
 800fc8c:	f7fe f90e 	bl	800deac <__sinit>
 800fc90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc92:	07d8      	lsls	r0, r3, #31
 800fc94:	d405      	bmi.n	800fca2 <_putc_r+0x24>
 800fc96:	89a3      	ldrh	r3, [r4, #12]
 800fc98:	0599      	lsls	r1, r3, #22
 800fc9a:	d402      	bmi.n	800fca2 <_putc_r+0x24>
 800fc9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc9e:	f7fe f9ea 	bl	800e076 <__retarget_lock_acquire_recursive>
 800fca2:	68a3      	ldr	r3, [r4, #8]
 800fca4:	3b01      	subs	r3, #1
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	60a3      	str	r3, [r4, #8]
 800fcaa:	da05      	bge.n	800fcb8 <_putc_r+0x3a>
 800fcac:	69a2      	ldr	r2, [r4, #24]
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	db12      	blt.n	800fcd8 <_putc_r+0x5a>
 800fcb2:	b2eb      	uxtb	r3, r5
 800fcb4:	2b0a      	cmp	r3, #10
 800fcb6:	d00f      	beq.n	800fcd8 <_putc_r+0x5a>
 800fcb8:	6823      	ldr	r3, [r4, #0]
 800fcba:	1c5a      	adds	r2, r3, #1
 800fcbc:	6022      	str	r2, [r4, #0]
 800fcbe:	701d      	strb	r5, [r3, #0]
 800fcc0:	b2ed      	uxtb	r5, r5
 800fcc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fcc4:	07da      	lsls	r2, r3, #31
 800fcc6:	d405      	bmi.n	800fcd4 <_putc_r+0x56>
 800fcc8:	89a3      	ldrh	r3, [r4, #12]
 800fcca:	059b      	lsls	r3, r3, #22
 800fccc:	d402      	bmi.n	800fcd4 <_putc_r+0x56>
 800fcce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fcd0:	f7fe f9d2 	bl	800e078 <__retarget_lock_release_recursive>
 800fcd4:	4628      	mov	r0, r5
 800fcd6:	bd70      	pop	{r4, r5, r6, pc}
 800fcd8:	4629      	mov	r1, r5
 800fcda:	4622      	mov	r2, r4
 800fcdc:	4630      	mov	r0, r6
 800fcde:	f7ff fed9 	bl	800fa94 <__swbuf_r>
 800fce2:	4605      	mov	r5, r0
 800fce4:	e7ed      	b.n	800fcc2 <_putc_r+0x44>
	...

0800fce8 <_close_r>:
 800fce8:	b538      	push	{r3, r4, r5, lr}
 800fcea:	2300      	movs	r3, #0
 800fcec:	4d05      	ldr	r5, [pc, #20]	@ (800fd04 <_close_r+0x1c>)
 800fcee:	4604      	mov	r4, r0
 800fcf0:	4608      	mov	r0, r1
 800fcf2:	602b      	str	r3, [r5, #0]
 800fcf4:	f000 fa36 	bl	8010164 <_close>
 800fcf8:	1c43      	adds	r3, r0, #1
 800fcfa:	d102      	bne.n	800fd02 <_close_r+0x1a>
 800fcfc:	682b      	ldr	r3, [r5, #0]
 800fcfe:	b103      	cbz	r3, 800fd02 <_close_r+0x1a>
 800fd00:	6023      	str	r3, [r4, #0]
 800fd02:	bd38      	pop	{r3, r4, r5, pc}
 800fd04:	200010bc 	.word	0x200010bc

0800fd08 <_fstat_r>:
 800fd08:	b538      	push	{r3, r4, r5, lr}
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	4d06      	ldr	r5, [pc, #24]	@ (800fd28 <_fstat_r+0x20>)
 800fd0e:	4604      	mov	r4, r0
 800fd10:	4608      	mov	r0, r1
 800fd12:	4611      	mov	r1, r2
 800fd14:	602b      	str	r3, [r5, #0]
 800fd16:	f000 fa6a 	bl	80101ee <_fstat>
 800fd1a:	1c43      	adds	r3, r0, #1
 800fd1c:	d102      	bne.n	800fd24 <_fstat_r+0x1c>
 800fd1e:	682b      	ldr	r3, [r5, #0]
 800fd20:	b103      	cbz	r3, 800fd24 <_fstat_r+0x1c>
 800fd22:	6023      	str	r3, [r4, #0]
 800fd24:	bd38      	pop	{r3, r4, r5, pc}
 800fd26:	bf00      	nop
 800fd28:	200010bc 	.word	0x200010bc

0800fd2c <_isatty_r>:
 800fd2c:	b538      	push	{r3, r4, r5, lr}
 800fd2e:	2300      	movs	r3, #0
 800fd30:	4d05      	ldr	r5, [pc, #20]	@ (800fd48 <_isatty_r+0x1c>)
 800fd32:	4604      	mov	r4, r0
 800fd34:	4608      	mov	r0, r1
 800fd36:	602b      	str	r3, [r5, #0]
 800fd38:	f000 fbc8 	bl	80104cc <_isatty>
 800fd3c:	1c43      	adds	r3, r0, #1
 800fd3e:	d102      	bne.n	800fd46 <_isatty_r+0x1a>
 800fd40:	682b      	ldr	r3, [r5, #0]
 800fd42:	b103      	cbz	r3, 800fd46 <_isatty_r+0x1a>
 800fd44:	6023      	str	r3, [r4, #0]
 800fd46:	bd38      	pop	{r3, r4, r5, pc}
 800fd48:	200010bc 	.word	0x200010bc

0800fd4c <_lseek_r>:
 800fd4c:	b538      	push	{r3, r4, r5, lr}
 800fd4e:	4604      	mov	r4, r0
 800fd50:	4d06      	ldr	r5, [pc, #24]	@ (800fd6c <_lseek_r+0x20>)
 800fd52:	4608      	mov	r0, r1
 800fd54:	4611      	mov	r1, r2
 800fd56:	2200      	movs	r2, #0
 800fd58:	602a      	str	r2, [r5, #0]
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	f000 f9c3 	bl	80100e6 <_lseek>
 800fd60:	1c43      	adds	r3, r0, #1
 800fd62:	d102      	bne.n	800fd6a <_lseek_r+0x1e>
 800fd64:	682b      	ldr	r3, [r5, #0]
 800fd66:	b103      	cbz	r3, 800fd6a <_lseek_r+0x1e>
 800fd68:	6023      	str	r3, [r4, #0]
 800fd6a:	bd38      	pop	{r3, r4, r5, pc}
 800fd6c:	200010bc 	.word	0x200010bc

0800fd70 <_read_r>:
 800fd70:	b538      	push	{r3, r4, r5, lr}
 800fd72:	4604      	mov	r4, r0
 800fd74:	4d06      	ldr	r5, [pc, #24]	@ (800fd90 <_read_r+0x20>)
 800fd76:	4608      	mov	r0, r1
 800fd78:	4611      	mov	r1, r2
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	602a      	str	r2, [r5, #0]
 800fd7e:	461a      	mov	r2, r3
 800fd80:	f000 f95b 	bl	801003a <_read>
 800fd84:	1c43      	adds	r3, r0, #1
 800fd86:	d102      	bne.n	800fd8e <_read_r+0x1e>
 800fd88:	682b      	ldr	r3, [r5, #0]
 800fd8a:	b103      	cbz	r3, 800fd8e <_read_r+0x1e>
 800fd8c:	6023      	str	r3, [r4, #0]
 800fd8e:	bd38      	pop	{r3, r4, r5, pc}
 800fd90:	200010bc 	.word	0x200010bc

0800fd94 <_sbrk_r>:
 800fd94:	b538      	push	{r3, r4, r5, lr}
 800fd96:	2300      	movs	r3, #0
 800fd98:	4d05      	ldr	r5, [pc, #20]	@ (800fdb0 <_sbrk_r+0x1c>)
 800fd9a:	4604      	mov	r4, r0
 800fd9c:	4608      	mov	r0, r1
 800fd9e:	602b      	str	r3, [r5, #0]
 800fda0:	f7fd fafc 	bl	800d39c <_sbrk>
 800fda4:	1c43      	adds	r3, r0, #1
 800fda6:	d102      	bne.n	800fdae <_sbrk_r+0x1a>
 800fda8:	682b      	ldr	r3, [r5, #0]
 800fdaa:	b103      	cbz	r3, 800fdae <_sbrk_r+0x1a>
 800fdac:	6023      	str	r3, [r4, #0]
 800fdae:	bd38      	pop	{r3, r4, r5, pc}
 800fdb0:	200010bc 	.word	0x200010bc

0800fdb4 <_write_r>:
 800fdb4:	b538      	push	{r3, r4, r5, lr}
 800fdb6:	4604      	mov	r4, r0
 800fdb8:	4d06      	ldr	r5, [pc, #24]	@ (800fdd4 <_write_r+0x20>)
 800fdba:	4608      	mov	r0, r1
 800fdbc:	4611      	mov	r1, r2
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	602a      	str	r2, [r5, #0]
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	f000 f9a1 	bl	801010a <_write>
 800fdc8:	1c43      	adds	r3, r0, #1
 800fdca:	d102      	bne.n	800fdd2 <_write_r+0x1e>
 800fdcc:	682b      	ldr	r3, [r5, #0]
 800fdce:	b103      	cbz	r3, 800fdd2 <_write_r+0x1e>
 800fdd0:	6023      	str	r3, [r4, #0]
 800fdd2:	bd38      	pop	{r3, r4, r5, pc}
 800fdd4:	200010bc 	.word	0x200010bc

0800fdd8 <abort>:
 800fdd8:	2006      	movs	r0, #6
 800fdda:	b508      	push	{r3, lr}
 800fddc:	f000 f8aa 	bl	800ff34 <raise>
 800fde0:	2001      	movs	r0, #1
 800fde2:	f000 f8c3 	bl	800ff6c <_exit>

0800fde6 <_calloc_r>:
 800fde6:	b570      	push	{r4, r5, r6, lr}
 800fde8:	fba1 5402 	umull	r5, r4, r1, r2
 800fdec:	b93c      	cbnz	r4, 800fdfe <_calloc_r+0x18>
 800fdee:	4629      	mov	r1, r5
 800fdf0:	f7ff f93a 	bl	800f068 <_malloc_r>
 800fdf4:	4606      	mov	r6, r0
 800fdf6:	b928      	cbnz	r0, 800fe04 <_calloc_r+0x1e>
 800fdf8:	2600      	movs	r6, #0
 800fdfa:	4630      	mov	r0, r6
 800fdfc:	bd70      	pop	{r4, r5, r6, pc}
 800fdfe:	220c      	movs	r2, #12
 800fe00:	6002      	str	r2, [r0, #0]
 800fe02:	e7f9      	b.n	800fdf8 <_calloc_r+0x12>
 800fe04:	462a      	mov	r2, r5
 800fe06:	4621      	mov	r1, r4
 800fe08:	f7fe f8fe 	bl	800e008 <memset>
 800fe0c:	e7f5      	b.n	800fdfa <_calloc_r+0x14>
	...

0800fe10 <_free_r>:
 800fe10:	b538      	push	{r3, r4, r5, lr}
 800fe12:	4605      	mov	r5, r0
 800fe14:	2900      	cmp	r1, #0
 800fe16:	d041      	beq.n	800fe9c <_free_r+0x8c>
 800fe18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe1c:	1f0c      	subs	r4, r1, #4
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	bfb8      	it	lt
 800fe22:	18e4      	addlt	r4, r4, r3
 800fe24:	f7ff fa4c 	bl	800f2c0 <__malloc_lock>
 800fe28:	4a1d      	ldr	r2, [pc, #116]	@ (800fea0 <_free_r+0x90>)
 800fe2a:	6813      	ldr	r3, [r2, #0]
 800fe2c:	b933      	cbnz	r3, 800fe3c <_free_r+0x2c>
 800fe2e:	6063      	str	r3, [r4, #4]
 800fe30:	6014      	str	r4, [r2, #0]
 800fe32:	4628      	mov	r0, r5
 800fe34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe38:	f7ff ba48 	b.w	800f2cc <__malloc_unlock>
 800fe3c:	42a3      	cmp	r3, r4
 800fe3e:	d908      	bls.n	800fe52 <_free_r+0x42>
 800fe40:	6820      	ldr	r0, [r4, #0]
 800fe42:	1821      	adds	r1, r4, r0
 800fe44:	428b      	cmp	r3, r1
 800fe46:	bf01      	itttt	eq
 800fe48:	6819      	ldreq	r1, [r3, #0]
 800fe4a:	685b      	ldreq	r3, [r3, #4]
 800fe4c:	1809      	addeq	r1, r1, r0
 800fe4e:	6021      	streq	r1, [r4, #0]
 800fe50:	e7ed      	b.n	800fe2e <_free_r+0x1e>
 800fe52:	461a      	mov	r2, r3
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	b10b      	cbz	r3, 800fe5c <_free_r+0x4c>
 800fe58:	42a3      	cmp	r3, r4
 800fe5a:	d9fa      	bls.n	800fe52 <_free_r+0x42>
 800fe5c:	6811      	ldr	r1, [r2, #0]
 800fe5e:	1850      	adds	r0, r2, r1
 800fe60:	42a0      	cmp	r0, r4
 800fe62:	d10b      	bne.n	800fe7c <_free_r+0x6c>
 800fe64:	6820      	ldr	r0, [r4, #0]
 800fe66:	4401      	add	r1, r0
 800fe68:	1850      	adds	r0, r2, r1
 800fe6a:	6011      	str	r1, [r2, #0]
 800fe6c:	4283      	cmp	r3, r0
 800fe6e:	d1e0      	bne.n	800fe32 <_free_r+0x22>
 800fe70:	6818      	ldr	r0, [r3, #0]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	4408      	add	r0, r1
 800fe76:	6053      	str	r3, [r2, #4]
 800fe78:	6010      	str	r0, [r2, #0]
 800fe7a:	e7da      	b.n	800fe32 <_free_r+0x22>
 800fe7c:	d902      	bls.n	800fe84 <_free_r+0x74>
 800fe7e:	230c      	movs	r3, #12
 800fe80:	602b      	str	r3, [r5, #0]
 800fe82:	e7d6      	b.n	800fe32 <_free_r+0x22>
 800fe84:	6820      	ldr	r0, [r4, #0]
 800fe86:	1821      	adds	r1, r4, r0
 800fe88:	428b      	cmp	r3, r1
 800fe8a:	bf02      	ittt	eq
 800fe8c:	6819      	ldreq	r1, [r3, #0]
 800fe8e:	685b      	ldreq	r3, [r3, #4]
 800fe90:	1809      	addeq	r1, r1, r0
 800fe92:	6063      	str	r3, [r4, #4]
 800fe94:	bf08      	it	eq
 800fe96:	6021      	streq	r1, [r4, #0]
 800fe98:	6054      	str	r4, [r2, #4]
 800fe9a:	e7ca      	b.n	800fe32 <_free_r+0x22>
 800fe9c:	bd38      	pop	{r3, r4, r5, pc}
 800fe9e:	bf00      	nop
 800fea0:	200010b8 	.word	0x200010b8

0800fea4 <__ascii_mbtowc>:
 800fea4:	b082      	sub	sp, #8
 800fea6:	b901      	cbnz	r1, 800feaa <__ascii_mbtowc+0x6>
 800fea8:	a901      	add	r1, sp, #4
 800feaa:	b142      	cbz	r2, 800febe <__ascii_mbtowc+0x1a>
 800feac:	b14b      	cbz	r3, 800fec2 <__ascii_mbtowc+0x1e>
 800feae:	7813      	ldrb	r3, [r2, #0]
 800feb0:	600b      	str	r3, [r1, #0]
 800feb2:	7812      	ldrb	r2, [r2, #0]
 800feb4:	1e10      	subs	r0, r2, #0
 800feb6:	bf18      	it	ne
 800feb8:	2001      	movne	r0, #1
 800feba:	b002      	add	sp, #8
 800febc:	4770      	bx	lr
 800febe:	4610      	mov	r0, r2
 800fec0:	e7fb      	b.n	800feba <__ascii_mbtowc+0x16>
 800fec2:	f06f 0001 	mvn.w	r0, #1
 800fec6:	e7f8      	b.n	800feba <__ascii_mbtowc+0x16>

0800fec8 <__ascii_wctomb>:
 800fec8:	4603      	mov	r3, r0
 800feca:	4608      	mov	r0, r1
 800fecc:	b141      	cbz	r1, 800fee0 <__ascii_wctomb+0x18>
 800fece:	2aff      	cmp	r2, #255	@ 0xff
 800fed0:	d904      	bls.n	800fedc <__ascii_wctomb+0x14>
 800fed2:	228a      	movs	r2, #138	@ 0x8a
 800fed4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fed8:	601a      	str	r2, [r3, #0]
 800feda:	4770      	bx	lr
 800fedc:	2001      	movs	r0, #1
 800fede:	700a      	strb	r2, [r1, #0]
 800fee0:	4770      	bx	lr

0800fee2 <_raise_r>:
 800fee2:	291f      	cmp	r1, #31
 800fee4:	b538      	push	{r3, r4, r5, lr}
 800fee6:	4605      	mov	r5, r0
 800fee8:	460c      	mov	r4, r1
 800feea:	d904      	bls.n	800fef6 <_raise_r+0x14>
 800feec:	2316      	movs	r3, #22
 800feee:	6003      	str	r3, [r0, #0]
 800fef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fef4:	bd38      	pop	{r3, r4, r5, pc}
 800fef6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fef8:	b112      	cbz	r2, 800ff00 <_raise_r+0x1e>
 800fefa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fefe:	b94b      	cbnz	r3, 800ff14 <_raise_r+0x32>
 800ff00:	4628      	mov	r0, r5
 800ff02:	f000 f831 	bl	800ff68 <_getpid_r>
 800ff06:	4622      	mov	r2, r4
 800ff08:	4601      	mov	r1, r0
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff10:	f000 b818 	b.w	800ff44 <_kill_r>
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	d00a      	beq.n	800ff2e <_raise_r+0x4c>
 800ff18:	1c59      	adds	r1, r3, #1
 800ff1a:	d103      	bne.n	800ff24 <_raise_r+0x42>
 800ff1c:	2316      	movs	r3, #22
 800ff1e:	6003      	str	r3, [r0, #0]
 800ff20:	2001      	movs	r0, #1
 800ff22:	e7e7      	b.n	800fef4 <_raise_r+0x12>
 800ff24:	2100      	movs	r1, #0
 800ff26:	4620      	mov	r0, r4
 800ff28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ff2c:	4798      	blx	r3
 800ff2e:	2000      	movs	r0, #0
 800ff30:	e7e0      	b.n	800fef4 <_raise_r+0x12>
	...

0800ff34 <raise>:
 800ff34:	4b02      	ldr	r3, [pc, #8]	@ (800ff40 <raise+0xc>)
 800ff36:	4601      	mov	r1, r0
 800ff38:	6818      	ldr	r0, [r3, #0]
 800ff3a:	f7ff bfd2 	b.w	800fee2 <_raise_r>
 800ff3e:	bf00      	nop
 800ff40:	200000b8 	.word	0x200000b8

0800ff44 <_kill_r>:
 800ff44:	b538      	push	{r3, r4, r5, lr}
 800ff46:	2300      	movs	r3, #0
 800ff48:	4d06      	ldr	r5, [pc, #24]	@ (800ff64 <_kill_r+0x20>)
 800ff4a:	4604      	mov	r4, r0
 800ff4c:	4608      	mov	r0, r1
 800ff4e:	4611      	mov	r1, r2
 800ff50:	602b      	str	r3, [r5, #0]
 800ff52:	f000 f829 	bl	800ffa8 <_kill>
 800ff56:	1c43      	adds	r3, r0, #1
 800ff58:	d102      	bne.n	800ff60 <_kill_r+0x1c>
 800ff5a:	682b      	ldr	r3, [r5, #0]
 800ff5c:	b103      	cbz	r3, 800ff60 <_kill_r+0x1c>
 800ff5e:	6023      	str	r3, [r4, #0]
 800ff60:	bd38      	pop	{r3, r4, r5, pc}
 800ff62:	bf00      	nop
 800ff64:	200010bc 	.word	0x200010bc

0800ff68 <_getpid_r>:
 800ff68:	f000 b91e 	b.w	80101a8 <_getpid>

0800ff6c <_exit>:
 800ff6c:	4601      	mov	r1, r0
 800ff6e:	4a03      	ldr	r2, [pc, #12]	@ (800ff7c <_exit+0x10>)
 800ff70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ff74:	b508      	push	{r3, lr}
 800ff76:	f000 f803 	bl	800ff80 <_kill_shared>
 800ff7a:	bf00      	nop
 800ff7c:	00020026 	.word	0x00020026

0800ff80 <_kill_shared>:
 800ff80:	b507      	push	{r0, r1, r2, lr}
 800ff82:	e9cd 2100 	strd	r2, r1, [sp]
 800ff86:	f000 fa29 	bl	80103dc <_has_ext_exit_extended>
 800ff8a:	2800      	cmp	r0, #0
 800ff8c:	bf0c      	ite	eq
 800ff8e:	2418      	moveq	r4, #24
 800ff90:	2420      	movne	r4, #32
 800ff92:	f000 fa23 	bl	80103dc <_has_ext_exit_extended>
 800ff96:	b120      	cbz	r0, 800ffa2 <_kill_shared+0x22>
 800ff98:	466d      	mov	r5, sp
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	4629      	mov	r1, r5
 800ff9e:	beab      	bkpt	0x00ab
 800ffa0:	4604      	mov	r4, r0
 800ffa2:	9d00      	ldr	r5, [sp, #0]
 800ffa4:	e7f9      	b.n	800ff9a <_kill_shared+0x1a>
	...

0800ffa8 <_kill>:
 800ffa8:	2906      	cmp	r1, #6
 800ffaa:	b508      	push	{r3, lr}
 800ffac:	bf0c      	ite	eq
 800ffae:	4a02      	ldreq	r2, [pc, #8]	@ (800ffb8 <_kill+0x10>)
 800ffb0:	4a02      	ldrne	r2, [pc, #8]	@ (800ffbc <_kill+0x14>)
 800ffb2:	f7ff ffe5 	bl	800ff80 <_kill_shared>
 800ffb6:	bf00      	nop
 800ffb8:	00020023 	.word	0x00020023
 800ffbc:	00020026 	.word	0x00020026

0800ffc0 <findslot>:
 800ffc0:	4b0a      	ldr	r3, [pc, #40]	@ (800ffec <findslot+0x2c>)
 800ffc2:	b510      	push	{r4, lr}
 800ffc4:	4604      	mov	r4, r0
 800ffc6:	6818      	ldr	r0, [r3, #0]
 800ffc8:	b118      	cbz	r0, 800ffd2 <findslot+0x12>
 800ffca:	6a03      	ldr	r3, [r0, #32]
 800ffcc:	b90b      	cbnz	r3, 800ffd2 <findslot+0x12>
 800ffce:	f7fd ff6d 	bl	800deac <__sinit>
 800ffd2:	2c13      	cmp	r4, #19
 800ffd4:	d807      	bhi.n	800ffe6 <findslot+0x26>
 800ffd6:	4806      	ldr	r0, [pc, #24]	@ (800fff0 <findslot+0x30>)
 800ffd8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800ffdc:	3201      	adds	r2, #1
 800ffde:	d002      	beq.n	800ffe6 <findslot+0x26>
 800ffe0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800ffe4:	bd10      	pop	{r4, pc}
 800ffe6:	2000      	movs	r0, #0
 800ffe8:	e7fc      	b.n	800ffe4 <findslot+0x24>
 800ffea:	bf00      	nop
 800ffec:	200000b8 	.word	0x200000b8
 800fff0:	200010cc 	.word	0x200010cc

0800fff4 <error>:
 800fff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fff6:	4604      	mov	r4, r0
 800fff8:	2613      	movs	r6, #19
 800fffa:	f7fe f811 	bl	800e020 <__errno>
 800fffe:	2700      	movs	r7, #0
 8010000:	4605      	mov	r5, r0
 8010002:	4630      	mov	r0, r6
 8010004:	4639      	mov	r1, r7
 8010006:	beab      	bkpt	0x00ab
 8010008:	4606      	mov	r6, r0
 801000a:	4620      	mov	r0, r4
 801000c:	602e      	str	r6, [r5, #0]
 801000e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010010 <checkerror>:
 8010010:	1c43      	adds	r3, r0, #1
 8010012:	d101      	bne.n	8010018 <checkerror+0x8>
 8010014:	f7ff bfee 	b.w	800fff4 <error>
 8010018:	4770      	bx	lr

0801001a <_swiread>:
 801001a:	b530      	push	{r4, r5, lr}
 801001c:	b085      	sub	sp, #20
 801001e:	2406      	movs	r4, #6
 8010020:	ad01      	add	r5, sp, #4
 8010022:	9203      	str	r2, [sp, #12]
 8010024:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8010028:	4620      	mov	r0, r4
 801002a:	4629      	mov	r1, r5
 801002c:	beab      	bkpt	0x00ab
 801002e:	4604      	mov	r4, r0
 8010030:	4620      	mov	r0, r4
 8010032:	f7ff ffed 	bl	8010010 <checkerror>
 8010036:	b005      	add	sp, #20
 8010038:	bd30      	pop	{r4, r5, pc}

0801003a <_read>:
 801003a:	b570      	push	{r4, r5, r6, lr}
 801003c:	460e      	mov	r6, r1
 801003e:	4614      	mov	r4, r2
 8010040:	f7ff ffbe 	bl	800ffc0 <findslot>
 8010044:	4605      	mov	r5, r0
 8010046:	b930      	cbnz	r0, 8010056 <_read+0x1c>
 8010048:	f7fd ffea 	bl	800e020 <__errno>
 801004c:	2309      	movs	r3, #9
 801004e:	6003      	str	r3, [r0, #0]
 8010050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010054:	bd70      	pop	{r4, r5, r6, pc}
 8010056:	4622      	mov	r2, r4
 8010058:	4631      	mov	r1, r6
 801005a:	6800      	ldr	r0, [r0, #0]
 801005c:	f7ff ffdd 	bl	801001a <_swiread>
 8010060:	1c43      	adds	r3, r0, #1
 8010062:	d0f5      	beq.n	8010050 <_read+0x16>
 8010064:	686b      	ldr	r3, [r5, #4]
 8010066:	1a20      	subs	r0, r4, r0
 8010068:	4403      	add	r3, r0
 801006a:	606b      	str	r3, [r5, #4]
 801006c:	e7f2      	b.n	8010054 <_read+0x1a>

0801006e <_swilseek>:
 801006e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010070:	460c      	mov	r4, r1
 8010072:	4616      	mov	r6, r2
 8010074:	f7ff ffa4 	bl	800ffc0 <findslot>
 8010078:	4605      	mov	r5, r0
 801007a:	b940      	cbnz	r0, 801008e <_swilseek+0x20>
 801007c:	f7fd ffd0 	bl	800e020 <__errno>
 8010080:	2309      	movs	r3, #9
 8010082:	6003      	str	r3, [r0, #0]
 8010084:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010088:	4620      	mov	r0, r4
 801008a:	b003      	add	sp, #12
 801008c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801008e:	2e02      	cmp	r6, #2
 8010090:	d903      	bls.n	801009a <_swilseek+0x2c>
 8010092:	f7fd ffc5 	bl	800e020 <__errno>
 8010096:	2316      	movs	r3, #22
 8010098:	e7f3      	b.n	8010082 <_swilseek+0x14>
 801009a:	2e01      	cmp	r6, #1
 801009c:	d112      	bne.n	80100c4 <_swilseek+0x56>
 801009e:	6843      	ldr	r3, [r0, #4]
 80100a0:	18e4      	adds	r4, r4, r3
 80100a2:	d4f6      	bmi.n	8010092 <_swilseek+0x24>
 80100a4:	682b      	ldr	r3, [r5, #0]
 80100a6:	260a      	movs	r6, #10
 80100a8:	466f      	mov	r7, sp
 80100aa:	e9cd 3400 	strd	r3, r4, [sp]
 80100ae:	4630      	mov	r0, r6
 80100b0:	4639      	mov	r1, r7
 80100b2:	beab      	bkpt	0x00ab
 80100b4:	4606      	mov	r6, r0
 80100b6:	4630      	mov	r0, r6
 80100b8:	f7ff ffaa 	bl	8010010 <checkerror>
 80100bc:	2800      	cmp	r0, #0
 80100be:	dbe1      	blt.n	8010084 <_swilseek+0x16>
 80100c0:	606c      	str	r4, [r5, #4]
 80100c2:	e7e1      	b.n	8010088 <_swilseek+0x1a>
 80100c4:	2e02      	cmp	r6, #2
 80100c6:	6803      	ldr	r3, [r0, #0]
 80100c8:	d1ec      	bne.n	80100a4 <_swilseek+0x36>
 80100ca:	260c      	movs	r6, #12
 80100cc:	466f      	mov	r7, sp
 80100ce:	9300      	str	r3, [sp, #0]
 80100d0:	4630      	mov	r0, r6
 80100d2:	4639      	mov	r1, r7
 80100d4:	beab      	bkpt	0x00ab
 80100d6:	4606      	mov	r6, r0
 80100d8:	4630      	mov	r0, r6
 80100da:	f7ff ff99 	bl	8010010 <checkerror>
 80100de:	1c43      	adds	r3, r0, #1
 80100e0:	d0d0      	beq.n	8010084 <_swilseek+0x16>
 80100e2:	4404      	add	r4, r0
 80100e4:	e7de      	b.n	80100a4 <_swilseek+0x36>

080100e6 <_lseek>:
 80100e6:	f7ff bfc2 	b.w	801006e <_swilseek>

080100ea <_swiwrite>:
 80100ea:	b530      	push	{r4, r5, lr}
 80100ec:	b085      	sub	sp, #20
 80100ee:	2405      	movs	r4, #5
 80100f0:	ad01      	add	r5, sp, #4
 80100f2:	9203      	str	r2, [sp, #12]
 80100f4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80100f8:	4620      	mov	r0, r4
 80100fa:	4629      	mov	r1, r5
 80100fc:	beab      	bkpt	0x00ab
 80100fe:	4604      	mov	r4, r0
 8010100:	4620      	mov	r0, r4
 8010102:	f7ff ff85 	bl	8010010 <checkerror>
 8010106:	b005      	add	sp, #20
 8010108:	bd30      	pop	{r4, r5, pc}

0801010a <_write>:
 801010a:	b570      	push	{r4, r5, r6, lr}
 801010c:	460e      	mov	r6, r1
 801010e:	4615      	mov	r5, r2
 8010110:	f7ff ff56 	bl	800ffc0 <findslot>
 8010114:	4604      	mov	r4, r0
 8010116:	b930      	cbnz	r0, 8010126 <_write+0x1c>
 8010118:	f7fd ff82 	bl	800e020 <__errno>
 801011c:	2309      	movs	r3, #9
 801011e:	6003      	str	r3, [r0, #0]
 8010120:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010124:	bd70      	pop	{r4, r5, r6, pc}
 8010126:	462a      	mov	r2, r5
 8010128:	4631      	mov	r1, r6
 801012a:	6800      	ldr	r0, [r0, #0]
 801012c:	f7ff ffdd 	bl	80100ea <_swiwrite>
 8010130:	1e03      	subs	r3, r0, #0
 8010132:	dbf5      	blt.n	8010120 <_write+0x16>
 8010134:	6862      	ldr	r2, [r4, #4]
 8010136:	1ae8      	subs	r0, r5, r3
 8010138:	42ab      	cmp	r3, r5
 801013a:	4402      	add	r2, r0
 801013c:	6062      	str	r2, [r4, #4]
 801013e:	d1f1      	bne.n	8010124 <_write+0x1a>
 8010140:	2000      	movs	r0, #0
 8010142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010146:	f7ff bf55 	b.w	800fff4 <error>

0801014a <_swiclose>:
 801014a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801014c:	2402      	movs	r4, #2
 801014e:	ad01      	add	r5, sp, #4
 8010150:	9001      	str	r0, [sp, #4]
 8010152:	4620      	mov	r0, r4
 8010154:	4629      	mov	r1, r5
 8010156:	beab      	bkpt	0x00ab
 8010158:	4604      	mov	r4, r0
 801015a:	4620      	mov	r0, r4
 801015c:	f7ff ff58 	bl	8010010 <checkerror>
 8010160:	b003      	add	sp, #12
 8010162:	bd30      	pop	{r4, r5, pc}

08010164 <_close>:
 8010164:	b538      	push	{r3, r4, r5, lr}
 8010166:	4605      	mov	r5, r0
 8010168:	f7ff ff2a 	bl	800ffc0 <findslot>
 801016c:	4604      	mov	r4, r0
 801016e:	b930      	cbnz	r0, 801017e <_close+0x1a>
 8010170:	f7fd ff56 	bl	800e020 <__errno>
 8010174:	2309      	movs	r3, #9
 8010176:	6003      	str	r3, [r0, #0]
 8010178:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801017c:	bd38      	pop	{r3, r4, r5, pc}
 801017e:	3d01      	subs	r5, #1
 8010180:	2d01      	cmp	r5, #1
 8010182:	d809      	bhi.n	8010198 <_close+0x34>
 8010184:	4b07      	ldr	r3, [pc, #28]	@ (80101a4 <_close+0x40>)
 8010186:	689a      	ldr	r2, [r3, #8]
 8010188:	691b      	ldr	r3, [r3, #16]
 801018a:	429a      	cmp	r2, r3
 801018c:	d104      	bne.n	8010198 <_close+0x34>
 801018e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010192:	2000      	movs	r0, #0
 8010194:	6023      	str	r3, [r4, #0]
 8010196:	e7f1      	b.n	801017c <_close+0x18>
 8010198:	6820      	ldr	r0, [r4, #0]
 801019a:	f7ff ffd6 	bl	801014a <_swiclose>
 801019e:	2800      	cmp	r0, #0
 80101a0:	d0f5      	beq.n	801018e <_close+0x2a>
 80101a2:	e7eb      	b.n	801017c <_close+0x18>
 80101a4:	200010cc 	.word	0x200010cc

080101a8 <_getpid>:
 80101a8:	2001      	movs	r0, #1
 80101aa:	4770      	bx	lr

080101ac <_swistat>:
 80101ac:	b570      	push	{r4, r5, r6, lr}
 80101ae:	460c      	mov	r4, r1
 80101b0:	f7ff ff06 	bl	800ffc0 <findslot>
 80101b4:	4605      	mov	r5, r0
 80101b6:	b930      	cbnz	r0, 80101c6 <_swistat+0x1a>
 80101b8:	f7fd ff32 	bl	800e020 <__errno>
 80101bc:	2309      	movs	r3, #9
 80101be:	6003      	str	r3, [r0, #0]
 80101c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80101c4:	bd70      	pop	{r4, r5, r6, pc}
 80101c6:	6863      	ldr	r3, [r4, #4]
 80101c8:	260c      	movs	r6, #12
 80101ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80101ce:	6063      	str	r3, [r4, #4]
 80101d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80101d4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80101d6:	4630      	mov	r0, r6
 80101d8:	4629      	mov	r1, r5
 80101da:	beab      	bkpt	0x00ab
 80101dc:	4605      	mov	r5, r0
 80101de:	4628      	mov	r0, r5
 80101e0:	f7ff ff16 	bl	8010010 <checkerror>
 80101e4:	1c43      	adds	r3, r0, #1
 80101e6:	d0eb      	beq.n	80101c0 <_swistat+0x14>
 80101e8:	6120      	str	r0, [r4, #16]
 80101ea:	2000      	movs	r0, #0
 80101ec:	e7ea      	b.n	80101c4 <_swistat+0x18>

080101ee <_fstat>:
 80101ee:	460b      	mov	r3, r1
 80101f0:	2258      	movs	r2, #88	@ 0x58
 80101f2:	2100      	movs	r1, #0
 80101f4:	b510      	push	{r4, lr}
 80101f6:	4604      	mov	r4, r0
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7fd ff05 	bl	800e008 <memset>
 80101fe:	4601      	mov	r1, r0
 8010200:	4620      	mov	r0, r4
 8010202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010206:	f7ff bfd1 	b.w	80101ac <_swistat>

0801020a <_stat>:
 801020a:	b538      	push	{r3, r4, r5, lr}
 801020c:	460d      	mov	r5, r1
 801020e:	4604      	mov	r4, r0
 8010210:	2258      	movs	r2, #88	@ 0x58
 8010212:	2100      	movs	r1, #0
 8010214:	4628      	mov	r0, r5
 8010216:	f7fd fef7 	bl	800e008 <memset>
 801021a:	4620      	mov	r0, r4
 801021c:	2100      	movs	r1, #0
 801021e:	f000 f811 	bl	8010244 <_swiopen>
 8010222:	1c43      	adds	r3, r0, #1
 8010224:	4604      	mov	r4, r0
 8010226:	d00b      	beq.n	8010240 <_stat+0x36>
 8010228:	686b      	ldr	r3, [r5, #4]
 801022a:	4629      	mov	r1, r5
 801022c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8010230:	606b      	str	r3, [r5, #4]
 8010232:	f7ff ffbb 	bl	80101ac <_swistat>
 8010236:	4605      	mov	r5, r0
 8010238:	4620      	mov	r0, r4
 801023a:	462c      	mov	r4, r5
 801023c:	f7ff ff92 	bl	8010164 <_close>
 8010240:	4620      	mov	r0, r4
 8010242:	bd38      	pop	{r3, r4, r5, pc}

08010244 <_swiopen>:
 8010244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010248:	4682      	mov	sl, r0
 801024a:	b096      	sub	sp, #88	@ 0x58
 801024c:	460e      	mov	r6, r1
 801024e:	2400      	movs	r4, #0
 8010250:	4f27      	ldr	r7, [pc, #156]	@ (80102f0 <_swiopen+0xac>)
 8010252:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8010256:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801025a:	3301      	adds	r3, #1
 801025c:	d00c      	beq.n	8010278 <_swiopen+0x34>
 801025e:	3401      	adds	r4, #1
 8010260:	2c14      	cmp	r4, #20
 8010262:	d1f6      	bne.n	8010252 <_swiopen+0xe>
 8010264:	f7fd fedc 	bl	800e020 <__errno>
 8010268:	2318      	movs	r3, #24
 801026a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801026e:	6003      	str	r3, [r0, #0]
 8010270:	4620      	mov	r0, r4
 8010272:	b016      	add	sp, #88	@ 0x58
 8010274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010278:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 801027c:	46e9      	mov	r9, sp
 801027e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8010282:	d109      	bne.n	8010298 <_swiopen+0x54>
 8010284:	4649      	mov	r1, r9
 8010286:	4650      	mov	r0, sl
 8010288:	f7ff ffbf 	bl	801020a <_stat>
 801028c:	3001      	adds	r0, #1
 801028e:	d003      	beq.n	8010298 <_swiopen+0x54>
 8010290:	f7fd fec6 	bl	800e020 <__errno>
 8010294:	2311      	movs	r3, #17
 8010296:	e7e8      	b.n	801026a <_swiopen+0x26>
 8010298:	f3c6 4500 	ubfx	r5, r6, #16, #1
 801029c:	f240 6301 	movw	r3, #1537	@ 0x601
 80102a0:	07b2      	lsls	r2, r6, #30
 80102a2:	4650      	mov	r0, sl
 80102a4:	f8cd a000 	str.w	sl, [sp]
 80102a8:	bf48      	it	mi
 80102aa:	f045 0502 	orrmi.w	r5, r5, #2
 80102ae:	421e      	tst	r6, r3
 80102b0:	bf18      	it	ne
 80102b2:	f045 0504 	orrne.w	r5, r5, #4
 80102b6:	0733      	lsls	r3, r6, #28
 80102b8:	bf44      	itt	mi
 80102ba:	f025 0504 	bicmi.w	r5, r5, #4
 80102be:	f045 0508 	orrmi.w	r5, r5, #8
 80102c2:	f7ef ffd9 	bl	8000278 <strlen>
 80102c6:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80102ca:	2501      	movs	r5, #1
 80102cc:	4628      	mov	r0, r5
 80102ce:	4649      	mov	r1, r9
 80102d0:	beab      	bkpt	0x00ab
 80102d2:	4605      	mov	r5, r0
 80102d4:	2d00      	cmp	r5, #0
 80102d6:	db05      	blt.n	80102e4 <_swiopen+0xa0>
 80102d8:	2300      	movs	r3, #0
 80102da:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 80102de:	4447      	add	r7, r8
 80102e0:	607b      	str	r3, [r7, #4]
 80102e2:	e7c5      	b.n	8010270 <_swiopen+0x2c>
 80102e4:	4628      	mov	r0, r5
 80102e6:	f7ff fe85 	bl	800fff4 <error>
 80102ea:	4604      	mov	r4, r0
 80102ec:	e7c0      	b.n	8010270 <_swiopen+0x2c>
 80102ee:	bf00      	nop
 80102f0:	200010cc 	.word	0x200010cc

080102f4 <_get_semihosting_exts>:
 80102f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80102f8:	4606      	mov	r6, r0
 80102fa:	4615      	mov	r5, r2
 80102fc:	460f      	mov	r7, r1
 80102fe:	4829      	ldr	r0, [pc, #164]	@ (80103a4 <_get_semihosting_exts+0xb0>)
 8010300:	2100      	movs	r1, #0
 8010302:	f7ff ff9f 	bl	8010244 <_swiopen>
 8010306:	4604      	mov	r4, r0
 8010308:	462a      	mov	r2, r5
 801030a:	2100      	movs	r1, #0
 801030c:	4630      	mov	r0, r6
 801030e:	f7fd fe7b 	bl	800e008 <memset>
 8010312:	1c63      	adds	r3, r4, #1
 8010314:	d014      	beq.n	8010340 <_get_semihosting_exts+0x4c>
 8010316:	4620      	mov	r0, r4
 8010318:	f04f 080c 	mov.w	r8, #12
 801031c:	f7ff fe50 	bl	800ffc0 <findslot>
 8010320:	4681      	mov	r9, r0
 8010322:	4640      	mov	r0, r8
 8010324:	4649      	mov	r1, r9
 8010326:	beab      	bkpt	0x00ab
 8010328:	4680      	mov	r8, r0
 801032a:	4640      	mov	r0, r8
 801032c:	f7ff fe70 	bl	8010010 <checkerror>
 8010330:	2803      	cmp	r0, #3
 8010332:	dd02      	ble.n	801033a <_get_semihosting_exts+0x46>
 8010334:	1ec3      	subs	r3, r0, #3
 8010336:	42ab      	cmp	r3, r5
 8010338:	dc07      	bgt.n	801034a <_get_semihosting_exts+0x56>
 801033a:	4620      	mov	r0, r4
 801033c:	f7ff ff12 	bl	8010164 <_close>
 8010340:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010344:	b003      	add	sp, #12
 8010346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801034a:	2204      	movs	r2, #4
 801034c:	4620      	mov	r0, r4
 801034e:	eb0d 0102 	add.w	r1, sp, r2
 8010352:	f7ff fe72 	bl	801003a <_read>
 8010356:	2803      	cmp	r0, #3
 8010358:	ddef      	ble.n	801033a <_get_semihosting_exts+0x46>
 801035a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801035e:	2b53      	cmp	r3, #83	@ 0x53
 8010360:	d1eb      	bne.n	801033a <_get_semihosting_exts+0x46>
 8010362:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010366:	2b48      	cmp	r3, #72	@ 0x48
 8010368:	d1e7      	bne.n	801033a <_get_semihosting_exts+0x46>
 801036a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801036e:	2b46      	cmp	r3, #70	@ 0x46
 8010370:	d1e3      	bne.n	801033a <_get_semihosting_exts+0x46>
 8010372:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010376:	2b42      	cmp	r3, #66	@ 0x42
 8010378:	d1df      	bne.n	801033a <_get_semihosting_exts+0x46>
 801037a:	2201      	movs	r2, #1
 801037c:	4639      	mov	r1, r7
 801037e:	4620      	mov	r0, r4
 8010380:	f7ff fe75 	bl	801006e <_swilseek>
 8010384:	2800      	cmp	r0, #0
 8010386:	dbd8      	blt.n	801033a <_get_semihosting_exts+0x46>
 8010388:	462a      	mov	r2, r5
 801038a:	4631      	mov	r1, r6
 801038c:	4620      	mov	r0, r4
 801038e:	f7ff fe54 	bl	801003a <_read>
 8010392:	4605      	mov	r5, r0
 8010394:	4620      	mov	r0, r4
 8010396:	f7ff fee5 	bl	8010164 <_close>
 801039a:	4628      	mov	r0, r5
 801039c:	f7ff fe38 	bl	8010010 <checkerror>
 80103a0:	e7d0      	b.n	8010344 <_get_semihosting_exts+0x50>
 80103a2:	bf00      	nop
 80103a4:	08011e6b 	.word	0x08011e6b

080103a8 <initialise_semihosting_exts>:
 80103a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103aa:	2100      	movs	r1, #0
 80103ac:	2201      	movs	r2, #1
 80103ae:	4d09      	ldr	r5, [pc, #36]	@ (80103d4 <initialise_semihosting_exts+0x2c>)
 80103b0:	a801      	add	r0, sp, #4
 80103b2:	4c09      	ldr	r4, [pc, #36]	@ (80103d8 <initialise_semihosting_exts+0x30>)
 80103b4:	6029      	str	r1, [r5, #0]
 80103b6:	6022      	str	r2, [r4, #0]
 80103b8:	f7ff ff9c 	bl	80102f4 <_get_semihosting_exts>
 80103bc:	2800      	cmp	r0, #0
 80103be:	dd07      	ble.n	80103d0 <initialise_semihosting_exts+0x28>
 80103c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80103c4:	f003 0201 	and.w	r2, r3, #1
 80103c8:	f003 0302 	and.w	r3, r3, #2
 80103cc:	602a      	str	r2, [r5, #0]
 80103ce:	6023      	str	r3, [r4, #0]
 80103d0:	b003      	add	sp, #12
 80103d2:	bd30      	pop	{r4, r5, pc}
 80103d4:	20000278 	.word	0x20000278
 80103d8:	20000274 	.word	0x20000274

080103dc <_has_ext_exit_extended>:
 80103dc:	b510      	push	{r4, lr}
 80103de:	4c04      	ldr	r4, [pc, #16]	@ (80103f0 <_has_ext_exit_extended+0x14>)
 80103e0:	6823      	ldr	r3, [r4, #0]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	da01      	bge.n	80103ea <_has_ext_exit_extended+0xe>
 80103e6:	f7ff ffdf 	bl	80103a8 <initialise_semihosting_exts>
 80103ea:	6820      	ldr	r0, [r4, #0]
 80103ec:	bd10      	pop	{r4, pc}
 80103ee:	bf00      	nop
 80103f0:	20000278 	.word	0x20000278

080103f4 <_has_ext_stdout_stderr>:
 80103f4:	b510      	push	{r4, lr}
 80103f6:	4c04      	ldr	r4, [pc, #16]	@ (8010408 <_has_ext_stdout_stderr+0x14>)
 80103f8:	6823      	ldr	r3, [r4, #0]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	da01      	bge.n	8010402 <_has_ext_stdout_stderr+0xe>
 80103fe:	f7ff ffd3 	bl	80103a8 <initialise_semihosting_exts>
 8010402:	6820      	ldr	r0, [r4, #0]
 8010404:	bd10      	pop	{r4, pc}
 8010406:	bf00      	nop
 8010408:	20000274 	.word	0x20000274

0801040c <initialise_monitor_handles>:
 801040c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010410:	2303      	movs	r3, #3
 8010412:	b085      	sub	sp, #20
 8010414:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 80104c4 <initialise_monitor_handles+0xb8>
 8010418:	2400      	movs	r4, #0
 801041a:	af01      	add	r7, sp, #4
 801041c:	2501      	movs	r5, #1
 801041e:	f8cd 9004 	str.w	r9, [sp, #4]
 8010422:	9303      	str	r3, [sp, #12]
 8010424:	9402      	str	r4, [sp, #8]
 8010426:	4628      	mov	r0, r5
 8010428:	4639      	mov	r1, r7
 801042a:	beab      	bkpt	0x00ab
 801042c:	4605      	mov	r5, r0
 801042e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80104c8 <initialise_monitor_handles+0xbc>
 8010432:	4623      	mov	r3, r4
 8010434:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010438:	4c1f      	ldr	r4, [pc, #124]	@ (80104b8 <initialise_monitor_handles+0xac>)
 801043a:	f8c8 5000 	str.w	r5, [r8]
 801043e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8010442:	3301      	adds	r3, #1
 8010444:	2b14      	cmp	r3, #20
 8010446:	d1fa      	bne.n	801043e <initialise_monitor_handles+0x32>
 8010448:	4d1c      	ldr	r5, [pc, #112]	@ (80104bc <initialise_monitor_handles+0xb0>)
 801044a:	f7ff ffd3 	bl	80103f4 <_has_ext_stdout_stderr>
 801044e:	b1d0      	cbz	r0, 8010486 <initialise_monitor_handles+0x7a>
 8010450:	f04f 0a03 	mov.w	sl, #3
 8010454:	2304      	movs	r3, #4
 8010456:	f8cd 9004 	str.w	r9, [sp, #4]
 801045a:	2601      	movs	r6, #1
 801045c:	f8cd a00c 	str.w	sl, [sp, #12]
 8010460:	9302      	str	r3, [sp, #8]
 8010462:	4630      	mov	r0, r6
 8010464:	4639      	mov	r1, r7
 8010466:	beab      	bkpt	0x00ab
 8010468:	4683      	mov	fp, r0
 801046a:	4b15      	ldr	r3, [pc, #84]	@ (80104c0 <initialise_monitor_handles+0xb4>)
 801046c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010470:	f8c3 b000 	str.w	fp, [r3]
 8010474:	2308      	movs	r3, #8
 8010476:	f8cd a00c 	str.w	sl, [sp, #12]
 801047a:	9302      	str	r3, [sp, #8]
 801047c:	4630      	mov	r0, r6
 801047e:	4639      	mov	r1, r7
 8010480:	beab      	bkpt	0x00ab
 8010482:	4606      	mov	r6, r0
 8010484:	602e      	str	r6, [r5, #0]
 8010486:	682b      	ldr	r3, [r5, #0]
 8010488:	2600      	movs	r6, #0
 801048a:	3301      	adds	r3, #1
 801048c:	6066      	str	r6, [r4, #4]
 801048e:	bf02      	ittt	eq
 8010490:	4b0b      	ldreq	r3, [pc, #44]	@ (80104c0 <initialise_monitor_handles+0xb4>)
 8010492:	681b      	ldreq	r3, [r3, #0]
 8010494:	602b      	streq	r3, [r5, #0]
 8010496:	f8d8 3000 	ldr.w	r3, [r8]
 801049a:	6023      	str	r3, [r4, #0]
 801049c:	f7ff ffaa 	bl	80103f4 <_has_ext_stdout_stderr>
 80104a0:	b130      	cbz	r0, 80104b0 <initialise_monitor_handles+0xa4>
 80104a2:	4b07      	ldr	r3, [pc, #28]	@ (80104c0 <initialise_monitor_handles+0xb4>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80104aa:	682b      	ldr	r3, [r5, #0]
 80104ac:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80104b0:	b005      	add	sp, #20
 80104b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104b6:	bf00      	nop
 80104b8:	200010cc 	.word	0x200010cc
 80104bc:	200010c0 	.word	0x200010c0
 80104c0:	200010c4 	.word	0x200010c4
 80104c4:	08011e81 	.word	0x08011e81
 80104c8:	200010c8 	.word	0x200010c8

080104cc <_isatty>:
 80104cc:	b570      	push	{r4, r5, r6, lr}
 80104ce:	f7ff fd77 	bl	800ffc0 <findslot>
 80104d2:	2409      	movs	r4, #9
 80104d4:	4605      	mov	r5, r0
 80104d6:	b920      	cbnz	r0, 80104e2 <_isatty+0x16>
 80104d8:	f7fd fda2 	bl	800e020 <__errno>
 80104dc:	6004      	str	r4, [r0, #0]
 80104de:	2000      	movs	r0, #0
 80104e0:	bd70      	pop	{r4, r5, r6, pc}
 80104e2:	4620      	mov	r0, r4
 80104e4:	4629      	mov	r1, r5
 80104e6:	beab      	bkpt	0x00ab
 80104e8:	4604      	mov	r4, r0
 80104ea:	2c01      	cmp	r4, #1
 80104ec:	4620      	mov	r0, r4
 80104ee:	d0f7      	beq.n	80104e0 <_isatty+0x14>
 80104f0:	f7fd fd96 	bl	800e020 <__errno>
 80104f4:	2513      	movs	r5, #19
 80104f6:	4604      	mov	r4, r0
 80104f8:	2600      	movs	r6, #0
 80104fa:	4628      	mov	r0, r5
 80104fc:	4631      	mov	r1, r6
 80104fe:	beab      	bkpt	0x00ab
 8010500:	4605      	mov	r5, r0
 8010502:	6025      	str	r5, [r4, #0]
 8010504:	e7eb      	b.n	80104de <_isatty+0x12>
	...

08010508 <pow>:
 8010508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801050a:	ec55 4b11 	vmov	r4, r5, d1
 801050e:	ed2d 8b02 	vpush	{d8}
 8010512:	eeb0 8a40 	vmov.f32	s16, s0
 8010516:	eef0 8a60 	vmov.f32	s17, s1
 801051a:	f000 f97d 	bl	8010818 <__ieee754_pow>
 801051e:	4622      	mov	r2, r4
 8010520:	462b      	mov	r3, r5
 8010522:	4620      	mov	r0, r4
 8010524:	4629      	mov	r1, r5
 8010526:	ec57 6b10 	vmov	r6, r7, d0
 801052a:	f7f0 fb03 	bl	8000b34 <__aeabi_dcmpun>
 801052e:	2800      	cmp	r0, #0
 8010530:	d13b      	bne.n	80105aa <pow+0xa2>
 8010532:	2200      	movs	r2, #0
 8010534:	2300      	movs	r3, #0
 8010536:	ec51 0b18 	vmov	r0, r1, d8
 801053a:	f7f0 fac9 	bl	8000ad0 <__aeabi_dcmpeq>
 801053e:	b1b8      	cbz	r0, 8010570 <pow+0x68>
 8010540:	2200      	movs	r2, #0
 8010542:	2300      	movs	r3, #0
 8010544:	4620      	mov	r0, r4
 8010546:	4629      	mov	r1, r5
 8010548:	f7f0 fac2 	bl	8000ad0 <__aeabi_dcmpeq>
 801054c:	2800      	cmp	r0, #0
 801054e:	d146      	bne.n	80105de <pow+0xd6>
 8010550:	ec45 4b10 	vmov	d0, r4, r5
 8010554:	f000 f874 	bl	8010640 <finite>
 8010558:	b338      	cbz	r0, 80105aa <pow+0xa2>
 801055a:	2200      	movs	r2, #0
 801055c:	2300      	movs	r3, #0
 801055e:	4620      	mov	r0, r4
 8010560:	4629      	mov	r1, r5
 8010562:	f7f0 fabf 	bl	8000ae4 <__aeabi_dcmplt>
 8010566:	b300      	cbz	r0, 80105aa <pow+0xa2>
 8010568:	f7fd fd5a 	bl	800e020 <__errno>
 801056c:	2322      	movs	r3, #34	@ 0x22
 801056e:	e01b      	b.n	80105a8 <pow+0xa0>
 8010570:	ec47 6b10 	vmov	d0, r6, r7
 8010574:	f000 f864 	bl	8010640 <finite>
 8010578:	b9e0      	cbnz	r0, 80105b4 <pow+0xac>
 801057a:	eeb0 0a48 	vmov.f32	s0, s16
 801057e:	eef0 0a68 	vmov.f32	s1, s17
 8010582:	f000 f85d 	bl	8010640 <finite>
 8010586:	b1a8      	cbz	r0, 80105b4 <pow+0xac>
 8010588:	ec45 4b10 	vmov	d0, r4, r5
 801058c:	f000 f858 	bl	8010640 <finite>
 8010590:	b180      	cbz	r0, 80105b4 <pow+0xac>
 8010592:	4632      	mov	r2, r6
 8010594:	463b      	mov	r3, r7
 8010596:	4630      	mov	r0, r6
 8010598:	4639      	mov	r1, r7
 801059a:	f7f0 facb 	bl	8000b34 <__aeabi_dcmpun>
 801059e:	2800      	cmp	r0, #0
 80105a0:	d0e2      	beq.n	8010568 <pow+0x60>
 80105a2:	f7fd fd3d 	bl	800e020 <__errno>
 80105a6:	2321      	movs	r3, #33	@ 0x21
 80105a8:	6003      	str	r3, [r0, #0]
 80105aa:	ecbd 8b02 	vpop	{d8}
 80105ae:	ec47 6b10 	vmov	d0, r6, r7
 80105b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105b4:	2200      	movs	r2, #0
 80105b6:	2300      	movs	r3, #0
 80105b8:	4630      	mov	r0, r6
 80105ba:	4639      	mov	r1, r7
 80105bc:	f7f0 fa88 	bl	8000ad0 <__aeabi_dcmpeq>
 80105c0:	2800      	cmp	r0, #0
 80105c2:	d0f2      	beq.n	80105aa <pow+0xa2>
 80105c4:	eeb0 0a48 	vmov.f32	s0, s16
 80105c8:	eef0 0a68 	vmov.f32	s1, s17
 80105cc:	f000 f838 	bl	8010640 <finite>
 80105d0:	2800      	cmp	r0, #0
 80105d2:	d0ea      	beq.n	80105aa <pow+0xa2>
 80105d4:	ec45 4b10 	vmov	d0, r4, r5
 80105d8:	f000 f832 	bl	8010640 <finite>
 80105dc:	e7c3      	b.n	8010566 <pow+0x5e>
 80105de:	2600      	movs	r6, #0
 80105e0:	4f00      	ldr	r7, [pc, #0]	@ (80105e4 <pow+0xdc>)
 80105e2:	e7e2      	b.n	80105aa <pow+0xa2>
 80105e4:	3ff00000 	.word	0x3ff00000

080105e8 <sqrt>:
 80105e8:	b538      	push	{r3, r4, r5, lr}
 80105ea:	ec55 4b10 	vmov	r4, r5, d0
 80105ee:	ed2d 8b02 	vpush	{d8}
 80105f2:	f000 f831 	bl	8010658 <__ieee754_sqrt>
 80105f6:	4622      	mov	r2, r4
 80105f8:	462b      	mov	r3, r5
 80105fa:	4620      	mov	r0, r4
 80105fc:	4629      	mov	r1, r5
 80105fe:	eeb0 8a40 	vmov.f32	s16, s0
 8010602:	eef0 8a60 	vmov.f32	s17, s1
 8010606:	f7f0 fa95 	bl	8000b34 <__aeabi_dcmpun>
 801060a:	b990      	cbnz	r0, 8010632 <sqrt+0x4a>
 801060c:	2200      	movs	r2, #0
 801060e:	2300      	movs	r3, #0
 8010610:	4620      	mov	r0, r4
 8010612:	4629      	mov	r1, r5
 8010614:	f7f0 fa66 	bl	8000ae4 <__aeabi_dcmplt>
 8010618:	b158      	cbz	r0, 8010632 <sqrt+0x4a>
 801061a:	f7fd fd01 	bl	800e020 <__errno>
 801061e:	2321      	movs	r3, #33	@ 0x21
 8010620:	2200      	movs	r2, #0
 8010622:	6003      	str	r3, [r0, #0]
 8010624:	2300      	movs	r3, #0
 8010626:	4610      	mov	r0, r2
 8010628:	4619      	mov	r1, r3
 801062a:	f7f0 f913 	bl	8000854 <__aeabi_ddiv>
 801062e:	ec41 0b18 	vmov	d8, r0, r1
 8010632:	eeb0 0a48 	vmov.f32	s0, s16
 8010636:	eef0 0a68 	vmov.f32	s1, s17
 801063a:	ecbd 8b02 	vpop	{d8}
 801063e:	bd38      	pop	{r3, r4, r5, pc}

08010640 <finite>:
 8010640:	b082      	sub	sp, #8
 8010642:	ed8d 0b00 	vstr	d0, [sp]
 8010646:	9801      	ldr	r0, [sp, #4]
 8010648:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801064c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8010650:	0fc0      	lsrs	r0, r0, #31
 8010652:	b002      	add	sp, #8
 8010654:	4770      	bx	lr
	...

08010658 <__ieee754_sqrt>:
 8010658:	4a6b      	ldr	r2, [pc, #428]	@ (8010808 <__ieee754_sqrt+0x1b0>)
 801065a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801065e:	ec55 4b10 	vmov	r4, r5, d0
 8010662:	43aa      	bics	r2, r5
 8010664:	462b      	mov	r3, r5
 8010666:	4621      	mov	r1, r4
 8010668:	d110      	bne.n	801068c <__ieee754_sqrt+0x34>
 801066a:	4622      	mov	r2, r4
 801066c:	4620      	mov	r0, r4
 801066e:	4629      	mov	r1, r5
 8010670:	f7ef ffc6 	bl	8000600 <__aeabi_dmul>
 8010674:	4602      	mov	r2, r0
 8010676:	460b      	mov	r3, r1
 8010678:	4620      	mov	r0, r4
 801067a:	4629      	mov	r1, r5
 801067c:	f7ef fe0a 	bl	8000294 <__adddf3>
 8010680:	4604      	mov	r4, r0
 8010682:	460d      	mov	r5, r1
 8010684:	ec45 4b10 	vmov	d0, r4, r5
 8010688:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801068c:	2d00      	cmp	r5, #0
 801068e:	dc0e      	bgt.n	80106ae <__ieee754_sqrt+0x56>
 8010690:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010694:	4322      	orrs	r2, r4
 8010696:	d0f5      	beq.n	8010684 <__ieee754_sqrt+0x2c>
 8010698:	b19d      	cbz	r5, 80106c2 <__ieee754_sqrt+0x6a>
 801069a:	4622      	mov	r2, r4
 801069c:	4620      	mov	r0, r4
 801069e:	4629      	mov	r1, r5
 80106a0:	f7ef fdf6 	bl	8000290 <__aeabi_dsub>
 80106a4:	4602      	mov	r2, r0
 80106a6:	460b      	mov	r3, r1
 80106a8:	f7f0 f8d4 	bl	8000854 <__aeabi_ddiv>
 80106ac:	e7e8      	b.n	8010680 <__ieee754_sqrt+0x28>
 80106ae:	152a      	asrs	r2, r5, #20
 80106b0:	d115      	bne.n	80106de <__ieee754_sqrt+0x86>
 80106b2:	2000      	movs	r0, #0
 80106b4:	e009      	b.n	80106ca <__ieee754_sqrt+0x72>
 80106b6:	0acb      	lsrs	r3, r1, #11
 80106b8:	3a15      	subs	r2, #21
 80106ba:	0549      	lsls	r1, r1, #21
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d0fa      	beq.n	80106b6 <__ieee754_sqrt+0x5e>
 80106c0:	e7f7      	b.n	80106b2 <__ieee754_sqrt+0x5a>
 80106c2:	462a      	mov	r2, r5
 80106c4:	e7fa      	b.n	80106bc <__ieee754_sqrt+0x64>
 80106c6:	005b      	lsls	r3, r3, #1
 80106c8:	3001      	adds	r0, #1
 80106ca:	02dc      	lsls	r4, r3, #11
 80106cc:	d5fb      	bpl.n	80106c6 <__ieee754_sqrt+0x6e>
 80106ce:	1e44      	subs	r4, r0, #1
 80106d0:	1b12      	subs	r2, r2, r4
 80106d2:	f1c0 0420 	rsb	r4, r0, #32
 80106d6:	fa21 f404 	lsr.w	r4, r1, r4
 80106da:	4081      	lsls	r1, r0
 80106dc:	4323      	orrs	r3, r4
 80106de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106e2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80106e6:	07d2      	lsls	r2, r2, #31
 80106e8:	f04f 0600 	mov.w	r6, #0
 80106ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80106f0:	ea4f 0565 	mov.w	r5, r5, asr #1
 80106f4:	f04f 0016 	mov.w	r0, #22
 80106f8:	4632      	mov	r2, r6
 80106fa:	bf58      	it	pl
 80106fc:	005b      	lslpl	r3, r3, #1
 80106fe:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010702:	bf5c      	itt	pl
 8010704:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010708:	0049      	lslpl	r1, r1, #1
 801070a:	005b      	lsls	r3, r3, #1
 801070c:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010710:	0049      	lsls	r1, r1, #1
 8010712:	1917      	adds	r7, r2, r4
 8010714:	429f      	cmp	r7, r3
 8010716:	bfde      	ittt	le
 8010718:	193a      	addle	r2, r7, r4
 801071a:	1bdb      	suble	r3, r3, r7
 801071c:	1936      	addle	r6, r6, r4
 801071e:	0fcf      	lsrs	r7, r1, #31
 8010720:	3801      	subs	r0, #1
 8010722:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010726:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801072a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801072e:	d1f0      	bne.n	8010712 <__ieee754_sqrt+0xba>
 8010730:	4604      	mov	r4, r0
 8010732:	2720      	movs	r7, #32
 8010734:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010738:	429a      	cmp	r2, r3
 801073a:	eb00 0e0c 	add.w	lr, r0, ip
 801073e:	db02      	blt.n	8010746 <__ieee754_sqrt+0xee>
 8010740:	d113      	bne.n	801076a <__ieee754_sqrt+0x112>
 8010742:	458e      	cmp	lr, r1
 8010744:	d811      	bhi.n	801076a <__ieee754_sqrt+0x112>
 8010746:	f1be 0f00 	cmp.w	lr, #0
 801074a:	eb0e 000c 	add.w	r0, lr, ip
 801074e:	da43      	bge.n	80107d8 <__ieee754_sqrt+0x180>
 8010750:	2800      	cmp	r0, #0
 8010752:	db41      	blt.n	80107d8 <__ieee754_sqrt+0x180>
 8010754:	f102 0801 	add.w	r8, r2, #1
 8010758:	1a9b      	subs	r3, r3, r2
 801075a:	458e      	cmp	lr, r1
 801075c:	4464      	add	r4, ip
 801075e:	eba1 010e 	sub.w	r1, r1, lr
 8010762:	bf88      	it	hi
 8010764:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8010768:	4642      	mov	r2, r8
 801076a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801076e:	3f01      	subs	r7, #1
 8010770:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010774:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010778:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801077c:	d1dc      	bne.n	8010738 <__ieee754_sqrt+0xe0>
 801077e:	4319      	orrs	r1, r3
 8010780:	d01b      	beq.n	80107ba <__ieee754_sqrt+0x162>
 8010782:	f8df a088 	ldr.w	sl, [pc, #136]	@ 801080c <__ieee754_sqrt+0x1b4>
 8010786:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8010810 <__ieee754_sqrt+0x1b8>
 801078a:	e9da 0100 	ldrd	r0, r1, [sl]
 801078e:	e9db 2300 	ldrd	r2, r3, [fp]
 8010792:	e9da 8900 	ldrd	r8, r9, [sl]
 8010796:	f7ef fd7b 	bl	8000290 <__aeabi_dsub>
 801079a:	4602      	mov	r2, r0
 801079c:	460b      	mov	r3, r1
 801079e:	4640      	mov	r0, r8
 80107a0:	4649      	mov	r1, r9
 80107a2:	f7f0 f9a9 	bl	8000af8 <__aeabi_dcmple>
 80107a6:	b140      	cbz	r0, 80107ba <__ieee754_sqrt+0x162>
 80107a8:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80107ac:	e9da 0100 	ldrd	r0, r1, [sl]
 80107b0:	e9db 2300 	ldrd	r2, r3, [fp]
 80107b4:	d112      	bne.n	80107dc <__ieee754_sqrt+0x184>
 80107b6:	3601      	adds	r6, #1
 80107b8:	463c      	mov	r4, r7
 80107ba:	1072      	asrs	r2, r6, #1
 80107bc:	07f1      	lsls	r1, r6, #31
 80107be:	ea4f 0354 	mov.w	r3, r4, lsr #1
 80107c2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80107c6:	bf48      	it	mi
 80107c8:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80107cc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80107d0:	4618      	mov	r0, r3
 80107d2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80107d6:	e753      	b.n	8010680 <__ieee754_sqrt+0x28>
 80107d8:	4690      	mov	r8, r2
 80107da:	e7bd      	b.n	8010758 <__ieee754_sqrt+0x100>
 80107dc:	e9da 8900 	ldrd	r8, r9, [sl]
 80107e0:	f7ef fd58 	bl	8000294 <__adddf3>
 80107e4:	4602      	mov	r2, r0
 80107e6:	460b      	mov	r3, r1
 80107e8:	4640      	mov	r0, r8
 80107ea:	4649      	mov	r1, r9
 80107ec:	f7f0 f97a 	bl	8000ae4 <__aeabi_dcmplt>
 80107f0:	b128      	cbz	r0, 80107fe <__ieee754_sqrt+0x1a6>
 80107f2:	1ca0      	adds	r0, r4, #2
 80107f4:	f104 0402 	add.w	r4, r4, #2
 80107f8:	bf08      	it	eq
 80107fa:	3601      	addeq	r6, #1
 80107fc:	e7dd      	b.n	80107ba <__ieee754_sqrt+0x162>
 80107fe:	1c63      	adds	r3, r4, #1
 8010800:	f023 0401 	bic.w	r4, r3, #1
 8010804:	e7d9      	b.n	80107ba <__ieee754_sqrt+0x162>
 8010806:	bf00      	nop
 8010808:	7ff00000 	.word	0x7ff00000
 801080c:	20000288 	.word	0x20000288
 8010810:	20000280 	.word	0x20000280
 8010814:	00000000 	.word	0x00000000

08010818 <__ieee754_pow>:
 8010818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801081c:	b091      	sub	sp, #68	@ 0x44
 801081e:	ed8d 1b00 	vstr	d1, [sp]
 8010822:	e9dd 1900 	ldrd	r1, r9, [sp]
 8010826:	ec57 6b10 	vmov	r6, r7, d0
 801082a:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801082e:	ea5a 0001 	orrs.w	r0, sl, r1
 8010832:	d113      	bne.n	801085c <__ieee754_pow+0x44>
 8010834:	19b3      	adds	r3, r6, r6
 8010836:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801083a:	4152      	adcs	r2, r2
 801083c:	4298      	cmp	r0, r3
 801083e:	4b96      	ldr	r3, [pc, #600]	@ (8010a98 <__ieee754_pow+0x280>)
 8010840:	4193      	sbcs	r3, r2
 8010842:	f080 84e7 	bcs.w	8011214 <__ieee754_pow+0x9fc>
 8010846:	4630      	mov	r0, r6
 8010848:	4639      	mov	r1, r7
 801084a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801084e:	f7ef fd21 	bl	8000294 <__adddf3>
 8010852:	ec41 0b10 	vmov	d0, r0, r1
 8010856:	b011      	add	sp, #68	@ 0x44
 8010858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801085c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010860:	4a8e      	ldr	r2, [pc, #568]	@ (8010a9c <__ieee754_pow+0x284>)
 8010862:	463d      	mov	r5, r7
 8010864:	4633      	mov	r3, r6
 8010866:	4590      	cmp	r8, r2
 8010868:	d806      	bhi.n	8010878 <__ieee754_pow+0x60>
 801086a:	d101      	bne.n	8010870 <__ieee754_pow+0x58>
 801086c:	2e00      	cmp	r6, #0
 801086e:	d1ea      	bne.n	8010846 <__ieee754_pow+0x2e>
 8010870:	4592      	cmp	sl, r2
 8010872:	d801      	bhi.n	8010878 <__ieee754_pow+0x60>
 8010874:	d10e      	bne.n	8010894 <__ieee754_pow+0x7c>
 8010876:	b169      	cbz	r1, 8010894 <__ieee754_pow+0x7c>
 8010878:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801087c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8010880:	431d      	orrs	r5, r3
 8010882:	d1e0      	bne.n	8010846 <__ieee754_pow+0x2e>
 8010884:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010888:	18db      	adds	r3, r3, r3
 801088a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801088e:	4152      	adcs	r2, r2
 8010890:	429d      	cmp	r5, r3
 8010892:	e7d4      	b.n	801083e <__ieee754_pow+0x26>
 8010894:	2d00      	cmp	r5, #0
 8010896:	46c3      	mov	fp, r8
 8010898:	da3a      	bge.n	8010910 <__ieee754_pow+0xf8>
 801089a:	4a81      	ldr	r2, [pc, #516]	@ (8010aa0 <__ieee754_pow+0x288>)
 801089c:	4592      	cmp	sl, r2
 801089e:	d84d      	bhi.n	801093c <__ieee754_pow+0x124>
 80108a0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80108a4:	4592      	cmp	sl, r2
 80108a6:	f240 84c4 	bls.w	8011232 <__ieee754_pow+0xa1a>
 80108aa:	ea4f 522a 	mov.w	r2, sl, asr #20
 80108ae:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80108b2:	2a14      	cmp	r2, #20
 80108b4:	dd0f      	ble.n	80108d6 <__ieee754_pow+0xbe>
 80108b6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80108ba:	fa21 f402 	lsr.w	r4, r1, r2
 80108be:	fa04 f202 	lsl.w	r2, r4, r2
 80108c2:	428a      	cmp	r2, r1
 80108c4:	f040 84b5 	bne.w	8011232 <__ieee754_pow+0xa1a>
 80108c8:	f004 0401 	and.w	r4, r4, #1
 80108cc:	f1c4 0402 	rsb	r4, r4, #2
 80108d0:	2900      	cmp	r1, #0
 80108d2:	d158      	bne.n	8010986 <__ieee754_pow+0x16e>
 80108d4:	e00e      	b.n	80108f4 <__ieee754_pow+0xdc>
 80108d6:	2900      	cmp	r1, #0
 80108d8:	d154      	bne.n	8010984 <__ieee754_pow+0x16c>
 80108da:	f1c2 0214 	rsb	r2, r2, #20
 80108de:	fa4a f402 	asr.w	r4, sl, r2
 80108e2:	fa04 f202 	lsl.w	r2, r4, r2
 80108e6:	4552      	cmp	r2, sl
 80108e8:	f040 84a0 	bne.w	801122c <__ieee754_pow+0xa14>
 80108ec:	f004 0401 	and.w	r4, r4, #1
 80108f0:	f1c4 0402 	rsb	r4, r4, #2
 80108f4:	4a6b      	ldr	r2, [pc, #428]	@ (8010aa4 <__ieee754_pow+0x28c>)
 80108f6:	4592      	cmp	sl, r2
 80108f8:	d12e      	bne.n	8010958 <__ieee754_pow+0x140>
 80108fa:	f1b9 0f00 	cmp.w	r9, #0
 80108fe:	f280 8491 	bge.w	8011224 <__ieee754_pow+0xa0c>
 8010902:	4632      	mov	r2, r6
 8010904:	463b      	mov	r3, r7
 8010906:	2000      	movs	r0, #0
 8010908:	4966      	ldr	r1, [pc, #408]	@ (8010aa4 <__ieee754_pow+0x28c>)
 801090a:	f7ef ffa3 	bl	8000854 <__aeabi_ddiv>
 801090e:	e7a0      	b.n	8010852 <__ieee754_pow+0x3a>
 8010910:	2400      	movs	r4, #0
 8010912:	bbc1      	cbnz	r1, 8010986 <__ieee754_pow+0x16e>
 8010914:	4a61      	ldr	r2, [pc, #388]	@ (8010a9c <__ieee754_pow+0x284>)
 8010916:	4592      	cmp	sl, r2
 8010918:	d1ec      	bne.n	80108f4 <__ieee754_pow+0xdc>
 801091a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801091e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8010922:	431a      	orrs	r2, r3
 8010924:	f000 8476 	beq.w	8011214 <__ieee754_pow+0x9fc>
 8010928:	4b5f      	ldr	r3, [pc, #380]	@ (8010aa8 <__ieee754_pow+0x290>)
 801092a:	4598      	cmp	r8, r3
 801092c:	d908      	bls.n	8010940 <__ieee754_pow+0x128>
 801092e:	f1b9 0f00 	cmp.w	r9, #0
 8010932:	f2c0 8473 	blt.w	801121c <__ieee754_pow+0xa04>
 8010936:	e9dd 0100 	ldrd	r0, r1, [sp]
 801093a:	e78a      	b.n	8010852 <__ieee754_pow+0x3a>
 801093c:	2402      	movs	r4, #2
 801093e:	e7e8      	b.n	8010912 <__ieee754_pow+0xfa>
 8010940:	f1b9 0f00 	cmp.w	r9, #0
 8010944:	f04f 0000 	mov.w	r0, #0
 8010948:	f04f 0100 	mov.w	r1, #0
 801094c:	da81      	bge.n	8010852 <__ieee754_pow+0x3a>
 801094e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010952:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010956:	e77c      	b.n	8010852 <__ieee754_pow+0x3a>
 8010958:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801095c:	d106      	bne.n	801096c <__ieee754_pow+0x154>
 801095e:	4632      	mov	r2, r6
 8010960:	463b      	mov	r3, r7
 8010962:	4630      	mov	r0, r6
 8010964:	4639      	mov	r1, r7
 8010966:	f7ef fe4b 	bl	8000600 <__aeabi_dmul>
 801096a:	e772      	b.n	8010852 <__ieee754_pow+0x3a>
 801096c:	4a4f      	ldr	r2, [pc, #316]	@ (8010aac <__ieee754_pow+0x294>)
 801096e:	4591      	cmp	r9, r2
 8010970:	d109      	bne.n	8010986 <__ieee754_pow+0x16e>
 8010972:	2d00      	cmp	r5, #0
 8010974:	db07      	blt.n	8010986 <__ieee754_pow+0x16e>
 8010976:	ec47 6b10 	vmov	d0, r6, r7
 801097a:	b011      	add	sp, #68	@ 0x44
 801097c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010980:	f7ff be6a 	b.w	8010658 <__ieee754_sqrt>
 8010984:	2400      	movs	r4, #0
 8010986:	9302      	str	r3, [sp, #8]
 8010988:	ec47 6b10 	vmov	d0, r6, r7
 801098c:	f000 fcc0 	bl	8011310 <fabs>
 8010990:	9b02      	ldr	r3, [sp, #8]
 8010992:	ec51 0b10 	vmov	r0, r1, d0
 8010996:	bb53      	cbnz	r3, 80109ee <__ieee754_pow+0x1d6>
 8010998:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801099c:	4b41      	ldr	r3, [pc, #260]	@ (8010aa4 <__ieee754_pow+0x28c>)
 801099e:	429a      	cmp	r2, r3
 80109a0:	d002      	beq.n	80109a8 <__ieee754_pow+0x190>
 80109a2:	f1b8 0f00 	cmp.w	r8, #0
 80109a6:	d122      	bne.n	80109ee <__ieee754_pow+0x1d6>
 80109a8:	f1b9 0f00 	cmp.w	r9, #0
 80109ac:	da05      	bge.n	80109ba <__ieee754_pow+0x1a2>
 80109ae:	4602      	mov	r2, r0
 80109b0:	460b      	mov	r3, r1
 80109b2:	2000      	movs	r0, #0
 80109b4:	493b      	ldr	r1, [pc, #236]	@ (8010aa4 <__ieee754_pow+0x28c>)
 80109b6:	f7ef ff4d 	bl	8000854 <__aeabi_ddiv>
 80109ba:	2d00      	cmp	r5, #0
 80109bc:	f6bf af49 	bge.w	8010852 <__ieee754_pow+0x3a>
 80109c0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80109c4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80109c8:	ea58 0804 	orrs.w	r8, r8, r4
 80109cc:	d108      	bne.n	80109e0 <__ieee754_pow+0x1c8>
 80109ce:	4602      	mov	r2, r0
 80109d0:	460b      	mov	r3, r1
 80109d2:	4610      	mov	r0, r2
 80109d4:	4619      	mov	r1, r3
 80109d6:	f7ef fc5b 	bl	8000290 <__aeabi_dsub>
 80109da:	4602      	mov	r2, r0
 80109dc:	460b      	mov	r3, r1
 80109de:	e794      	b.n	801090a <__ieee754_pow+0xf2>
 80109e0:	2c01      	cmp	r4, #1
 80109e2:	f47f af36 	bne.w	8010852 <__ieee754_pow+0x3a>
 80109e6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80109ea:	4619      	mov	r1, r3
 80109ec:	e731      	b.n	8010852 <__ieee754_pow+0x3a>
 80109ee:	0feb      	lsrs	r3, r5, #31
 80109f0:	3b01      	subs	r3, #1
 80109f2:	ea53 0204 	orrs.w	r2, r3, r4
 80109f6:	d102      	bne.n	80109fe <__ieee754_pow+0x1e6>
 80109f8:	4632      	mov	r2, r6
 80109fa:	463b      	mov	r3, r7
 80109fc:	e7e9      	b.n	80109d2 <__ieee754_pow+0x1ba>
 80109fe:	3c01      	subs	r4, #1
 8010a00:	431c      	orrs	r4, r3
 8010a02:	d016      	beq.n	8010a32 <__ieee754_pow+0x21a>
 8010a04:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8010a88 <__ieee754_pow+0x270>
 8010a08:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8010a0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010a10:	f240 810e 	bls.w	8010c30 <__ieee754_pow+0x418>
 8010a14:	4b26      	ldr	r3, [pc, #152]	@ (8010ab0 <__ieee754_pow+0x298>)
 8010a16:	459a      	cmp	sl, r3
 8010a18:	4b23      	ldr	r3, [pc, #140]	@ (8010aa8 <__ieee754_pow+0x290>)
 8010a1a:	d916      	bls.n	8010a4a <__ieee754_pow+0x232>
 8010a1c:	4598      	cmp	r8, r3
 8010a1e:	d80b      	bhi.n	8010a38 <__ieee754_pow+0x220>
 8010a20:	f1b9 0f00 	cmp.w	r9, #0
 8010a24:	da0b      	bge.n	8010a3e <__ieee754_pow+0x226>
 8010a26:	2000      	movs	r0, #0
 8010a28:	b011      	add	sp, #68	@ 0x44
 8010a2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a2e:	f000 bc67 	b.w	8011300 <__math_oflow>
 8010a32:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8010a90 <__ieee754_pow+0x278>
 8010a36:	e7e7      	b.n	8010a08 <__ieee754_pow+0x1f0>
 8010a38:	f1b9 0f00 	cmp.w	r9, #0
 8010a3c:	dcf3      	bgt.n	8010a26 <__ieee754_pow+0x20e>
 8010a3e:	2000      	movs	r0, #0
 8010a40:	b011      	add	sp, #68	@ 0x44
 8010a42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a46:	f000 bc53 	b.w	80112f0 <__math_uflow>
 8010a4a:	4598      	cmp	r8, r3
 8010a4c:	d20c      	bcs.n	8010a68 <__ieee754_pow+0x250>
 8010a4e:	2200      	movs	r2, #0
 8010a50:	2300      	movs	r3, #0
 8010a52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a56:	f7f0 f845 	bl	8000ae4 <__aeabi_dcmplt>
 8010a5a:	3800      	subs	r0, #0
 8010a5c:	bf18      	it	ne
 8010a5e:	2001      	movne	r0, #1
 8010a60:	f1b9 0f00 	cmp.w	r9, #0
 8010a64:	daec      	bge.n	8010a40 <__ieee754_pow+0x228>
 8010a66:	e7df      	b.n	8010a28 <__ieee754_pow+0x210>
 8010a68:	4b0e      	ldr	r3, [pc, #56]	@ (8010aa4 <__ieee754_pow+0x28c>)
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	4598      	cmp	r8, r3
 8010a6e:	d921      	bls.n	8010ab4 <__ieee754_pow+0x29c>
 8010a70:	2300      	movs	r3, #0
 8010a72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a76:	f7f0 f835 	bl	8000ae4 <__aeabi_dcmplt>
 8010a7a:	3800      	subs	r0, #0
 8010a7c:	bf18      	it	ne
 8010a7e:	2001      	movne	r0, #1
 8010a80:	f1b9 0f00 	cmp.w	r9, #0
 8010a84:	dcd0      	bgt.n	8010a28 <__ieee754_pow+0x210>
 8010a86:	e7db      	b.n	8010a40 <__ieee754_pow+0x228>
 8010a88:	00000000 	.word	0x00000000
 8010a8c:	3ff00000 	.word	0x3ff00000
 8010a90:	00000000 	.word	0x00000000
 8010a94:	bff00000 	.word	0xbff00000
 8010a98:	fff00000 	.word	0xfff00000
 8010a9c:	7ff00000 	.word	0x7ff00000
 8010aa0:	433fffff 	.word	0x433fffff
 8010aa4:	3ff00000 	.word	0x3ff00000
 8010aa8:	3fefffff 	.word	0x3fefffff
 8010aac:	3fe00000 	.word	0x3fe00000
 8010ab0:	43f00000 	.word	0x43f00000
 8010ab4:	4b5a      	ldr	r3, [pc, #360]	@ (8010c20 <__ieee754_pow+0x408>)
 8010ab6:	f7ef fbeb 	bl	8000290 <__aeabi_dsub>
 8010aba:	4604      	mov	r4, r0
 8010abc:	460d      	mov	r5, r1
 8010abe:	a350      	add	r3, pc, #320	@ (adr r3, 8010c00 <__ieee754_pow+0x3e8>)
 8010ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac4:	f7ef fd9c 	bl	8000600 <__aeabi_dmul>
 8010ac8:	4606      	mov	r6, r0
 8010aca:	460f      	mov	r7, r1
 8010acc:	4620      	mov	r0, r4
 8010ace:	4629      	mov	r1, r5
 8010ad0:	a34d      	add	r3, pc, #308	@ (adr r3, 8010c08 <__ieee754_pow+0x3f0>)
 8010ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad6:	f7ef fd93 	bl	8000600 <__aeabi_dmul>
 8010ada:	2200      	movs	r2, #0
 8010adc:	4682      	mov	sl, r0
 8010ade:	468b      	mov	fp, r1
 8010ae0:	4b50      	ldr	r3, [pc, #320]	@ (8010c24 <__ieee754_pow+0x40c>)
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	4629      	mov	r1, r5
 8010ae6:	f7ef fd8b 	bl	8000600 <__aeabi_dmul>
 8010aea:	4602      	mov	r2, r0
 8010aec:	460b      	mov	r3, r1
 8010aee:	a148      	add	r1, pc, #288	@ (adr r1, 8010c10 <__ieee754_pow+0x3f8>)
 8010af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010af4:	f7ef fbcc 	bl	8000290 <__aeabi_dsub>
 8010af8:	4622      	mov	r2, r4
 8010afa:	462b      	mov	r3, r5
 8010afc:	f7ef fd80 	bl	8000600 <__aeabi_dmul>
 8010b00:	4602      	mov	r2, r0
 8010b02:	460b      	mov	r3, r1
 8010b04:	2000      	movs	r0, #0
 8010b06:	4948      	ldr	r1, [pc, #288]	@ (8010c28 <__ieee754_pow+0x410>)
 8010b08:	f7ef fbc2 	bl	8000290 <__aeabi_dsub>
 8010b0c:	4680      	mov	r8, r0
 8010b0e:	4689      	mov	r9, r1
 8010b10:	4622      	mov	r2, r4
 8010b12:	462b      	mov	r3, r5
 8010b14:	4620      	mov	r0, r4
 8010b16:	4629      	mov	r1, r5
 8010b18:	2400      	movs	r4, #0
 8010b1a:	f7ef fd71 	bl	8000600 <__aeabi_dmul>
 8010b1e:	4602      	mov	r2, r0
 8010b20:	460b      	mov	r3, r1
 8010b22:	4640      	mov	r0, r8
 8010b24:	4649      	mov	r1, r9
 8010b26:	f7ef fd6b 	bl	8000600 <__aeabi_dmul>
 8010b2a:	a33b      	add	r3, pc, #236	@ (adr r3, 8010c18 <__ieee754_pow+0x400>)
 8010b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b30:	f7ef fd66 	bl	8000600 <__aeabi_dmul>
 8010b34:	4602      	mov	r2, r0
 8010b36:	460b      	mov	r3, r1
 8010b38:	4650      	mov	r0, sl
 8010b3a:	4659      	mov	r1, fp
 8010b3c:	f7ef fba8 	bl	8000290 <__aeabi_dsub>
 8010b40:	4602      	mov	r2, r0
 8010b42:	460b      	mov	r3, r1
 8010b44:	4680      	mov	r8, r0
 8010b46:	4689      	mov	r9, r1
 8010b48:	4630      	mov	r0, r6
 8010b4a:	4639      	mov	r1, r7
 8010b4c:	f7ef fba2 	bl	8000294 <__adddf3>
 8010b50:	4632      	mov	r2, r6
 8010b52:	463b      	mov	r3, r7
 8010b54:	4620      	mov	r0, r4
 8010b56:	460d      	mov	r5, r1
 8010b58:	f7ef fb9a 	bl	8000290 <__aeabi_dsub>
 8010b5c:	4602      	mov	r2, r0
 8010b5e:	460b      	mov	r3, r1
 8010b60:	4640      	mov	r0, r8
 8010b62:	4649      	mov	r1, r9
 8010b64:	f7ef fb94 	bl	8000290 <__aeabi_dsub>
 8010b68:	4606      	mov	r6, r0
 8010b6a:	460f      	mov	r7, r1
 8010b6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010b78:	2300      	movs	r3, #0
 8010b7a:	9304      	str	r3, [sp, #16]
 8010b7c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010b80:	4652      	mov	r2, sl
 8010b82:	465b      	mov	r3, fp
 8010b84:	f7ef fb84 	bl	8000290 <__aeabi_dsub>
 8010b88:	4622      	mov	r2, r4
 8010b8a:	462b      	mov	r3, r5
 8010b8c:	f7ef fd38 	bl	8000600 <__aeabi_dmul>
 8010b90:	4680      	mov	r8, r0
 8010b92:	4689      	mov	r9, r1
 8010b94:	4630      	mov	r0, r6
 8010b96:	4639      	mov	r1, r7
 8010b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b9c:	f7ef fd30 	bl	8000600 <__aeabi_dmul>
 8010ba0:	4602      	mov	r2, r0
 8010ba2:	460b      	mov	r3, r1
 8010ba4:	4640      	mov	r0, r8
 8010ba6:	4649      	mov	r1, r9
 8010ba8:	f7ef fb74 	bl	8000294 <__adddf3>
 8010bac:	4606      	mov	r6, r0
 8010bae:	460f      	mov	r7, r1
 8010bb0:	4652      	mov	r2, sl
 8010bb2:	465b      	mov	r3, fp
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	4629      	mov	r1, r5
 8010bb8:	f7ef fd22 	bl	8000600 <__aeabi_dmul>
 8010bbc:	460b      	mov	r3, r1
 8010bbe:	4602      	mov	r2, r0
 8010bc0:	4680      	mov	r8, r0
 8010bc2:	4689      	mov	r9, r1
 8010bc4:	4630      	mov	r0, r6
 8010bc6:	4639      	mov	r1, r7
 8010bc8:	f7ef fb64 	bl	8000294 <__adddf3>
 8010bcc:	4b17      	ldr	r3, [pc, #92]	@ (8010c2c <__ieee754_pow+0x414>)
 8010bce:	4604      	mov	r4, r0
 8010bd0:	460d      	mov	r5, r1
 8010bd2:	4299      	cmp	r1, r3
 8010bd4:	468a      	mov	sl, r1
 8010bd6:	468b      	mov	fp, r1
 8010bd8:	f340 82f0 	ble.w	80111bc <__ieee754_pow+0x9a4>
 8010bdc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010be0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8010be4:	4303      	orrs	r3, r0
 8010be6:	f000 81e8 	beq.w	8010fba <__ieee754_pow+0x7a2>
 8010bea:	2200      	movs	r2, #0
 8010bec:	2300      	movs	r3, #0
 8010bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bf2:	f7ef ff77 	bl	8000ae4 <__aeabi_dcmplt>
 8010bf6:	3800      	subs	r0, #0
 8010bf8:	bf18      	it	ne
 8010bfa:	2001      	movne	r0, #1
 8010bfc:	e714      	b.n	8010a28 <__ieee754_pow+0x210>
 8010bfe:	bf00      	nop
 8010c00:	60000000 	.word	0x60000000
 8010c04:	3ff71547 	.word	0x3ff71547
 8010c08:	f85ddf44 	.word	0xf85ddf44
 8010c0c:	3e54ae0b 	.word	0x3e54ae0b
 8010c10:	55555555 	.word	0x55555555
 8010c14:	3fd55555 	.word	0x3fd55555
 8010c18:	652b82fe 	.word	0x652b82fe
 8010c1c:	3ff71547 	.word	0x3ff71547
 8010c20:	3ff00000 	.word	0x3ff00000
 8010c24:	3fd00000 	.word	0x3fd00000
 8010c28:	3fe00000 	.word	0x3fe00000
 8010c2c:	408fffff 	.word	0x408fffff
 8010c30:	4bd5      	ldr	r3, [pc, #852]	@ (8010f88 <__ieee754_pow+0x770>)
 8010c32:	2200      	movs	r2, #0
 8010c34:	402b      	ands	r3, r5
 8010c36:	b92b      	cbnz	r3, 8010c44 <__ieee754_pow+0x42c>
 8010c38:	4bd4      	ldr	r3, [pc, #848]	@ (8010f8c <__ieee754_pow+0x774>)
 8010c3a:	f7ef fce1 	bl	8000600 <__aeabi_dmul>
 8010c3e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8010c42:	468b      	mov	fp, r1
 8010c44:	ea4f 532b 	mov.w	r3, fp, asr #20
 8010c48:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8010c4c:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010c50:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8010c54:	4413      	add	r3, r2
 8010c56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010c5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c5c:	4bcc      	ldr	r3, [pc, #816]	@ (8010f90 <__ieee754_pow+0x778>)
 8010c5e:	459b      	cmp	fp, r3
 8010c60:	dd08      	ble.n	8010c74 <__ieee754_pow+0x45c>
 8010c62:	4bcc      	ldr	r3, [pc, #816]	@ (8010f94 <__ieee754_pow+0x77c>)
 8010c64:	459b      	cmp	fp, r3
 8010c66:	f340 81a5 	ble.w	8010fb4 <__ieee754_pow+0x79c>
 8010c6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c6c:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8010c70:	3301      	adds	r3, #1
 8010c72:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c74:	f04f 0a00 	mov.w	sl, #0
 8010c78:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010c7c:	4629      	mov	r1, r5
 8010c7e:	106d      	asrs	r5, r5, #1
 8010c80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c82:	4bc5      	ldr	r3, [pc, #788]	@ (8010f98 <__ieee754_pow+0x780>)
 8010c84:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8010c88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010c8c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8010c90:	ed93 7b00 	vldr	d7, [r3]
 8010c94:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010c98:	ec53 2b17 	vmov	r2, r3, d7
 8010c9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010ca0:	f7ef faf6 	bl	8000290 <__aeabi_dsub>
 8010ca4:	4606      	mov	r6, r0
 8010ca6:	460f      	mov	r7, r1
 8010ca8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010cac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010cb0:	f7ef faf0 	bl	8000294 <__adddf3>
 8010cb4:	4602      	mov	r2, r0
 8010cb6:	460b      	mov	r3, r1
 8010cb8:	2000      	movs	r0, #0
 8010cba:	49b8      	ldr	r1, [pc, #736]	@ (8010f9c <__ieee754_pow+0x784>)
 8010cbc:	f7ef fdca 	bl	8000854 <__aeabi_ddiv>
 8010cc0:	4602      	mov	r2, r0
 8010cc2:	460b      	mov	r3, r1
 8010cc4:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8010cc8:	4630      	mov	r0, r6
 8010cca:	4639      	mov	r1, r7
 8010ccc:	f7ef fc98 	bl	8000600 <__aeabi_dmul>
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010cd6:	4614      	mov	r4, r2
 8010cd8:	461d      	mov	r5, r3
 8010cda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010cde:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8010ce2:	f04f 0b00 	mov.w	fp, #0
 8010ce6:	4661      	mov	r1, ip
 8010ce8:	46e1      	mov	r9, ip
 8010cea:	4658      	mov	r0, fp
 8010cec:	46d8      	mov	r8, fp
 8010cee:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8010cf2:	f7ef fc85 	bl	8000600 <__aeabi_dmul>
 8010cf6:	4602      	mov	r2, r0
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	4630      	mov	r0, r6
 8010cfc:	4639      	mov	r1, r7
 8010cfe:	f7ef fac7 	bl	8000290 <__aeabi_dsub>
 8010d02:	4606      	mov	r6, r0
 8010d04:	460f      	mov	r7, r1
 8010d06:	4620      	mov	r0, r4
 8010d08:	4629      	mov	r1, r5
 8010d0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d0e:	f7ef fabf 	bl	8000290 <__aeabi_dsub>
 8010d12:	4602      	mov	r2, r0
 8010d14:	460b      	mov	r3, r1
 8010d16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010d1a:	f7ef fab9 	bl	8000290 <__aeabi_dsub>
 8010d1e:	465a      	mov	r2, fp
 8010d20:	464b      	mov	r3, r9
 8010d22:	f7ef fc6d 	bl	8000600 <__aeabi_dmul>
 8010d26:	4602      	mov	r2, r0
 8010d28:	460b      	mov	r3, r1
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	4639      	mov	r1, r7
 8010d2e:	f7ef faaf 	bl	8000290 <__aeabi_dsub>
 8010d32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010d36:	f7ef fc63 	bl	8000600 <__aeabi_dmul>
 8010d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010d42:	4610      	mov	r0, r2
 8010d44:	4619      	mov	r1, r3
 8010d46:	f7ef fc5b 	bl	8000600 <__aeabi_dmul>
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	460d      	mov	r5, r1
 8010d4e:	a37c      	add	r3, pc, #496	@ (adr r3, 8010f40 <__ieee754_pow+0x728>)
 8010d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d54:	f7ef fc54 	bl	8000600 <__aeabi_dmul>
 8010d58:	a37b      	add	r3, pc, #492	@ (adr r3, 8010f48 <__ieee754_pow+0x730>)
 8010d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d5e:	f7ef fa99 	bl	8000294 <__adddf3>
 8010d62:	4622      	mov	r2, r4
 8010d64:	462b      	mov	r3, r5
 8010d66:	f7ef fc4b 	bl	8000600 <__aeabi_dmul>
 8010d6a:	a379      	add	r3, pc, #484	@ (adr r3, 8010f50 <__ieee754_pow+0x738>)
 8010d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d70:	f7ef fa90 	bl	8000294 <__adddf3>
 8010d74:	4622      	mov	r2, r4
 8010d76:	462b      	mov	r3, r5
 8010d78:	f7ef fc42 	bl	8000600 <__aeabi_dmul>
 8010d7c:	a376      	add	r3, pc, #472	@ (adr r3, 8010f58 <__ieee754_pow+0x740>)
 8010d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d82:	f7ef fa87 	bl	8000294 <__adddf3>
 8010d86:	4622      	mov	r2, r4
 8010d88:	462b      	mov	r3, r5
 8010d8a:	f7ef fc39 	bl	8000600 <__aeabi_dmul>
 8010d8e:	a374      	add	r3, pc, #464	@ (adr r3, 8010f60 <__ieee754_pow+0x748>)
 8010d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d94:	f7ef fa7e 	bl	8000294 <__adddf3>
 8010d98:	4622      	mov	r2, r4
 8010d9a:	462b      	mov	r3, r5
 8010d9c:	f7ef fc30 	bl	8000600 <__aeabi_dmul>
 8010da0:	a371      	add	r3, pc, #452	@ (adr r3, 8010f68 <__ieee754_pow+0x750>)
 8010da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da6:	f7ef fa75 	bl	8000294 <__adddf3>
 8010daa:	4606      	mov	r6, r0
 8010dac:	460f      	mov	r7, r1
 8010dae:	4622      	mov	r2, r4
 8010db0:	462b      	mov	r3, r5
 8010db2:	4620      	mov	r0, r4
 8010db4:	4629      	mov	r1, r5
 8010db6:	f7ef fc23 	bl	8000600 <__aeabi_dmul>
 8010dba:	4602      	mov	r2, r0
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	4630      	mov	r0, r6
 8010dc0:	4639      	mov	r1, r7
 8010dc2:	f7ef fc1d 	bl	8000600 <__aeabi_dmul>
 8010dc6:	465a      	mov	r2, fp
 8010dc8:	4604      	mov	r4, r0
 8010dca:	460d      	mov	r5, r1
 8010dcc:	464b      	mov	r3, r9
 8010dce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010dd2:	f7ef fa5f 	bl	8000294 <__adddf3>
 8010dd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010dda:	f7ef fc11 	bl	8000600 <__aeabi_dmul>
 8010dde:	4622      	mov	r2, r4
 8010de0:	462b      	mov	r3, r5
 8010de2:	f7ef fa57 	bl	8000294 <__adddf3>
 8010de6:	465a      	mov	r2, fp
 8010de8:	464b      	mov	r3, r9
 8010dea:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010dee:	4658      	mov	r0, fp
 8010df0:	4649      	mov	r1, r9
 8010df2:	f7ef fc05 	bl	8000600 <__aeabi_dmul>
 8010df6:	2200      	movs	r2, #0
 8010df8:	4b69      	ldr	r3, [pc, #420]	@ (8010fa0 <__ieee754_pow+0x788>)
 8010dfa:	4606      	mov	r6, r0
 8010dfc:	460f      	mov	r7, r1
 8010dfe:	f7ef fa49 	bl	8000294 <__adddf3>
 8010e02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010e06:	f7ef fa45 	bl	8000294 <__adddf3>
 8010e0a:	460d      	mov	r5, r1
 8010e0c:	460b      	mov	r3, r1
 8010e0e:	4640      	mov	r0, r8
 8010e10:	4649      	mov	r1, r9
 8010e12:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8010e16:	465c      	mov	r4, fp
 8010e18:	465a      	mov	r2, fp
 8010e1a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8010e1e:	f7ef fbef 	bl	8000600 <__aeabi_dmul>
 8010e22:	2200      	movs	r2, #0
 8010e24:	4680      	mov	r8, r0
 8010e26:	4689      	mov	r9, r1
 8010e28:	4b5d      	ldr	r3, [pc, #372]	@ (8010fa0 <__ieee754_pow+0x788>)
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	4629      	mov	r1, r5
 8010e2e:	f7ef fa2f 	bl	8000290 <__aeabi_dsub>
 8010e32:	4632      	mov	r2, r6
 8010e34:	463b      	mov	r3, r7
 8010e36:	f7ef fa2b 	bl	8000290 <__aeabi_dsub>
 8010e3a:	4602      	mov	r2, r0
 8010e3c:	460b      	mov	r3, r1
 8010e3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010e42:	f7ef fa25 	bl	8000290 <__aeabi_dsub>
 8010e46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e4a:	f7ef fbd9 	bl	8000600 <__aeabi_dmul>
 8010e4e:	4606      	mov	r6, r0
 8010e50:	460f      	mov	r7, r1
 8010e52:	4622      	mov	r2, r4
 8010e54:	462b      	mov	r3, r5
 8010e56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e5a:	f7ef fbd1 	bl	8000600 <__aeabi_dmul>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	460b      	mov	r3, r1
 8010e62:	4630      	mov	r0, r6
 8010e64:	4639      	mov	r1, r7
 8010e66:	f7ef fa15 	bl	8000294 <__adddf3>
 8010e6a:	4606      	mov	r6, r0
 8010e6c:	460f      	mov	r7, r1
 8010e6e:	4602      	mov	r2, r0
 8010e70:	460b      	mov	r3, r1
 8010e72:	4640      	mov	r0, r8
 8010e74:	4649      	mov	r1, r9
 8010e76:	f7ef fa0d 	bl	8000294 <__adddf3>
 8010e7a:	460d      	mov	r5, r1
 8010e7c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8010e80:	a33b      	add	r3, pc, #236	@ (adr r3, 8010f70 <__ieee754_pow+0x758>)
 8010e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e86:	465c      	mov	r4, fp
 8010e88:	4658      	mov	r0, fp
 8010e8a:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8010e8e:	f7ef fbb7 	bl	8000600 <__aeabi_dmul>
 8010e92:	4642      	mov	r2, r8
 8010e94:	464b      	mov	r3, r9
 8010e96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	4629      	mov	r1, r5
 8010e9e:	f7ef f9f7 	bl	8000290 <__aeabi_dsub>
 8010ea2:	4602      	mov	r2, r0
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	4630      	mov	r0, r6
 8010ea8:	4639      	mov	r1, r7
 8010eaa:	f7ef f9f1 	bl	8000290 <__aeabi_dsub>
 8010eae:	a332      	add	r3, pc, #200	@ (adr r3, 8010f78 <__ieee754_pow+0x760>)
 8010eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb4:	f7ef fba4 	bl	8000600 <__aeabi_dmul>
 8010eb8:	4606      	mov	r6, r0
 8010eba:	460f      	mov	r7, r1
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	4629      	mov	r1, r5
 8010ec0:	a32f      	add	r3, pc, #188	@ (adr r3, 8010f80 <__ieee754_pow+0x768>)
 8010ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec6:	f7ef fb9b 	bl	8000600 <__aeabi_dmul>
 8010eca:	4602      	mov	r2, r0
 8010ecc:	460b      	mov	r3, r1
 8010ece:	4630      	mov	r0, r6
 8010ed0:	4639      	mov	r1, r7
 8010ed2:	f7ef f9df 	bl	8000294 <__adddf3>
 8010ed6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010ed8:	4b32      	ldr	r3, [pc, #200]	@ (8010fa4 <__ieee754_pow+0x78c>)
 8010eda:	4413      	add	r3, r2
 8010edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee0:	f7ef f9d8 	bl	8000294 <__adddf3>
 8010ee4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010ee8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010eea:	f7ef fb1f 	bl	800052c <__aeabi_i2d>
 8010eee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8010fa8 <__ieee754_pow+0x790>)
 8010ef2:	4606      	mov	r6, r0
 8010ef4:	460f      	mov	r7, r1
 8010ef6:	4413      	add	r3, r2
 8010ef8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010efc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f04:	f7ef f9c6 	bl	8000294 <__adddf3>
 8010f08:	4642      	mov	r2, r8
 8010f0a:	464b      	mov	r3, r9
 8010f0c:	f7ef f9c2 	bl	8000294 <__adddf3>
 8010f10:	4632      	mov	r2, r6
 8010f12:	463b      	mov	r3, r7
 8010f14:	f7ef f9be 	bl	8000294 <__adddf3>
 8010f18:	4632      	mov	r2, r6
 8010f1a:	463b      	mov	r3, r7
 8010f1c:	460d      	mov	r5, r1
 8010f1e:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8010f22:	4658      	mov	r0, fp
 8010f24:	465c      	mov	r4, fp
 8010f26:	f7ef f9b3 	bl	8000290 <__aeabi_dsub>
 8010f2a:	4642      	mov	r2, r8
 8010f2c:	464b      	mov	r3, r9
 8010f2e:	f7ef f9af 	bl	8000290 <__aeabi_dsub>
 8010f32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f36:	f7ef f9ab 	bl	8000290 <__aeabi_dsub>
 8010f3a:	4602      	mov	r2, r0
 8010f3c:	e036      	b.n	8010fac <__ieee754_pow+0x794>
 8010f3e:	bf00      	nop
 8010f40:	4a454eef 	.word	0x4a454eef
 8010f44:	3fca7e28 	.word	0x3fca7e28
 8010f48:	93c9db65 	.word	0x93c9db65
 8010f4c:	3fcd864a 	.word	0x3fcd864a
 8010f50:	a91d4101 	.word	0xa91d4101
 8010f54:	3fd17460 	.word	0x3fd17460
 8010f58:	518f264d 	.word	0x518f264d
 8010f5c:	3fd55555 	.word	0x3fd55555
 8010f60:	db6fabff 	.word	0xdb6fabff
 8010f64:	3fdb6db6 	.word	0x3fdb6db6
 8010f68:	33333303 	.word	0x33333303
 8010f6c:	3fe33333 	.word	0x3fe33333
 8010f70:	e0000000 	.word	0xe0000000
 8010f74:	3feec709 	.word	0x3feec709
 8010f78:	dc3a03fd 	.word	0xdc3a03fd
 8010f7c:	3feec709 	.word	0x3feec709
 8010f80:	145b01f5 	.word	0x145b01f5
 8010f84:	be3e2fe0 	.word	0xbe3e2fe0
 8010f88:	7ff00000 	.word	0x7ff00000
 8010f8c:	43400000 	.word	0x43400000
 8010f90:	0003988e 	.word	0x0003988e
 8010f94:	000bb679 	.word	0x000bb679
 8010f98:	08011ea8 	.word	0x08011ea8
 8010f9c:	3ff00000 	.word	0x3ff00000
 8010fa0:	40080000 	.word	0x40080000
 8010fa4:	08011e88 	.word	0x08011e88
 8010fa8:	08011e98 	.word	0x08011e98
 8010fac:	460b      	mov	r3, r1
 8010fae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010fb2:	e5d7      	b.n	8010b64 <__ieee754_pow+0x34c>
 8010fb4:	f04f 0a01 	mov.w	sl, #1
 8010fb8:	e65e      	b.n	8010c78 <__ieee754_pow+0x460>
 8010fba:	a3b4      	add	r3, pc, #720	@ (adr r3, 801128c <__ieee754_pow+0xa74>)
 8010fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	4639      	mov	r1, r7
 8010fc4:	f7ef f966 	bl	8000294 <__adddf3>
 8010fc8:	4642      	mov	r2, r8
 8010fca:	464b      	mov	r3, r9
 8010fcc:	e9cd 0100 	strd	r0, r1, [sp]
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	4629      	mov	r1, r5
 8010fd4:	f7ef f95c 	bl	8000290 <__aeabi_dsub>
 8010fd8:	4602      	mov	r2, r0
 8010fda:	460b      	mov	r3, r1
 8010fdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fe0:	f7ef fd9e 	bl	8000b20 <__aeabi_dcmpgt>
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	f47f ae00 	bne.w	8010bea <__ieee754_pow+0x3d2>
 8010fea:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8010fee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010ff2:	48a1      	ldr	r0, [pc, #644]	@ (8011278 <__ieee754_pow+0xa60>)
 8010ff4:	f1bb 0f00 	cmp.w	fp, #0
 8010ff8:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8010ffc:	f04f 0200 	mov.w	r2, #0
 8011000:	fa43 fa0a 	asr.w	sl, r3, sl
 8011004:	44da      	add	sl, fp
 8011006:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801100a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801100e:	fa40 f001 	asr.w	r0, r0, r1
 8011012:	f1c1 0114 	rsb	r1, r1, #20
 8011016:	ea00 030a 	and.w	r3, r0, sl
 801101a:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801101e:	4640      	mov	r0, r8
 8011020:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8011024:	fa4a fa01 	asr.w	sl, sl, r1
 8011028:	4649      	mov	r1, r9
 801102a:	bfb8      	it	lt
 801102c:	f1ca 0a00 	rsblt	sl, sl, #0
 8011030:	f7ef f92e 	bl	8000290 <__aeabi_dsub>
 8011034:	4680      	mov	r8, r0
 8011036:	4689      	mov	r9, r1
 8011038:	2400      	movs	r4, #0
 801103a:	4632      	mov	r2, r6
 801103c:	463b      	mov	r3, r7
 801103e:	4640      	mov	r0, r8
 8011040:	4649      	mov	r1, r9
 8011042:	f7ef f927 	bl	8000294 <__adddf3>
 8011046:	460d      	mov	r5, r1
 8011048:	4620      	mov	r0, r4
 801104a:	a37b      	add	r3, pc, #492	@ (adr r3, 8011238 <__ieee754_pow+0xa20>)
 801104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011050:	f7ef fad6 	bl	8000600 <__aeabi_dmul>
 8011054:	4642      	mov	r2, r8
 8011056:	464b      	mov	r3, r9
 8011058:	e9cd 0100 	strd	r0, r1, [sp]
 801105c:	4620      	mov	r0, r4
 801105e:	4629      	mov	r1, r5
 8011060:	f7ef f916 	bl	8000290 <__aeabi_dsub>
 8011064:	4602      	mov	r2, r0
 8011066:	460b      	mov	r3, r1
 8011068:	4630      	mov	r0, r6
 801106a:	4639      	mov	r1, r7
 801106c:	f7ef f910 	bl	8000290 <__aeabi_dsub>
 8011070:	a373      	add	r3, pc, #460	@ (adr r3, 8011240 <__ieee754_pow+0xa28>)
 8011072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011076:	f7ef fac3 	bl	8000600 <__aeabi_dmul>
 801107a:	4680      	mov	r8, r0
 801107c:	4689      	mov	r9, r1
 801107e:	4620      	mov	r0, r4
 8011080:	4629      	mov	r1, r5
 8011082:	a371      	add	r3, pc, #452	@ (adr r3, 8011248 <__ieee754_pow+0xa30>)
 8011084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011088:	f7ef faba 	bl	8000600 <__aeabi_dmul>
 801108c:	4602      	mov	r2, r0
 801108e:	460b      	mov	r3, r1
 8011090:	4640      	mov	r0, r8
 8011092:	4649      	mov	r1, r9
 8011094:	f7ef f8fe 	bl	8000294 <__adddf3>
 8011098:	4604      	mov	r4, r0
 801109a:	460d      	mov	r5, r1
 801109c:	4602      	mov	r2, r0
 801109e:	460b      	mov	r3, r1
 80110a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80110a4:	f7ef f8f6 	bl	8000294 <__adddf3>
 80110a8:	4680      	mov	r8, r0
 80110aa:	4689      	mov	r9, r1
 80110ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110b0:	f7ef f8ee 	bl	8000290 <__aeabi_dsub>
 80110b4:	4602      	mov	r2, r0
 80110b6:	460b      	mov	r3, r1
 80110b8:	4620      	mov	r0, r4
 80110ba:	4629      	mov	r1, r5
 80110bc:	f7ef f8e8 	bl	8000290 <__aeabi_dsub>
 80110c0:	4642      	mov	r2, r8
 80110c2:	4606      	mov	r6, r0
 80110c4:	460f      	mov	r7, r1
 80110c6:	464b      	mov	r3, r9
 80110c8:	4640      	mov	r0, r8
 80110ca:	4649      	mov	r1, r9
 80110cc:	f7ef fa98 	bl	8000600 <__aeabi_dmul>
 80110d0:	4604      	mov	r4, r0
 80110d2:	460d      	mov	r5, r1
 80110d4:	a35e      	add	r3, pc, #376	@ (adr r3, 8011250 <__ieee754_pow+0xa38>)
 80110d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110da:	f7ef fa91 	bl	8000600 <__aeabi_dmul>
 80110de:	a35e      	add	r3, pc, #376	@ (adr r3, 8011258 <__ieee754_pow+0xa40>)
 80110e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e4:	f7ef f8d4 	bl	8000290 <__aeabi_dsub>
 80110e8:	4622      	mov	r2, r4
 80110ea:	462b      	mov	r3, r5
 80110ec:	f7ef fa88 	bl	8000600 <__aeabi_dmul>
 80110f0:	a35b      	add	r3, pc, #364	@ (adr r3, 8011260 <__ieee754_pow+0xa48>)
 80110f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f6:	f7ef f8cd 	bl	8000294 <__adddf3>
 80110fa:	4622      	mov	r2, r4
 80110fc:	462b      	mov	r3, r5
 80110fe:	f7ef fa7f 	bl	8000600 <__aeabi_dmul>
 8011102:	a359      	add	r3, pc, #356	@ (adr r3, 8011268 <__ieee754_pow+0xa50>)
 8011104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011108:	f7ef f8c2 	bl	8000290 <__aeabi_dsub>
 801110c:	4622      	mov	r2, r4
 801110e:	462b      	mov	r3, r5
 8011110:	f7ef fa76 	bl	8000600 <__aeabi_dmul>
 8011114:	a356      	add	r3, pc, #344	@ (adr r3, 8011270 <__ieee754_pow+0xa58>)
 8011116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111a:	f7ef f8bb 	bl	8000294 <__adddf3>
 801111e:	4622      	mov	r2, r4
 8011120:	462b      	mov	r3, r5
 8011122:	f7ef fa6d 	bl	8000600 <__aeabi_dmul>
 8011126:	4602      	mov	r2, r0
 8011128:	460b      	mov	r3, r1
 801112a:	4640      	mov	r0, r8
 801112c:	4649      	mov	r1, r9
 801112e:	f7ef f8af 	bl	8000290 <__aeabi_dsub>
 8011132:	4604      	mov	r4, r0
 8011134:	460d      	mov	r5, r1
 8011136:	4602      	mov	r2, r0
 8011138:	460b      	mov	r3, r1
 801113a:	4640      	mov	r0, r8
 801113c:	4649      	mov	r1, r9
 801113e:	f7ef fa5f 	bl	8000600 <__aeabi_dmul>
 8011142:	2200      	movs	r2, #0
 8011144:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011148:	e9cd 0100 	strd	r0, r1, [sp]
 801114c:	4620      	mov	r0, r4
 801114e:	4629      	mov	r1, r5
 8011150:	f7ef f89e 	bl	8000290 <__aeabi_dsub>
 8011154:	4602      	mov	r2, r0
 8011156:	460b      	mov	r3, r1
 8011158:	e9dd 0100 	ldrd	r0, r1, [sp]
 801115c:	f7ef fb7a 	bl	8000854 <__aeabi_ddiv>
 8011160:	4632      	mov	r2, r6
 8011162:	4604      	mov	r4, r0
 8011164:	460d      	mov	r5, r1
 8011166:	463b      	mov	r3, r7
 8011168:	4640      	mov	r0, r8
 801116a:	4649      	mov	r1, r9
 801116c:	f7ef fa48 	bl	8000600 <__aeabi_dmul>
 8011170:	4632      	mov	r2, r6
 8011172:	463b      	mov	r3, r7
 8011174:	f7ef f88e 	bl	8000294 <__adddf3>
 8011178:	4602      	mov	r2, r0
 801117a:	460b      	mov	r3, r1
 801117c:	4620      	mov	r0, r4
 801117e:	4629      	mov	r1, r5
 8011180:	f7ef f886 	bl	8000290 <__aeabi_dsub>
 8011184:	4642      	mov	r2, r8
 8011186:	464b      	mov	r3, r9
 8011188:	f7ef f882 	bl	8000290 <__aeabi_dsub>
 801118c:	460b      	mov	r3, r1
 801118e:	4602      	mov	r2, r0
 8011190:	493a      	ldr	r1, [pc, #232]	@ (801127c <__ieee754_pow+0xa64>)
 8011192:	2000      	movs	r0, #0
 8011194:	f7ef f87c 	bl	8000290 <__aeabi_dsub>
 8011198:	ec41 0b10 	vmov	d0, r0, r1
 801119c:	ee10 3a90 	vmov	r3, s1
 80111a0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80111a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80111a8:	da30      	bge.n	801120c <__ieee754_pow+0x9f4>
 80111aa:	4650      	mov	r0, sl
 80111ac:	f000 f8b8 	bl	8011320 <scalbn>
 80111b0:	ec51 0b10 	vmov	r0, r1, d0
 80111b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80111b8:	f7ff bbd5 	b.w	8010966 <__ieee754_pow+0x14e>
 80111bc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80111c0:	4c2f      	ldr	r4, [pc, #188]	@ (8011280 <__ieee754_pow+0xa68>)
 80111c2:	42a3      	cmp	r3, r4
 80111c4:	d91a      	bls.n	80111fc <__ieee754_pow+0x9e4>
 80111c6:	4b2f      	ldr	r3, [pc, #188]	@ (8011284 <__ieee754_pow+0xa6c>)
 80111c8:	440b      	add	r3, r1
 80111ca:	4303      	orrs	r3, r0
 80111cc:	d009      	beq.n	80111e2 <__ieee754_pow+0x9ca>
 80111ce:	2200      	movs	r2, #0
 80111d0:	2300      	movs	r3, #0
 80111d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111d6:	f7ef fc85 	bl	8000ae4 <__aeabi_dcmplt>
 80111da:	3800      	subs	r0, #0
 80111dc:	bf18      	it	ne
 80111de:	2001      	movne	r0, #1
 80111e0:	e42e      	b.n	8010a40 <__ieee754_pow+0x228>
 80111e2:	4642      	mov	r2, r8
 80111e4:	464b      	mov	r3, r9
 80111e6:	f7ef f853 	bl	8000290 <__aeabi_dsub>
 80111ea:	4632      	mov	r2, r6
 80111ec:	463b      	mov	r3, r7
 80111ee:	f7ef fc8d 	bl	8000b0c <__aeabi_dcmpge>
 80111f2:	2800      	cmp	r0, #0
 80111f4:	d1eb      	bne.n	80111ce <__ieee754_pow+0x9b6>
 80111f6:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8011294 <__ieee754_pow+0xa7c>
 80111fa:	e6f6      	b.n	8010fea <__ieee754_pow+0x7d2>
 80111fc:	469a      	mov	sl, r3
 80111fe:	4b22      	ldr	r3, [pc, #136]	@ (8011288 <__ieee754_pow+0xa70>)
 8011200:	459a      	cmp	sl, r3
 8011202:	f63f aef2 	bhi.w	8010fea <__ieee754_pow+0x7d2>
 8011206:	f8dd a010 	ldr.w	sl, [sp, #16]
 801120a:	e715      	b.n	8011038 <__ieee754_pow+0x820>
 801120c:	ec51 0b10 	vmov	r0, r1, d0
 8011210:	4619      	mov	r1, r3
 8011212:	e7cf      	b.n	80111b4 <__ieee754_pow+0x99c>
 8011214:	2000      	movs	r0, #0
 8011216:	4919      	ldr	r1, [pc, #100]	@ (801127c <__ieee754_pow+0xa64>)
 8011218:	f7ff bb1b 	b.w	8010852 <__ieee754_pow+0x3a>
 801121c:	2000      	movs	r0, #0
 801121e:	2100      	movs	r1, #0
 8011220:	f7ff bb17 	b.w	8010852 <__ieee754_pow+0x3a>
 8011224:	4630      	mov	r0, r6
 8011226:	4639      	mov	r1, r7
 8011228:	f7ff bb13 	b.w	8010852 <__ieee754_pow+0x3a>
 801122c:	460c      	mov	r4, r1
 801122e:	f7ff bb61 	b.w	80108f4 <__ieee754_pow+0xdc>
 8011232:	2400      	movs	r4, #0
 8011234:	f7ff bb4c 	b.w	80108d0 <__ieee754_pow+0xb8>
 8011238:	00000000 	.word	0x00000000
 801123c:	3fe62e43 	.word	0x3fe62e43
 8011240:	fefa39ef 	.word	0xfefa39ef
 8011244:	3fe62e42 	.word	0x3fe62e42
 8011248:	0ca86c39 	.word	0x0ca86c39
 801124c:	be205c61 	.word	0xbe205c61
 8011250:	72bea4d0 	.word	0x72bea4d0
 8011254:	3e663769 	.word	0x3e663769
 8011258:	c5d26bf1 	.word	0xc5d26bf1
 801125c:	3ebbbd41 	.word	0x3ebbbd41
 8011260:	af25de2c 	.word	0xaf25de2c
 8011264:	3f11566a 	.word	0x3f11566a
 8011268:	16bebd93 	.word	0x16bebd93
 801126c:	3f66c16c 	.word	0x3f66c16c
 8011270:	5555553e 	.word	0x5555553e
 8011274:	3fc55555 	.word	0x3fc55555
 8011278:	fff00000 	.word	0xfff00000
 801127c:	3ff00000 	.word	0x3ff00000
 8011280:	4090cbff 	.word	0x4090cbff
 8011284:	3f6f3400 	.word	0x3f6f3400
 8011288:	3fe00000 	.word	0x3fe00000
 801128c:	652b82fe 	.word	0x652b82fe
 8011290:	3c971547 	.word	0x3c971547
 8011294:	4090cc00 	.word	0x4090cc00

08011298 <with_errno>:
 8011298:	b510      	push	{r4, lr}
 801129a:	ed2d 8b02 	vpush	{d8}
 801129e:	eeb0 8a40 	vmov.f32	s16, s0
 80112a2:	eef0 8a60 	vmov.f32	s17, s1
 80112a6:	4604      	mov	r4, r0
 80112a8:	f7fc feba 	bl	800e020 <__errno>
 80112ac:	6004      	str	r4, [r0, #0]
 80112ae:	eeb0 0a48 	vmov.f32	s0, s16
 80112b2:	eef0 0a68 	vmov.f32	s1, s17
 80112b6:	ecbd 8b02 	vpop	{d8}
 80112ba:	bd10      	pop	{r4, pc}

080112bc <xflow>:
 80112bc:	4603      	mov	r3, r0
 80112be:	b507      	push	{r0, r1, r2, lr}
 80112c0:	ec51 0b10 	vmov	r0, r1, d0
 80112c4:	b183      	cbz	r3, 80112e8 <xflow+0x2c>
 80112c6:	4602      	mov	r2, r0
 80112c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80112cc:	e9cd 2300 	strd	r2, r3, [sp]
 80112d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112d4:	f7ef f994 	bl	8000600 <__aeabi_dmul>
 80112d8:	ec41 0b10 	vmov	d0, r0, r1
 80112dc:	2022      	movs	r0, #34	@ 0x22
 80112de:	b003      	add	sp, #12
 80112e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80112e4:	f7ff bfd8 	b.w	8011298 <with_errno>
 80112e8:	4602      	mov	r2, r0
 80112ea:	460b      	mov	r3, r1
 80112ec:	e7ee      	b.n	80112cc <xflow+0x10>
	...

080112f0 <__math_uflow>:
 80112f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80112f8 <__math_uflow+0x8>
 80112f4:	f7ff bfe2 	b.w	80112bc <xflow>
 80112f8:	00000000 	.word	0x00000000
 80112fc:	10000000 	.word	0x10000000

08011300 <__math_oflow>:
 8011300:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011308 <__math_oflow+0x8>
 8011304:	f7ff bfda 	b.w	80112bc <xflow>
 8011308:	00000000 	.word	0x00000000
 801130c:	70000000 	.word	0x70000000

08011310 <fabs>:
 8011310:	ec51 0b10 	vmov	r0, r1, d0
 8011314:	4602      	mov	r2, r0
 8011316:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801131a:	ec43 2b10 	vmov	d0, r2, r3
 801131e:	4770      	bx	lr

08011320 <scalbn>:
 8011320:	b570      	push	{r4, r5, r6, lr}
 8011322:	ec55 4b10 	vmov	r4, r5, d0
 8011326:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801132a:	4606      	mov	r6, r0
 801132c:	462b      	mov	r3, r5
 801132e:	b991      	cbnz	r1, 8011356 <scalbn+0x36>
 8011330:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011334:	4323      	orrs	r3, r4
 8011336:	d03d      	beq.n	80113b4 <scalbn+0x94>
 8011338:	4b35      	ldr	r3, [pc, #212]	@ (8011410 <scalbn+0xf0>)
 801133a:	4620      	mov	r0, r4
 801133c:	4629      	mov	r1, r5
 801133e:	2200      	movs	r2, #0
 8011340:	f7ef f95e 	bl	8000600 <__aeabi_dmul>
 8011344:	4b33      	ldr	r3, [pc, #204]	@ (8011414 <scalbn+0xf4>)
 8011346:	4604      	mov	r4, r0
 8011348:	460d      	mov	r5, r1
 801134a:	429e      	cmp	r6, r3
 801134c:	da0f      	bge.n	801136e <scalbn+0x4e>
 801134e:	a328      	add	r3, pc, #160	@ (adr r3, 80113f0 <scalbn+0xd0>)
 8011350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011354:	e01e      	b.n	8011394 <scalbn+0x74>
 8011356:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801135a:	4291      	cmp	r1, r2
 801135c:	d10b      	bne.n	8011376 <scalbn+0x56>
 801135e:	4622      	mov	r2, r4
 8011360:	4620      	mov	r0, r4
 8011362:	4629      	mov	r1, r5
 8011364:	f7ee ff96 	bl	8000294 <__adddf3>
 8011368:	4604      	mov	r4, r0
 801136a:	460d      	mov	r5, r1
 801136c:	e022      	b.n	80113b4 <scalbn+0x94>
 801136e:	460b      	mov	r3, r1
 8011370:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011374:	3936      	subs	r1, #54	@ 0x36
 8011376:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801137a:	4296      	cmp	r6, r2
 801137c:	dd0d      	ble.n	801139a <scalbn+0x7a>
 801137e:	2d00      	cmp	r5, #0
 8011380:	a11d      	add	r1, pc, #116	@ (adr r1, 80113f8 <scalbn+0xd8>)
 8011382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011386:	da02      	bge.n	801138e <scalbn+0x6e>
 8011388:	a11d      	add	r1, pc, #116	@ (adr r1, 8011400 <scalbn+0xe0>)
 801138a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801138e:	a31a      	add	r3, pc, #104	@ (adr r3, 80113f8 <scalbn+0xd8>)
 8011390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011394:	f7ef f934 	bl	8000600 <__aeabi_dmul>
 8011398:	e7e6      	b.n	8011368 <scalbn+0x48>
 801139a:	1872      	adds	r2, r6, r1
 801139c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80113a0:	428a      	cmp	r2, r1
 80113a2:	dcec      	bgt.n	801137e <scalbn+0x5e>
 80113a4:	2a00      	cmp	r2, #0
 80113a6:	dd08      	ble.n	80113ba <scalbn+0x9a>
 80113a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80113ac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80113b0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80113b4:	ec45 4b10 	vmov	d0, r4, r5
 80113b8:	bd70      	pop	{r4, r5, r6, pc}
 80113ba:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80113be:	da08      	bge.n	80113d2 <scalbn+0xb2>
 80113c0:	2d00      	cmp	r5, #0
 80113c2:	a10b      	add	r1, pc, #44	@ (adr r1, 80113f0 <scalbn+0xd0>)
 80113c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113c8:	dac1      	bge.n	801134e <scalbn+0x2e>
 80113ca:	a10f      	add	r1, pc, #60	@ (adr r1, 8011408 <scalbn+0xe8>)
 80113cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113d0:	e7bd      	b.n	801134e <scalbn+0x2e>
 80113d2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80113d6:	3236      	adds	r2, #54	@ 0x36
 80113d8:	4620      	mov	r0, r4
 80113da:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80113de:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80113e2:	2200      	movs	r2, #0
 80113e4:	4b0c      	ldr	r3, [pc, #48]	@ (8011418 <scalbn+0xf8>)
 80113e6:	4629      	mov	r1, r5
 80113e8:	e7d4      	b.n	8011394 <scalbn+0x74>
 80113ea:	bf00      	nop
 80113ec:	f3af 8000 	nop.w
 80113f0:	c2f8f359 	.word	0xc2f8f359
 80113f4:	01a56e1f 	.word	0x01a56e1f
 80113f8:	8800759c 	.word	0x8800759c
 80113fc:	7e37e43c 	.word	0x7e37e43c
 8011400:	8800759c 	.word	0x8800759c
 8011404:	fe37e43c 	.word	0xfe37e43c
 8011408:	c2f8f359 	.word	0xc2f8f359
 801140c:	81a56e1f 	.word	0x81a56e1f
 8011410:	43500000 	.word	0x43500000
 8011414:	ffff3cb0 	.word	0xffff3cb0
 8011418:	3c900000 	.word	0x3c900000

0801141c <_init>:
 801141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801141e:	bf00      	nop
 8011420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011422:	bc08      	pop	{r3}
 8011424:	469e      	mov	lr, r3
 8011426:	4770      	bx	lr

08011428 <_fini>:
 8011428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801142a:	bf00      	nop
 801142c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801142e:	bc08      	pop	{r3}
 8011430:	469e      	mov	lr, r3
 8011432:	4770      	bx	lr
 8011434:	0000      	movs	r0, r0
	...
